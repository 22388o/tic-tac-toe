{"version":3,"sources":["web3/wallet.ts","web3/web3.ts","web3/wutils.ts","Square.js","Board.js","web3/localwallet.ts","Server.js","Game.js","TitleBar.js","wallet.js","App.js","reportWebVitals.js","index.js","utils.js","Request.ts","web3/dotwallet.ts"],"names":["NetWork","SignType","wallet","network","this","FEE","web3","url","axios","get","timeout","then","res","contractClass","buildContractClass","data","types","buildTypeClasses","contract","amountInContract","DotWallet","changeAddress","publicKey","minAmount","listUnspent","purpose","utxos","a","length","Error","tx","inputs","outputs","push","script","lockingScript","toHex","satoshis","utxo","sequence","changeAmount","bsv","Script","buildPublicKeyHashOut","addr","pubkey","DotWalletPublicKey","set","DotWalletAddress","getSignature","toRawTx","ALL","signature","add","Buffer","from","PublicKey","toBuffer","rawTx","sendRawTransaction","buildDeployTx","sendTx","txid","signInput","privateKey","inputIndex","sigHashType","output","Transaction","Output","sig","Signature","prevTxId","txHash","outputIndex","Sighash","sign","satoshisBN","sigtype","buildPublicKeyHashIn","toDER","toBsvTx","tx_","forEach","input","addInput","Input","sequenceNumber","fromHex","addOutput","nLockTime","toString","getPreimage","bsvTx","getPreimage_","toASM","Square","props","value","icon","className","n","winnerClass","onClick","href","target","title","label","Board","row","col","board","cellCounter","i","columns","j","renderSquare","winnerSquares","squares","createBoard","React","Component","server","player","privKey","accessToken","deleteGame","console","log","window","localStorage","removeItem","createGame","game","event","setItem","JSON","stringify","saveGame","getGame","gameJson","getItem","parse","getCurrentPlayer","savePrivateKey","key","getPrivateKey","getBobPrivateKey","getAlicePrivateKey","getAccessToken","DotWalletToken","urlParams","URLSearchParams","location","search","self","addEventListener","e","emit","error","cb","on","off","EventEmitter","calculateWinner","lines","b","c","winner","winnerRow","initialState","history","Array","fill","currentStepNumber","xIsNext","Game","gameState","state","nextProps","setState","map","square","join","lastUtxo","alert","newState","oldState","newLockingScript","amount","getPlayer","address","aliceAddress","alicePubKey","Networks","testnet","bobAddress","bobPubKey","aliceLockingScript","toAddress","bobLockingScript","contractInstance","codePart","fromASM","undefined","preimage","setDataPart","unlockScript","move","Sig","result","verify","inputSatoshis","success","slice","current","calculateOldState","checkIfValid","calculateNewState","buildCallContractTx","concat","currentLocation","0","1","2","3","4","5","6","7","8","stepNumber","Object","assign","catch","response","status","end","bet","src","deploy","winnerName","nexter","handleClick","TitleBar","useReducer","bool","amountRef","useRef","onCancel","cancelBet","started","creator","split","ref","type","name","placeholder","parseInt","isNaN","startBet","Wallet","useState","balance","setBalance","authed","setAuth","useEffect","code2token","getCode","setWallet","getbalance","requestAccount","App","updateStart","updateContractInstance","forceUpdate","date","Date","onDeployed","fetchContract","onNext","loadContract","TictactoeContractClass","PubKey","setAllPublicKey","message","joinGame","addDeployedListener","addNextListener","removeDeployedListener","removeNextListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","LocalStorageKey","accountToken","refreshToken","publicKeyBob","addressBob","userBob","publicKeyAlice","addressAlice","userAlice","DAPP_API_PATHS","dapp_list_unspent","dapp_list_unspent_by_address","dapp_sign_raw_transaction","dapp_get_signature","dapp_get_balance","dapp_send_raw_transaction","dapp_get_raw_change_address","dapp_get_public_key","get_access_token","getPlayerByState","Request","create","interceptors","request","use","config","access_token","headers","Promise","reject","responseIntercepter","code","clear","resolve","Mainnet","API_PREFIX","API_DOTWALLET","CLIENT_ID","loginUrl","sender","post","redirect_uri","origin","query","Regtest","encodeURIComponent","permissions","confirm","unconfirm","rawtx","signed_rawtx","hex_signature","options","filter","tx_hash","output_index","public_key"],"mappings":"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","file":"static/js/main.341cda64.chunk.js","sourcesContent":["\nimport { toHex, bsv } from 'scryptlib';\n\nexport interface UTXO {\n  txHash: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n  addr?: string;\n  pubkey?: string\n}\n\nexport interface Output {\n  satoshis: number,\n  script: string;\n}\n\n\nexport interface Input {\n  utxo: UTXO,\n  sequence: number,\n  script: string;\n}\n\nexport interface Tx {\n  nLockTime?: number,\n  inputs: Input[],\n  outputs: Output[],\n}\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Regtest = 'regtest',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, inputIndex: number, sigHashType: SignType, addr: string\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, inputIndex: number, sigHashType: SignType, addr: string\n  ): Promise<string>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { UTXO, wallet, Tx,  SignType } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nimport {toRawTx } from './wutils';\nimport { DotWallet } from './dotwallet';\nimport { DotWalletAddress, DotWalletPublicKey } from '../utils';\nconst WEB3_VERSION = '0.0.1';\n\nconst FEE = 2000;\n\nexport class web3 {\n\n\n  static wallet: wallet;\n\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n\n      return {\n        contractClass: buildContractClass(res.data),\n        types: buildTypeClasses(res.data)\n      };\n    });\n  }\n\n\n\n  \n  static async buildDeployTx(contract: AbstractContract, amountInContract: number): Promise<Tx> {\n\n    let wallet = new DotWallet();\n\n    let changeAddress = '';\n    \n    let publicKey = '';\n\n    const minAmount = amountInContract + FEE;\n\n    return wallet.listUnspent(minAmount, {\n      purpose: 'alice'\n    }).then(async (utxos: UTXO[]) => {\n\n      if (utxos.length === 0) {\n        throw new Error('no utxos');\n      }\n\n      \n      const tx: Tx = {\n        inputs: [],\n        outputs: []\n      };\n\n      tx.outputs.push({\n        script: contract.lockingScript.toHex(),\n        satoshis: amountInContract \n      });\n\n\n      //add input which using utxo from alice\n      tx.inputs.push(\n        {\n          utxo: utxos[0],\n          script: '',\n          sequence: 0\n        }\n      );\n\n      const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n      if (changeAmount <= 0) {\n        throw new Error('fund is not enough');\n      }\n\n      //add alice change output\n      const script = bsv.Script.buildPublicKeyHashOut(changeAddress).toHex();\n      tx.outputs.push(\n        {\n          script: script,\n          satoshis: changeAmount\n        }\n      );\n\n\n      changeAddress = utxos[0].addr || '';\n      publicKey = utxos[0].pubkey || '';\n\n      DotWalletPublicKey.set(publicKey,'alice');\n      DotWalletAddress.set(changeAddress,'alice');\n\n      DotWalletPublicKey.set(publicKey,'bob');\n      DotWalletAddress.set(changeAddress,'bob');\n\n      return tx;\n    }).then((tx) => {\n      return wallet.getSignature(toRawTx(tx), 0, SignType.ALL,changeAddress).then(signature => {\n        const script = new bsv.Script()\n        .add(Buffer.from(signature,'hex'))\n        .add(new bsv.PublicKey(publicKey).toBuffer())\n        .toHex()\n        tx.inputs[0].script = script;\n        return tx;\n      })\n    })\n  }\n\n  static async setAllPublicKey(amountInContract: number): Promise<void> {\n\n    let wallet = new DotWallet();\n\n    let changeAddress = '';\n    let publicKey = '';\n\n    const minAmount = amountInContract + FEE;\n\n    return wallet.listUnspent(minAmount, {\n      purpose: 'alice'\n    }).then(async (utxos: UTXO[]) => {\n\n      if (utxos.length === 0) {\n        throw new Error('no utxos');\n      }\n\n      changeAddress = utxos[0].addr || '';\n      publicKey = utxos[0].pubkey || '';\n\n      DotWalletPublicKey.set(publicKey,'alice');\n      DotWalletAddress.set(changeAddress,'alice');\n\n      DotWalletPublicKey.set(publicKey,'bob');\n      DotWalletAddress.set(changeAddress,'bob');\n\n      const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n      if (changeAmount <= 0) {\n        throw new Error('fund is not enough');\n      }\n\n    })\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n  static async sendTx(tx: Tx): Promise<string> {\n    return web3.wallet.sendRawTransaction(toRawTx(tx));\n  }\n\n  static async deploy(contract: AbstractContract, amountInContract: number): Promise<[Tx, string]> {\n    return web3.buildDeployTx(contract, amountInContract).then(async tx => {\n      return web3.sendTx(tx).then(txid => {\n        return [tx, txid];\n      })\n    });\n  }\n}","\nimport { toHex, bsv, SigHashPreimage, getPreimage as getPreimage_ } from 'scryptlib';\nimport { SignType, Tx, UTXO } from './wallet';\n\n\nexport function signInput(privateKey: any, tx: any, inputIndex: number, sigHashType: number, utxo: UTXO): string {\n\n  tx.inputs[inputIndex].output = new bsv.Transaction.Output({\n    script: utxo.script,\n    satoshis: utxo.satoshis\n  });\n\n  const sig = new bsv.Transaction.Signature({\n    publicKey: privateKey.publicKey,\n    prevTxId: utxo.txHash,\n    outputIndex: utxo.outputIndex,\n    inputIndex,\n    signature: bsv.Transaction.Sighash.sign(tx, privateKey, sigHashType,\n      inputIndex,\n      tx.inputs[inputIndex].output.script,\n      tx.inputs[inputIndex].output.satoshisBN),\n    sigtype: sigHashType,\n  });\n\n  return bsv.Script.buildPublicKeyHashIn(\n    sig.publicKey,\n    sig.signature.toDER(),\n    sig.sigtype,\n  ).toHex();\n}\n\n\n\n\nexport function toBsvTx(tx: Tx) {\n  const tx_ = new bsv.Transaction();\n\n  tx.inputs.forEach(input => {\n    tx_.addInput(new bsv.Transaction.Input({\n      prevTxId: input.utxo.txHash,\n      outputIndex: input.utxo.outputIndex,\n      sequenceNumber: input.sequence,\n      script: input.script ? bsv.Script.fromHex(input.script) : new bsv.Script(),\n    }), bsv.Script.fromHex(input.utxo.script), input.utxo.satoshis);\n  });\n\n\n  tx.outputs.forEach(output => {\n    tx_.addOutput(new bsv.Transaction.Output({\n      script: bsv.Script.fromHex(output.script),\n      satoshis: output.satoshis,\n    }));\n  });\n\n  tx_.nLockTime = tx.nLockTime || 0;\n  return tx_;\n}\n\nexport function toRawTx(tx: Tx) {\n  return toBsvTx(tx).toString();\n}\n\n\n\nexport function getPreimage(tx: Tx, inputIndex = 0, sigHashType: SignType = SignType.ALL): SigHashPreimage {\n  const bsvTx = toBsvTx(tx);\n  return getPreimage_(bsvTx, bsv.Script.fromHex(tx.inputs[inputIndex].utxo.script).toASM(), tx.inputs[inputIndex].utxo.satoshis, inputIndex, sigHashType);\n}\n","import React from 'react';\n\nconst Square = props => {\n\n\n\n  let tx = props.value ? `https://whatsonchain.com/tx/${props.value.tx}` : \"\";\n  let icon = props.value ? <div className='squareicon'>{props.value.n}</div> : \"\";\n  return (\n    <div className=\"squarewapper\">\n      <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n        {props.value ? <a href={tx} target=\"_blank\" title=\"Click to see the transaction\">{props.value.label}</a> : props.value}\n      </button>\n      {icon}\n    </div>\n\n  )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n\n    const winnerClass =\n      this.props.winnerSquares &&\n        (this.props.winnerSquares[0] === i ||\n          this.props.winnerSquares[1] === i ||\n          this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","import { Account, NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport { toHex, bsv, signTx } from 'scryptlib';\nimport { signInput, toBsvTx } from './wutils';\nimport axios from 'axios';\n\n\nexport class LocalWallet extends wallet {\n  API_PREFIX: string;\n  privKey: any;\n  constructor(network: NetWork, key: string) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == NetWork.Testnet ? 'test' : 'main'}`;\n    this.privKey = key ? new bsv.PrivateKey.fromWIF(key) : new bsv.PrivateKey.fromRandom(network);\n  }\n\n\n  requestAccount(name: string, permissions: string[]): Promise<Account> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getbalance(): Promise<number> {\n\n    const {\n      data: balance\n    } = await axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/balance`, {\n      timeout: 5000\n    });\n\n    return balance.confirmed + balance.unconfirmed;\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n\n    let tx_ = new bsv.Transaction(rawtx);\n\n    const utxo = tx_.inputs[inputIndex].utxo;\n\n    return signInput(this.privKey, tx_, inputIndex, sigHashType, utxo);\n  }\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string): Promise<string> {\n\n    let tx_ = new bsv.Transaction(rawtx);\n\n    return signTx(tx_, this.privKey, tx_.inputs[inputIndex].output.script.toASM(), tx_.inputs[inputIndex].output.satoshisBN, inputIndex, sigHashType);\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    // 1 second per KB\n\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n    const {\n      data: txid\n    } = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n      txhex: rawTx\n    }, {\n      timeout: time\n    });\n    return txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    return axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(this.privKey.toAddress()).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(this.privKey.toAddress() + ''));\n  }\n\n\n  getPublicKey(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(toHex(this.privKey.publicKey)));\n  }\n\n}","\nimport { EventEmitter } from 'events';\nimport { DotWalletToken } from './utils';\n\nclass Server extends EventEmitter {\n    player = ''\n    privKey = ''\n    accessToken = ''\n    constructor() {\n        super();\n        var urlParams = new URLSearchParams(window.location.search);\n        this.player = urlParams.get('player') || \"alice\";\n        const self = this;\n        this.accessToken = DotWalletToken.get()\n\n        window.addEventListener('storage', (e) => {\n            // When local storage changes, dump the list to\n            // the console.\n            console.log('on storage change ' + this.player, e)\n\n\n            if (e.key === \"game\") {\n                try {\n                    let gameJson = window.localStorage.getItem('game');\n                    if (gameJson && gameJson !== null) {\n                        let game = JSON.parse(gameJson);\n\n                        if (game.event) {\n\n                            self.emit(game.event, game)\n                        }\n\n                    }\n                } catch (e) {\n                    console.error(' storage change error', e)\n                }\n            }\n\n        }, false);\n\n    }\n\n\n\n    deleteGame = () => {\n        console.log('deleteGame');\n        window.localStorage.removeItem('game');\n    }\n\n\n    createGame = (game) => {\n        game.event = 'createGame';\n        console.log('createGame', game);\n        return window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n    saveGame = (game, event) => {\n        game.event = event;\n        console.log('saveGame', game);\n        window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n\n\n    getGame = () => {\n        let gameJson = window.localStorage.getItem('game');\n        if (gameJson && gameJson !== null) {\n            return JSON.parse(gameJson);\n        }\n        return undefined\n    }\n    \n\n\n    getCurrentPlayer = () => (this.player);\n\n\n    savePrivateKey = (key) => {\n        this.privKey = key;\n        window.localStorage.setItem(this.player, key);\n    }\n\n\n    getPrivateKey = () => {\n        if (this.player) {\n            this.privKey = window.localStorage.getItem(this.player);\n        }\n\n        return this.privKey;\n    }\n\n    getBobPrivateKey = () => {\n\n        return window.localStorage.getItem('bob');\n    }\n\n    getAlicePrivateKey = () => {\n\n        return window.localStorage.getItem('alice');\n    }\n\n    getAccessToken = () => {\n        if (this.player) {\n            this.accessToken = DotWalletToken.get();\n        }\n\n        return this.accessToken;\n    }\n\n    addDeployedListener(cb) {\n        console.log('addDeployedListener');\n        this.on('deployed', cb);\n    }\n\n\n    removeDeployedListener(cb) {\n        console.log('removeDeployedListener');\n        this.off('deployed', cb)\n    }\n\n\n    addNextListener(cb) {\n        console.log('addNextListener');\n        this.on('next', cb);\n    }\n\n    removeNextListener(cb) {\n        console.log('removeNextListener');\n        this.off('next', cb)\n    }\n}\n\nconst server = new Server();\n\nexport default server;","import React from 'react';\nimport Board from './Board';\nimport { bsv, Bytes, Sig, toHex } from 'scryptlib';\nimport { web3, Input, SignType } from './web3';\n\nimport server from './Server';\nimport { getPreimage, toRawTx, toBsvTx } from './web3/wutils';\nimport { DotWalletAddress, DotWalletPublicKey, getPlayer } from './utils';\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  xIsNext: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.game && props.game.gameState) {\n      this.state = props.game.gameState;\n    } else {\n      this.state = initialState;\n    }\n  }\n\n\n\n  componentWillReceiveProps(nextProps) {\n    console.log('componentWillReceiveProps', nextProps)\n    if (nextProps.game && nextProps.game.gameState) {\n      this.setState(nextProps.game.gameState);\n    } else {\n      this.setState(initialState);\n    }\n  }\n\n\n  calculateNewState(squares) {\n    return (!this.state.xIsNext ? '00' : '01') + squares.map(square => {\n\n      if (square && square.label === 'X') {\n        return '01'\n      } else if (square && square.label === 'O') {\n        return '02'\n      } else {\n        return '00';\n      }\n    }).join('');\n  }\n\n  calculateOldState(squares) {\n    return (this.state.xIsNext ? '00' : '01') + squares.map(square => {\n\n      if (square && square.label === 'X') {\n        return '01'\n      } else if (square && square.label === 'O') {\n        return '02'\n      } else {\n        return '00';\n      }\n    }).join('');\n  }\n\n\n  checkIfValid(i, squares) {\n    if (!this.props.game || !this.props.game.lastUtxo) {\n      return false;\n    }\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return false;\n    }\n    squares[i] = { label: this.state.xIsNext ? 'X' : 'O' };\n    let player = server.getCurrentPlayer();\n\n    if (player === \"alice\" && this.state.xIsNext) {\n      return true;\n    } else if (player === \"bob\" && !this.state.xIsNext) {\n      return true;\n    } else {\n      alert(`now is ${this.state.xIsNext ? 'Alice' : 'Bob'} turn `)\n      console.error(`now is ${this.state.xIsNext ? 'Alice' : 'Bob'} turn , but got ${player}`)\n      return false;\n    }\n  }\n\n\n  async buildCallContractTx(i, newState, oldState, squares, history) {\n    let newLockingScript = \"\";\n    let winner = calculateWinner(squares).winner;\n    const FEE = 3000;\n    let outputs = [];\n    let amount = this.props.game.lastUtxo.satoshis - FEE;\n    if (winner) {\n      const player = getPlayer();\n      // winner is current player\n      \n      let address = await DotWalletAddress.get(player);\n\n      newLockingScript = bsv.Script.buildPublicKeyHashOut(address).toHex();\n\n      outputs.push({\n        satoshis: amount,\n        script: newLockingScript\n      })\n\n    } else if (history.length >= 9) {\n\n      const aliceAddress = new bsv.PublicKey(this.props.game.alicePubKey, {\n        network: bsv.Networks.testnet\n      });\n      const bobAddress = new bsv.PublicKey(this.props.game.bobPubKey, {\n        network: bsv.Networks.testnet\n      });\n\n      //no body win\n      const aliceLockingScript = bsv.Script.buildPublicKeyHashOut(aliceAddress.toAddress(bsv.Networks.testnet)).toHex();\n      const bobLockingScript = bsv.Script.buildPublicKeyHashOut(bobAddress.toAddress(bsv.Networks.testnet)).toHex();\n      amount = (this.props.game.lastUtxo.satoshis - FEE) / 2;\n\n      outputs.push({\n        satoshis: amount,\n        script: aliceLockingScript\n      })\n\n      outputs.push({\n        satoshis: amount,\n        script: bobLockingScript\n      })\n\n    } else {\n      //next\n      newLockingScript = [this.props.contractInstance.codePart.toHex(), bsv.Script.fromASM(newState).toHex()].join('');\n      outputs.push({\n        satoshis: amount,\n        script: newLockingScript\n      })\n    }\n\n\n    if (outputs[0].satoshis <= 0) {\n      alert(`fund in contract is too low `)\n      return undefined;\n    }\n\n\n    let tx = {\n      inputs: [{\n        utxo: this.props.game.lastUtxo,\n        sequence: 0,\n        script: \"\"\n      }],\n      outputs: outputs\n    }\n\n    let preimage = getPreimage(tx);\n\n    const addr = DotWalletAddress.get();\n\n    let sig = await web3.wallet.getSignature(toRawTx(tx), 0, SignType.ALL, addr);\n\n    this.props.contractInstance.setDataPart(oldState);\n    \n\n    let unlockScript = this.props.contractInstance.move(i, new Sig(toHex(sig)), amount, preimage).toHex();\n\n    tx.inputs[0].script = unlockScript;\n\n    // we can verify locally before we broadcast the tx, if fail, \n    // it will print the launch.json in the brower webview developer tool, just copy/paste,\n    // and try launch the sCrypt debugger\n\n    const result = this.props.contractInstance.move(i, new Sig(toHex(sig)), amount, preimage).verify({ inputSatoshis: this.props.game.lastUtxo.satoshis, tx: toBsvTx(tx) })\n\n    if (!result.success) {\n      throw new Error(result.error)\n    }\n\n    return tx;\n  }\n\n\n  async handleClick(i) {\n\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    const oldState = this.calculateOldState(squares);\n    if (!this.checkIfValid(i, squares)) {\n      console.error('handleClick checkIfValid false...')\n      return;\n    }\n\n\n    let newState = this.calculateNewState(squares);\n\n    // let tx = await this.buildCallContractTx(i, newState, squares, history);\n    let tx = await this.buildCallContractTx(i, newState, oldState, squares, history);\n\n    if (!tx) {\n      console.error('buildCallContractTx fail...')\n      return;\n    }\n\n    web3.sendTx(tx).then(txid => {\n\n      squares[i].tx = txid;\n      squares[i].n = history.length;\n      let gameState = {\n        history: history.concat([\n          {\n            squares,\n            currentLocation: getLocation(i),\n            stepNumber: history.length,\n          },\n        ]),\n        xIsNext: !this.state.xIsNext,\n        currentStepNumber: history.length,\n      };\n\n      server.saveGame(Object.assign({}, this.props.game, {\n        gameState: gameState,\n        lastUtxo: {\n          txHash: txid,\n          outputIndex: 0,\n          satoshis: tx.outputs[0].satoshis,\n          script: tx.outputs[0].script\n        }\n      }), 'next')\n\n      this.setState(gameState);\n\n    }).catch(e => {\n      if (e.response) {\n        alert('sendTx errror: ' + e.response.data)\n      }\n      console.error('sendTx errror', e.response)\n    })\n\n  }\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n\n\n    const game = server.getGame();\n\n\n\n\n    let status;\n    let end;\n\n    let icon;\n\n\n    if (server.getCurrentPlayer() === 'bob') {\n      icon = <div className=\"bob\">Bob<img src=\"/tic-tac-toe/bob.png\"></img></div>\n    } else {\n      icon = <div className=\"alice\">Alice<img src=\"/tic-tac-toe/alice.jpg\"></img></div>\n    }\n\n    let bet;\n    if (game && game.deploy) {\n      bet = <div className=\"bet\"><a href={`https://whatsonchain.com/tx/${game.deploy}`} target=\"_blank\">Bet transaction</a> </div>\n    }\n\n    let player = server.getCurrentPlayer();\n    if (winner) {\n      let winnerName = winner.label === 'X' ? 'Alice' : 'Bob';\n      status = `Winner is ${winnerName}`;\n      if (game && game.lastUtxo) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${game.lastUtxo.txHash}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n      if (game && game.lastUtxo) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${game.lastUtxo.txHash}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else {\n\n      let nexter = this.state.xIsNext ? 'Alice' : 'Bob';\n\n      status = `Next player: ${nexter}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div className=\"game-title\">\n            {icon}\n            <div className=\"game-status\"> {status} </div>\n          </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n\n          <div className=\"game-bottom\">\n            {bet}\n            {end}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { web3 } from './web3';\nimport server from './Server';\n\nfunction makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n\nfunction TitleBar(props) {\n    const forceUpdate = React.useReducer(bool => !bool)[1];\n\n    const amountRef = useRef(null);\n\n    const onStart = (e) => {\n\n        if (!web3.wallet) {\n            alert(\"Pelease create wallet first\")\n            return;\n        }\n        let amount = parseInt(amountRef.current.value);\n\n        if (amount < 20000) {\n            alert(\"The bet fund is too small to play, at least 20000\")\n            return;\n        }\n\n        if (!isNaN(amount)) {\n            props.startBet(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        props.cancelBet();\n    }\n\n\n\n    if (props.started) {\n\n        return (\n            <div>\n                The game is in progress ...\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n    }\n    else if (props.game && props.game.creator === server.getCurrentPlayer()) {\n\n        const player = server.getCurrentPlayer() === 'alice' ? 'bob' : 'alice';\n\n        var url = window.location.href.split('?')[0];\n\n        return (\n            <div>\n                Waiting someone join the game ...\n                <a className=\"pure-button\" href={url + '?player=' + player} target=\"_blank\"> Join</a>\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n\n    } else if (props.game && props.game.creator !== server.getCurrentPlayer()) {\n\n        return (\n            <div>\n                Joining the game...\n            </div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <label>Bet amount:\n                    <input ref={amountRef} type=\"number\" name=\"amount\" placeholder=\"in satoshis\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>Start Bet</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","\nimport React, { useState, useEffect } from 'react';\nimport { web3, DotWallet} from './web3';\nimport server from './Server';\nimport {getCode, getPlayer} from './utils';\n\nconst Wallet = props => {\n    const [balance, setBalance] = useState(0)\n    const [authed, setAuth] = useState(false)\n\n    useEffect(()=>{\n        const dw = new DotWallet()\n        dw.code2token(getCode())\n    },[])\n\n    useEffect(() => {\n\n        if (!web3.wallet) {\n            if (server.getAccessToken()) {\n                web3.setWallet(new DotWallet());\n                setAuth(true)\n            }\n        }  \n\n        if(web3.wallet) {\n            web3.wallet.getbalance().then(balance => {\n                setBalance(balance)\n            })\n        }\n\n    },[]);\n\n\n    const handleAuth = (e)=>{\n        new DotWallet().requestAccount(getPlayer())\n    }\n\n\n    if (authed) {\n        return <div className=\"wallet\">\n            <div className=\"walletInfo\">\n                <div className=\"balance\">\n                    <label >Balance: {balance}</label>\n                </div>\n            </div>\n        </div>\n    } else {\n        return <div className=\"wallet\">\n            <button className=\"pure-button button-large\" onClick={handleAuth}>Login dotwallet</button>\n        </div>\n    }\n}\n\nexport default Wallet;\n\n\n","import \"./App.css\";\nimport Game from \"./Game\";\nimport React, { useState, useEffect } from \"react\";\nimport TitleBar from \"./TitleBar\";\nimport { PubKey, toHex } from \"scryptlib\";\n\nimport { web3 } from \"./web3\";\nimport Wallet from \"./wallet\";\nimport server from \"./Server\";\nimport { DotWalletPublicKey } from \"./utils\";\n\nfunction App() {\n  const [started, updateStart] = useState(false);\n\n  const [contractInstance, updateContractInstance] = useState(null);\n\n  const forceUpdate = React.useReducer((bool) => !bool)[1];\n\n  const startBet = async (amount) => {\n    //let tx = await web3.deploy(contractInstance, 10000);\n    console.log(\"startBet with amount\", amount);\n\n    if (web3.wallet) {\n      let balance = await web3.wallet.getbalance();\n\n      if (amount > balance) {\n        alert(\"Please fund your wallet address first\");\n        return;\n      }\n\n      let player = server.getCurrentPlayer();\n\n      let game = {\n        amount: amount,\n        tx: {\n          inputs: [],\n          outputs: [],\n        },\n        name: \"tic-tac-toe\",\n        alicePubKey: \"\",\n        bobPubKey: \"\",\n        creator: player,\n        player: \"\",\n        date: new Date(),\n      };\n\n      if (player === \"alice\") {\n        Object.assign(game, {\n          alicePubKey: DotWalletPublicKey.get(\"alice\"),\n        });\n      } else {\n        Object.assign(game, {\n          bobPubKey: DotWalletPublicKey.get(\"bob\"),\n        });\n      }\n\n      server.createGame(game);\n\n      forceUpdate();\n    }\n  };\n\n  const cancelBet = () => {\n    server.deleteGame();\n    updateStart(false);\n    forceUpdate();\n  };\n\n  const onDeployed = async (game) => {\n    console.log(\"onDeployed...\");\n\n    if (game && game.alicePubKey && game.bobPubKey) {\n      fetchContract(game.alicePubKey, game.bobPubKey);\n    }\n\n    updateStart(true);\n  };\n\n  const onNext = async (game) => {\n    //BOB SIGN\n    console.log(\"onNext\", game);\n    forceUpdate();\n  };\n\n  async function fetchContract(alicePubKey, bobPubKey) {\n    if (contractInstance === null && alicePubKey && bobPubKey) {\n      let { contractClass: TictactoeContractClass } = await web3.loadContract(\n        \"/tic-tac-toe/tictactoe_release_desc.json\"\n      );\n\n      let c = new TictactoeContractClass(\n        new PubKey(toHex(alicePubKey)),\n        new PubKey(toHex(bobPubKey)),\n      );\n\n      c.setDataPart(\"00000000000000000000\");\n      updateContractInstance(c);\n      console.log(\"fetchContract successfully\");\n      return c;\n    }\n    return contractInstance;\n  }\n\n  async function joinGame(game) {\n    console.log(\"joinGame...\", game);\n\n    let balance = await web3.wallet.getbalance();\n\n    if (balance <= game.amount) {\n      alert(\n        \"no available utxos or  balance is not enough, please fund your wallet\"\n      );\n      return;\n    }\n\n    await web3.setAllPublicKey(20000);\n\n    let player = server.getCurrentPlayer();\n\n    // if (player === \"alice\") {\n    Object.assign(game, {\n      alicePubKey: DotWalletPublicKey.get(\"alice\"),\n      player: \"alice\",\n    });\n    // } else {\n    Object.assign(game, {\n      bobPubKey: DotWalletPublicKey.get(\"bob\"),\n      player: \"bob\",\n    });\n    // }\n\n    let contract = await fetchContract(game.alicePubKey, game.bobPubKey);\n\n    if (contract != null) {\n      web3\n        .deploy(contract, game.amount)\n        .then(([tx, txid]) => {\n\n          game.lastUtxo = {\n            txHash: txid,\n            outputIndex: 0,\n            satoshis: tx.outputs[0].satoshis,\n            script: tx.outputs[0].script,\n          };\n\n          game.tx = tx;\n          game.deploy = txid;\n          server.saveGame(game, \"deployed\");\n          updateStart(true);\n        })\n        .catch((e) => {\n          if (e.message === \"no utxos\") {\n            alert(\"no available utxos, please fund your wallet\");\n          }\n          console.error(\"deploy error\", e);\n        });\n    }\n  }\n\n  useEffect(() => {\n    if (!web3.wallet) {\n\n    } else {\n      let game = server.getGame();\n\n      if (game && game.lastUtxo) {\n        updateStart(true);\n      }\n\n      if (game && game.alicePubKey && game.bobPubKey) {\n        fetchContract(game.alicePubKey, game.bobPubKey);\n      }\n\n      // let alicePrivateKey = server.getAlicePrivateKey();\n      // let bobPrivateKey = server.getBobPrivateKey();\n      // if (game && !game.deploy && alicePrivateKey && bobPrivateKey) {\n      //   joinGame(game, alicePrivateKey, bobPrivateKey)\n      // }\n      if (game && !game.deploy) {\n        joinGame(game);\n      }\n    }\n\n    server.addDeployedListener(onDeployed);\n    server.addNextListener(onNext);\n    return () => {\n      server.removeDeployedListener(onDeployed);\n      server.removeNextListener(onNext);\n    };\n  }, [contractInstance]);\n\n  const game = server.getGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Play Tic-Tac-Toe on Bitcoin</h2>\n        <TitleBar\n          startBet={startBet}\n          cancelBet={cancelBet}\n          started={started}\n          game={game}\n        />\n\n        <Game game={game} contractInstance={contractInstance} />\n\n        <Wallet></Wallet>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const LocalStorageKey = {\n\n  accountToken : \"access_token\",\n  refreshToken : \"refresh_token\",\n\n\n  // bob\n  publicKeyBob : \"public_key_bob\",\n  addressBob : \"address_bob\",\n  userBob : \"user_bob\",\n  // alice\n  publicKeyAlice : \"public_key_alice\",\n  addressAlice : \"address_alice\",\n  userAlice : \"user_alice\",\n}\n\n// 测试环境开放平台\n// const host = \"http://192.168.1.13:6001\";\n\nexport const DAPP_API_PATHS = {\n  dapp_list_unspent: `/v1/grandet_dapp/dapp_list_unspent`,\n  dapp_list_unspent_by_address: `/v1/grandet_dapp/dapp_list_unspent_by_address`,\n  dapp_sign_raw_transaction: `/v1/grandet_dapp/dapp_sign_raw_transaction`,\n  dapp_get_signature: `/v1/grandet_dapp/dapp_get_signature`,\n  dapp_get_balance: `/v1/grandet_dapp/dapp_get_balance`,\n  dapp_send_raw_transaction: `/v1/grandet_dapp/dapp_send_raw_transaction`,\n  dapp_get_raw_change_address: `/v1/grandet_dapp/dapp_get_raw_change_address`,\n  dapp_get_public_key: `/v1/grandet_dapp/dapp_get_public_key`,\n  get_access_token:`/v1/oauth2/get_access_token`\n};\n\nexport const CLIENT_ID = \"ce7ac9b5c4d54c7f9e71ed3e9a732c12\";\n\n// 通过URL判断是哪个玩家\nexport const getPlayer = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"player\") || \"alice\";\n};\n\n// 通过URL判断是哪个玩家\nexport const getPlayerByState = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"state\") || \"alice\";\n};\n\nexport const getCode = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"code\");\n};\n\nexport const DotWalletToken = {\n  get: () => {\n    return localStorage.getItem(LocalStorageKey.accountToken);\n  },\n  set: (accessToken) => {\n    localStorage.setItem(LocalStorageKey.accountToken, accessToken);\n  },\n};\n\nexport const DotWalletPublicKey = {\n  get: (player) => {\n    if(player){\n      return localStorage[`public_key_${player}`];\n    }\n    const _player = getPlayer();\n    const key =\n    _player === \"alice\"\n        ? LocalStorageKey.publicKeyAlice\n        : LocalStorageKey.publicKeyBob;\n    return localStorage.getItem(key);\n  },\n  set: (publicKey,player) => {\n    if(player){\n      localStorage[`public_key_${player}`] = publicKey;\n      return ;\n    }\n    const key =\n      player === \"alice\"\n        ? LocalStorageKey.publicKeyAlice\n        : LocalStorageKey.publicKeyBob;\n    localStorage.setItem(key, publicKey);\n  },\n};\n\nexport const DotWalletAddress = {\n  get: (player) => {\n    if(player){\n      return localStorage[`address_${player}`];\n    }\n    const _player = getPlayer();\n    const key =\n      _player === \"alice\"\n        ? LocalStorageKey.addressAlice\n        : LocalStorageKey.addressBob;\n    return localStorage.getItem(key);\n  },\n  set: (address,player) => {\n    if(player){\n      localStorage[`address_${player}`] = address;\n      return ;\n    }\n    const key =\n      player === \"alice\"\n        ? LocalStorageKey.addressAlice\n        : LocalStorageKey.addressBob;\n    localStorage.setItem(key, address);\n  },\n};\n\n\n// export const DotWalletUser = {\n//   get: () => {\n//     const player = getPlayer();\n//     const key =\n//       player === \"alice\" ? LocalStorageKey.userAlice : LocalStorageKey.userBob;\n\n//     const userStr = localStorage.getItem(key);\n\n//     try {\n//       return userStr ? (JSON.parse(userStr) as IUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   },\n//   set: (user: IUser) => {\n//     const player = getPlayer();\n//     const key =\n//       player === \"alice\" ? LocalStorageKey.userAlice : LocalStorageKey.userBob;\n\n//     localStorage.setItem(key, JSON.stringify(user));\n//   },\n// };\n","import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { DotWalletToken } from \"./utils\";\n\nconst Request = axios.create({\n  timeout: 20000,\n});\n\nexport const requestInterceptor = (config: AxiosRequestConfig) => {\n  const access_token = DotWalletToken.get();\n\n  if (access_token) {\n    config.headers[\"Authorization\"] = \"Bearer \" + access_token;\n  }\n\n\n\n  return config;\n};\n\nRequest.interceptors.request.use(requestInterceptor, (error) =>\n  Promise.reject(error)\n);\n\nexport const responseIntercepter = async (res: AxiosResponse) => {\n  if (res && +res.status === 200) {\n    if(+res.data.code === 75000){\n      localStorage.clear()\n      alert(\"Re-login\")\n      window.location.href = '';\n    }\n    if (+res.data.code === 0) {\n      return Promise.resolve(res);\n    } else {\n      return Promise.reject(res);\n    }\n  }\n\n  if (res && res.status >= 400) {\n    return Promise.reject(res);\n  }\n\n  return Promise.resolve(res);\n};\n\nRequest.interceptors.response.use(responseIntercepter, (error) =>\n  Promise.reject(error)\n);\n\nexport default Request;\n","import { NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport axios from 'axios';\nimport { DAPP_API_PATHS, getPlayer, getPlayerByState, LocalStorageKey } from '../utils';\nimport Request from '../Request';\n\n\nexport class DotWallet extends wallet {\n  API_PREFIX: string;\n  API_DOTWALLET: string;\n  CLIENT_ID = 'aa7f349975c72e5ba3178e636728f6b2';\n  loginUrl: string;\n  sender: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Regtest ? 'test' : 'main'}`;\n    // this.API_DOTWALLET = network == NetWork.Regtest ?  `http://192.168.1.13:6001` : `https://api.ddpurse.com`;\n    this.API_DOTWALLET = network === NetWork.Regtest ? `http://192.168.1.13:6001` : `https://api.ddpurse.com`;\n    const loginUrl = `${this.API_DOTWALLET}/authorize?client_id=${this.CLIENT_ID}&redirect_uri=${encodeURIComponent(`${window.location.origin}/tic-tac-toe`)}&response_type=code&scope=${encodeURIComponent(\"user.info\")}`;\n    this.loginUrl = loginUrl;\n    this.sender = network === NetWork.Regtest ? {\n      \"appid\": \"test_bsv_coin_regular\",\n      \"user_index\": 0\n    } : {\n      \"appid\": \"bsv_coin_regular\",\n      \"user_index\": 0\n    }\n\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n    window.location.href = `${this.loginUrl}&state=${name}`;\n    return Promise.resolve(true);\n  }\n\n\n  code2token = async (code: string) => {\n    if (!code) return;\n    try {\n      const { data } = await axios.post(`https://common.mempool.com/api/dotwallet/get_access_token`, {\n        code,\n        redirect_uri: `${window.location.origin}/tic-tac-toe`\n      });\n      const { access_token } = data.data;\n      if (access_token) {\n        localStorage[LocalStorageKey.accountToken] = access_token;\n        const query = getPlayerByState() == 'alice' ? \"?player=alice\" : \"?player=bob\";\n        window.location.href = `${window.location.origin}/tic-tac-toe${query}`\n      }\n    } catch (error) {\n      window.location.href = `${window.location.origin}/tic-tac-toe`\n    }\n  };\n\n  async getbalance(): Promise<number> {\n    try {\n      const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_balance}`, {\n        \"sender\": this.sender,\n      });\n      return data.data.confirm + data.data.unconfirm;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_sign_raw_transaction}`, {\n      \"sender\": this.sender,\n      \"input_index\": inputIndex,\n      \"sig_type\": sigHashType,\n      rawtx,\n      addr,\n    }, {\n      headers: {\n       \n      }\n    }\n    );\n    return data.data.signed_rawtx\n  }\n\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_signature}`, {\n      \"sender\": this.sender,\n      \"input_index\": inputIndex,\n      \"sig_type\": sigHashType,\n      rawtx,\n      addr,\n    }, {\n      headers: {\n        \"player\": 'alice'\n      }\n    });\n\n    return data.data.hex_signature\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_send_raw_transaction}`, {\n      \"sender\": this.sender,\n      rawTx,\n    });\n\n    return data.data.txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_list_unspent}`, {\n      \"sender\": this.sender,\n      \"min_amount\": minAmount\n    }, {\n      headers: {\n        \"player\": options?.purpose\n      }\n    });\n\n    return data.data.utxos.filter((utxo: any) => utxo.satoshis >= minAmount).map((utxo: any) => {\n      const _utxo = {\n        txHash: utxo.tx_hash,\n        outputIndex: utxo.output_index,\n        satoshis: utxo.satoshis,\n        script: utxo.script,\n        addr: utxo.addr,\n        pubkey: utxo.pubkey,\n      } as UTXO;\n      return _utxo;\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_raw_change_address}`, {\n      \"sender\": this.sender,\n    }, {\n      headers: {\n        \"player\": options?.purpose\n      }\n    });\n\n    return data.data.address;\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_public_key}`, {\n      \"sender\": this.sender,\n    }, {\n      headers: {\n        \"player\": options?.purpose\n      }\n    });\n\n    return data.data.public_key;\n  }\n}"],"sourceRoot":""}