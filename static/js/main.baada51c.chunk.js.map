{"version":3,"sources":["web3/wallet.ts","web3/web3.ts","web3/wutils.ts","Square.js","Board.js","utils.js","web3/localwallet.ts","Request.ts","web3/dotwallet.ts","Server.js","Game.js","TitleBar.js","web3/sensilet.ts","wallet.js","App.js","reportWebVitals.js","index.js"],"names":["NetWork","SignType","wallet","network","this","web3","url","axios","get","timeout","then","res","contractClass","buildContractClass","data","types","buildTypeClasses","contract","amountInContract","getRawChangeAddress","changeAddress","getPublicKey","publicKey","minAmount","listUnspent","purpose","utxos","a","length","Error","tx","inputs","outputs","push","script","lockingScript","toHex","satoshis","utxo","sequence","changeAmount","bsv","Script","buildPublicKeyHashOut","getSignature","toRawTx","ALL","signature","console","log","add","Buffer","from","PublicKey","toBuffer","rawTx","sendRawTransaction","buildDeployTx","sendTx","txid","signInput","privateKey","inputIndex","sigHashType","output","Transaction","Output","sig","Signature","prevTxId","txHash","outputIndex","Sighash","sign","satoshisBN","sigtype","buildPublicKeyHashIn","toDER","toBsvTx","tx_","forEach","input","addInput","Input","sequenceNumber","fromHex","addOutput","nLockTime","toString","getPreimage","bsvTx","getPreimage_","Square","props","value","icon","className","n","winnerClass","onClick","href","target","title","label","Board","row","col","board","cellCounter","i","columns","j","renderSquare","winnerSquares","squares","createBoard","React","Component","LocalStorageKey","DAPP_API_PATHS","getPlayer","URLSearchParams","window","location","search","getPlayerByState","DotWalletToken","localStorage","getItem","PlayerPublicKey","player","key","setItem","PlayerAddress","address","Request","create","interceptors","request","use","config","access_token","headers","error","Promise","reject","responseIntercepter","status","code","clear","alert","resolve","response","DotWallet","Mainnet","API_PREFIX","API_DOTWALLET","CLIENT_ID","loginUrl","sender","code2token","post","redirect_uri","origin","query","Regtest","encodeURIComponent","name","permissions","confirm","unconfirm","rawtx","addr","signed_rawtx","inputAmount","inputScript","hex_signature","options","filter","map","tx_hash","output_index","pubkey","public_key","server","privKey","accessToken","deleteGame","removeItem","createGame","game","event","JSON","stringify","saveGame","getGame","gameJson","parse","getCurrentPlayer","savePrivateKey","getPrivateKey","getBobPrivateKey","getAlicePrivateKey","getAccessToken","urlParams","self","addEventListener","e","emit","cb","on","off","EventEmitter","calculateWinner","lines","b","c","winner","winnerRow","initialState","history","Array","fill","currentStepNumber","is_alice_turn","Game","gameState","state","nextProps","setState","contractInstance","getNewStateScript","Bytes","square","join","lastUtxo","FEE","amount","aliceAddress","alicePubKey","Networks","testnet","bobAddress","bobPubKey","aliceLockingScript","toAddress","bobLockingScript","newLockingScript","undefined","preimage","unlockScript","move","Sig","result","verify","inputSatoshis","success","slice","current","calculateOldState","updateState","buildCallContractTx","concat","currentLocation","0","1","2","3","4","5","6","7","8","stepNumber","Object","assign","catch","end","bet","src","deploy","winnerName","nexter","handleClick","TitleBar","useReducer","bool","amountRef","useRef","onCancel","cancelBet","started","creator","split","ref","type","placeholder","parseInt","isNaN","startBet","Sensilet","sensilet","Testnet","warn","requestAccount","open","isConnect","isConnected","getBsvBalance","DEBUG_TAG","balance","total","signTx","list","txHex","sigList","scriptHex","size","Math","max","time","txhex","getAddress","tx_pos","exitAccount","Wallet","useState","setBalance","authed","setAuth","useEffect","dotWalletCode","id","setTimeout","dotwallet","setWallet","startGame","getbalance","clearTimeout","handleSensilet","reload","handleExit","App","updateStart","updateContractInstance","forceUpdate","date","Date","onDeployed","fetchContract","onNext","loadContract","TictactoeContractClass","PubKey","setPlayersPublicKey","publicKeyStr","joinGame","message","addDeployedListener","addNextListener","removeDeployedListener","removeNextListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baada51c.chunk.js","sourcesContent":["\nimport { toHex, bsv } from 'scryptlib';\n\nexport interface UTXO {\n  txHash: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n  addr?: string;\n  pubkey?: string\n}\n\nexport interface Output {\n  satoshis: number,\n  script: string;\n}\n\n\nexport interface Input {\n  utxo: UTXO,\n  sequence: number,\n  script: string;\n}\n\nexport interface Tx {\n  nLockTime?: number,\n  inputs: Input[],\n  outputs: Output[],\n}\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Regtest = 'regtest',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, inputIndex: number, sigHashType: SignType, addr: string\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, inputIndex: number, inputAmount: number, inputScript: string, sigHashType: SignType, addr: string\n  ): Promise<string>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { UTXO, wallet, Tx,  SignType } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nimport {toRawTx } from './wutils';\nconst WEB3_VERSION = '0.0.1';\n\nconst FEE = 2000;\n\nexport class web3 {\n\n\n  static wallet: wallet;\n\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n\n      return {\n        contractClass: buildContractClass(res.data),\n        types: buildTypeClasses(res.data)\n      };\n    });\n  }\n\n\n\n  \n  static async buildDeployTx(contract: AbstractContract, amountInContract: number): Promise<Tx> {\n\n    let wallet = web3.wallet\n\n    let changeAddress = await web3.wallet.getRawChangeAddress();\n    \n    let publicKey = await web3.wallet.getPublicKey();\n\n    const minAmount = amountInContract + FEE;\n\n    return wallet.listUnspent(minAmount, {\n      purpose: 'alice'\n    }).then(async (utxos: UTXO[]) => {\n      if (utxos.length === 0) {\n        throw new Error('no utxos');\n      }\n\n      const tx: Tx = {\n        inputs: [],\n        outputs: []\n      };\n\n      tx.outputs.push({\n        script: contract.lockingScript.toHex(),\n        satoshis: amountInContract \n      });\n\n\n      //add input which using utxo from alice\n      tx.inputs.push(\n        {\n          utxo: utxos[0],\n          script: '',\n          sequence: 0\n        }\n      );\n\n      const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n      if (changeAmount <= 0) {\n        throw new Error('fund is not enough');\n      }\n\n      //add alice change output\n      const script = bsv.Script.buildPublicKeyHashOut(changeAddress).toHex();\n      tx.outputs.push(\n        {\n          script: script,\n          satoshis: changeAmount\n        }\n      );\n\n      return tx;\n    }).then((tx) => {\n      const utxo = tx.inputs[0].utxo;\n      return wallet.getSignature(toRawTx(tx), 0, utxo.satoshis, utxo.script, SignType.ALL,changeAddress).then(signature => {\n        console.log('getSignature', signature, publicKey)\n        const script = new bsv.Script()\n        .add(Buffer.from(signature,'hex'))\n        .add(new bsv.PublicKey(publicKey).toBuffer())\n        .toHex()\n        tx.inputs[0].script = script;\n        return tx;\n      })\n    })\n  }\n\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n  static async sendTx(tx: Tx): Promise<string> {\n    return web3.wallet.sendRawTransaction(toRawTx(tx));\n  }\n\n  static async deploy(contract: AbstractContract, amountInContract: number): Promise<[Tx, string]> {\n    return web3.buildDeployTx(contract, amountInContract).then(async tx => {\n      return web3.sendTx(tx).then(txid => {\n        return [tx, txid];\n      })\n    });\n  }\n}","\nimport { toHex, bsv, SigHashPreimage, getPreimage as getPreimage_ } from 'scryptlib';\nimport { SignType, Tx, UTXO } from './wallet';\n\n\nexport function signInput(privateKey: any, tx: any, inputIndex: number, sigHashType: number, utxo: UTXO): string {\n\n  tx.inputs[inputIndex].output = new bsv.Transaction.Output({\n    script: utxo.script,\n    satoshis: utxo.satoshis\n  });\n\n  const sig = new bsv.Transaction.Signature({\n    publicKey: privateKey.publicKey,\n    prevTxId: utxo.txHash,\n    outputIndex: utxo.outputIndex,\n    inputIndex,\n    signature: bsv.Transaction.Sighash.sign(tx, privateKey, sigHashType,\n      inputIndex,\n      tx.inputs[inputIndex].output.script,\n      tx.inputs[inputIndex].output.satoshisBN),\n    sigtype: sigHashType,\n  });\n\n  return bsv.Script.buildPublicKeyHashIn(\n    sig.publicKey,\n    sig.signature.toDER(),\n    sig.sigtype,\n  ).toHex();\n}\n\n\n\n\nexport function toBsvTx(tx: Tx) {\n  const tx_ = new bsv.Transaction();\n\n  tx.inputs.forEach(input => {\n    tx_.addInput(new bsv.Transaction.Input({\n      prevTxId: input.utxo.txHash,\n      outputIndex: input.utxo.outputIndex,\n      sequenceNumber: input.sequence,\n      script: input.script ? bsv.Script.fromHex(input.script) : new bsv.Script(),\n    }), bsv.Script.fromHex(input.utxo.script), input.utxo.satoshis);\n  });\n\n\n  tx.outputs.forEach(output => {\n    tx_.addOutput(new bsv.Transaction.Output({\n      script: bsv.Script.fromHex(output.script),\n      satoshis: output.satoshis,\n    }));\n  });\n\n  tx_.nLockTime = tx.nLockTime || 0;\n  return tx_;\n}\n\nexport function toRawTx(tx: Tx) {\n  return toBsvTx(tx).toString();\n}\n\n\n\nexport function getPreimage(tx: Tx, inputIndex = 0, sigHashType: SignType = SignType.ALL): SigHashPreimage {\n  const bsvTx = toBsvTx(tx);\n  return getPreimage_(bsvTx, bsv.Script.fromHex(tx.inputs[inputIndex].utxo.script), tx.inputs[inputIndex].utxo.satoshis, inputIndex, sigHashType);\n}\n","import React from 'react';\n\nconst Square = props => {\n\n\n\n  let tx = props.value ? `https://whatsonchain.com/tx/${props.value.tx}` : \"\";\n  let icon = props.value ? <div className='squareicon'>{props.value.n}</div> : \"\";\n  return (\n    <div className=\"squarewapper\">\n      <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n        {props.value ? <a href={tx} target=\"_blank\" title=\"Click to see the transaction\">{props.value.label}</a> : props.value}\n      </button>\n      {icon}\n    </div>\n\n  )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n\n    const winnerClass =\n      this.props.winnerSquares &&\n        (this.props.winnerSquares[0] === i ||\n          this.props.winnerSquares[1] === i ||\n          this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","export const LocalStorageKey = {\n\n  accountToken : \"access_token\",\n  refreshToken : \"refresh_token\",\n\n\n  // bob\n  publicKeyBob : \"public_key_bob\",\n  addressBob : \"address_bob\",\n  userBob : \"user_bob\",\n  // alice\n  publicKeyAlice : \"public_key_alice\",\n  addressAlice : \"address_alice\",\n  userAlice : \"user_alice\",\n}\n\n// 测试环境开放平台\n// const host = \"http://192.168.1.13:6001\";\n\nexport const DAPP_API_PATHS = {\n  dapp_list_unspent: `/v1/grandet_dapp/dapp_list_unspent`,\n  dapp_list_unspent_by_address: `/v1/grandet_dapp/dapp_list_unspent_by_address`,\n  dapp_sign_raw_transaction: `/v1/grandet_dapp/dapp_sign_raw_transaction`,\n  dapp_get_signature: `/v1/grandet_dapp/dapp_get_signature`,\n  dapp_get_balance: `/v1/grandet_dapp/dapp_get_balance`,\n  dapp_send_raw_transaction: `/v1/grandet_dapp/dapp_send_raw_transaction`,\n  dapp_get_raw_change_address: `/v1/grandet_dapp/dapp_get_raw_change_address`,\n  dapp_get_public_key: `/v1/grandet_dapp/dapp_get_public_key`,\n  get_access_token:`/v1/oauth2/get_access_token`\n};\n\nexport const CLIENT_ID = \"ce7ac9b5c4d54c7f9e71ed3e9a732c12\";\n\n// 通过URL判断是哪个玩家\nexport const getPlayer = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"player\") || \"alice\";\n};\n\n// 通过URL判断是哪个玩家\nexport const getPlayerByState = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"state\") || \"alice\";\n};\n\nexport const getCode = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"code\");\n};\n\nexport const DotWalletToken = {\n  get: () => {\n    return localStorage.getItem(LocalStorageKey.accountToken);\n  },\n  set: (accessToken) => {\n    localStorage.setItem(LocalStorageKey.accountToken, accessToken);\n  },\n};\n\nexport const PlayerPublicKey = {\n  get: (player) => {\n    if(player){\n      return localStorage[`public_key_${player}`];\n    }\n    const _player = getPlayer();\n    const key =\n    _player === \"alice\"\n        ? LocalStorageKey.publicKeyAlice\n        : LocalStorageKey.publicKeyBob;\n    return localStorage.getItem(key);\n  },\n  set: (publicKey,player) => {\n    if(player){\n      localStorage[`public_key_${player}`] = publicKey;\n      return ;\n    }\n    const key =\n      player === \"alice\"\n        ? LocalStorageKey.publicKeyAlice\n        : LocalStorageKey.publicKeyBob;\n    localStorage.setItem(key, publicKey);\n  },\n};\n\nexport const PlayerAddress = {\n  get: (player) => {\n    if(player){\n      return localStorage[`address_${player}`];\n    }\n    const _player = getPlayer();\n    const key =\n      _player === \"alice\"\n        ? LocalStorageKey.addressAlice\n        : LocalStorageKey.addressBob;\n    return localStorage.getItem(key);\n  },\n  set: (address,player) => {\n    if(player){\n      localStorage[`address_${player}`] = address;\n      return ;\n    }\n    const key =\n      player === \"alice\"\n        ? LocalStorageKey.addressAlice\n        : LocalStorageKey.addressBob;\n    localStorage.setItem(key, address);\n  },\n};\n\n\n// export const DotWalletUser = {\n//   get: () => {\n//     const player = getPlayer();\n//     const key =\n//       player === \"alice\" ? LocalStorageKey.userAlice : LocalStorageKey.userBob;\n\n//     const userStr = localStorage.getItem(key);\n\n//     try {\n//       return userStr ? (JSON.parse(userStr) as IUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   },\n//   set: (user: IUser) => {\n//     const player = getPlayer();\n//     const key =\n//       player === \"alice\" ? LocalStorageKey.userAlice : LocalStorageKey.userBob;\n\n//     localStorage.setItem(key, JSON.stringify(user));\n//   },\n// };\n","import { Account, NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport { toHex, bsv, signTx } from 'scryptlib';\nimport { signInput, toBsvTx } from './wutils';\nimport axios from 'axios';\n\n\nexport class LocalWallet extends wallet {\n  API_PREFIX: string;\n  privKey: any;\n  constructor(network: NetWork, key: string) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == NetWork.Testnet ? 'test' : 'main'}`;\n    this.privKey = key ? new bsv.PrivateKey.fromWIF(key) : new bsv.PrivateKey.fromRandom(network);\n  }\n\n\n  requestAccount(name: string, permissions: string[]): Promise<Account> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getbalance(): Promise<number> {\n\n    const {\n      data: balance\n    } = await axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/balance`, {\n      timeout: 5000\n    });\n\n    return balance.confirmed + balance.unconfirmed;\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n\n    let tx_ = new bsv.Transaction(rawtx);\n\n    const utxo = tx_.inputs[inputIndex].utxo;\n\n    return signInput(this.privKey, tx_, inputIndex, sigHashType, utxo);\n  }\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    inputAmount: number,\n    inputScript: string, \n    sigHashType: SignType,\n    addr: string): Promise<string> {\n\n    let tx_ = new bsv.Transaction(rawtx);\n\n    let script = new bsv.Script.fromHex(inputScript);\n\n    return toHex(signTx(tx_, this.privKey, script, inputAmount, inputIndex, sigHashType));\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    // 1 second per KB\n\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n    const {\n      data: txid\n    } = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n      txhex: rawTx\n    }, {\n      timeout: time\n    });\n    return txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    return axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(this.privKey.toAddress()).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(this.privKey.toAddress() + ''));\n  }\n\n\n  getPublicKey(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(toHex(this.privKey.publicKey)));\n  }\n\n}","import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { DotWalletToken } from \"./utils\";\n\nconst Request = axios.create({\n  timeout: 20000,\n});\n\nexport const requestInterceptor = (config: AxiosRequestConfig) => {\n  const access_token = DotWalletToken.get();\n\n  if (access_token) {\n    config.headers[\"Authorization\"] = \"Bearer \" + access_token;\n  }\n\n\n\n  return config;\n};\n\nRequest.interceptors.request.use(requestInterceptor, (error) =>\n  Promise.reject(error)\n);\n\nexport const responseIntercepter = async (res: AxiosResponse) => {\n  if (res && +res.status === 200) {\n    if(+res.data.code === 75000){\n      console.error(res)\n      localStorage.clear()\n      alert(\"Re-login\")\n      window.location.href = '';\n    }\n    if (+res.data.code === 0) {\n      return Promise.resolve(res);\n    } else {\n      return Promise.reject(res);\n    }\n  }\n\n  if (res && res.status >= 400) {\n    return Promise.reject(res);\n  }\n\n  return Promise.resolve(res);\n};\n\nRequest.interceptors.response.use(responseIntercepter, (error) =>\n  Promise.reject(error)\n);\n\nexport default Request;\n","import { NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport axios from 'axios';\nimport { DAPP_API_PATHS, getPlayer, getPlayerByState, LocalStorageKey } from '../utils';\nimport Request from '../Request';\n\n\nexport class DotWallet extends wallet {\n  API_PREFIX: string;\n  API_DOTWALLET: string;\n  CLIENT_ID = 'aa7f349975c72e5ba3178e636728f6b2';\n  loginUrl: string;\n  sender: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    console.log('new DotWallet')\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network === NetWork.Regtest ? 'test' : 'main'}`;\n    // this.API_DOTWALLET = network == NetWork.Regtest ?  `http://192.168.1.13:6001` : `https://api.ddpurse.com`;\n    this.API_DOTWALLET = network === NetWork.Regtest ? `http://192.168.1.13:6001` : `https://api.ddpurse.com`;\n    const loginUrl = `${this.API_DOTWALLET}/authorize?client_id=${this.CLIENT_ID}&redirect_uri=${encodeURIComponent(`${window.location.origin}/tic-tac-toe`)}&response_type=code&scope=${encodeURIComponent(\"user.info\")}`;\n    this.loginUrl = loginUrl;\n    this.sender = network === NetWork.Regtest ? {\n      \"appid\": \"test_bsv_coin_regular\",\n      \"user_index\": 0\n    } : {\n      \"appid\": \"bsv_coin_regular\",\n      \"user_index\": 0\n    }\n\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n    window.location.href = `${this.loginUrl}&state=${name}`;\n    return Promise.resolve(true);\n  }\n\n\n  code2token = async (code: string) => {\n    if (!code) return;\n    try {\n      const { data } = await axios.post(`https://common.mempool.com/api/dotwallet/get_access_token`, {\n        code,\n        redirect_uri: `${window.location.origin}/tic-tac-toe`\n      });\n\n\n      const { access_token } = data.data;\n      if (access_token) {\n        localStorage[LocalStorageKey.accountToken] = access_token;\n        const query = getPlayerByState() == 'alice' ? \"?player=alice\" : \"?player=bob\";\n        window.location.href = `${window.location.origin}/tic-tac-toe${query}`\n      }\n    } catch (error) {\n      console.error('code2token error', error)\n    }\n  };\n\n  async getbalance(): Promise<number> {\n    try {\n      const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_balance}`, {\n        \"sender\": this.sender,\n      });\n      return data.data.confirm + data.data.unconfirm;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_sign_raw_transaction}`, {\n      \"sender\": this.sender,\n      \"input_index\": inputIndex,\n      \"sig_type\": sigHashType,\n      rawtx,\n      addr,\n    }, {\n      headers: {\n       \n      }\n    }\n    );\n    return data.data.signed_rawtx\n  }\n\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    inputAmount: number,\n    inputScript: string, \n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_signature}`, {\n      \"sender\": this.sender,\n      \"input_index\": inputIndex,\n      \"sig_type\": sigHashType,\n      rawtx,\n      addr,\n    }, {\n      headers: {\n        \"player\": 'alice'\n      }\n    });\n\n    return data.data.hex_signature\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_send_raw_transaction}`, {\n      \"sender\": this.sender,\n      rawTx,\n    });\n\n    return data.data.txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_list_unspent}`, {\n      \"sender\": this.sender,\n      \"min_amount\": minAmount\n    }, {\n      headers: {\n        \"player\": options?.purpose\n      }\n    });\n\n    return data.data.utxos.filter((utxo: any) => utxo.satoshis >= minAmount).map((utxo: any) => {\n      const _utxo = {\n        txHash: utxo.tx_hash,\n        outputIndex: utxo.output_index,\n        satoshis: utxo.satoshis,\n        script: utxo.script,\n        addr: utxo.addr,\n        pubkey: utxo.pubkey,\n      } as UTXO;\n      return _utxo;\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_raw_change_address}`, {\n      \"sender\": this.sender,\n    }, {\n      headers: {\n        \"player\": options?.purpose\n      }\n    });\n\n    return data.data.address;\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    const { data } = await Request.post(`${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_public_key}`, {\n      \"sender\": this.sender,\n    }, {\n      headers: {\n        \"player\": options?.purpose\n      }\n    });\n\n    return data.data.public_key;\n  }\n}","\nimport { EventEmitter } from 'events';\nimport { DotWalletToken } from './utils';\n\nclass Server extends EventEmitter {\n    player = ''\n    privKey = ''\n    accessToken = ''\n    constructor() {\n        super();\n        var urlParams = new URLSearchParams(window.location.search);\n        this.player = urlParams.get('player') || \"alice\";\n        const self = this;\n        this.accessToken = DotWalletToken.get()\n\n        window.addEventListener('storage', (e) => {\n            // When local storage changes, dump the list to\n            // the console.\n            console.log('on storage change ' + this.player, e)\n\n\n            if (e.key === \"game\") {\n                try {\n                    let gameJson = window.localStorage.getItem('game');\n                    if (gameJson && gameJson !== null) {\n                        let game = JSON.parse(gameJson);\n\n                        if (game.event) {\n\n                            self.emit(game.event, game)\n                        }\n\n                    }\n                } catch (e) {\n                    console.error(' storage change error', e)\n                }\n            }\n\n        }, false);\n\n    }\n\n\n\n    deleteGame = () => {\n        console.log('deleteGame');\n        window.localStorage.removeItem('game');\n    }\n\n\n    createGame = (game) => {\n        game.event = 'createGame';\n        console.log('createGame', game);\n        return window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n    saveGame = (game, event) => {\n        game.event = event;\n        console.log('saveGame', game);\n        window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n\n\n    getGame = () => {\n        let gameJson = window.localStorage.getItem('game');\n        if (gameJson && gameJson !== null) {\n            return JSON.parse(gameJson);\n        }\n        return undefined\n    }\n    \n\n\n    getCurrentPlayer = () => (this.player);\n\n\n    savePrivateKey = (key) => {\n        this.privKey = key;\n        window.localStorage.setItem(this.player, key);\n    }\n\n\n    getPrivateKey = () => {\n        if (this.player) {\n            this.privKey = window.localStorage.getItem(this.player);\n        }\n\n        return this.privKey;\n    }\n\n    getBobPrivateKey = () => {\n\n        return window.localStorage.getItem('bob');\n    }\n\n    getAlicePrivateKey = () => {\n\n        return window.localStorage.getItem('alice');\n    }\n\n    getAccessToken = () => {\n        if (this.player) {\n            this.accessToken = DotWalletToken.get();\n        }\n\n        return this.accessToken;\n    }\n\n    addDeployedListener(cb) {\n        console.log('addDeployedListener');\n        this.on('deployed', cb);\n    }\n\n\n    removeDeployedListener(cb) {\n        console.log('removeDeployedListener');\n        this.off('deployed', cb)\n    }\n\n\n    addNextListener(cb) {\n        console.log('addNextListener');\n        this.on('next', cb);\n    }\n\n    removeNextListener(cb) {\n        console.log('removeNextListener');\n        this.off('next', cb)\n    }\n}\n\nconst server = new Server();\n\nexport default server;","import React from 'react';\nimport Board from './Board';\nimport { bsv, Bytes, Sig, toHex } from 'scryptlib';\nimport { web3, Input, SignType } from './web3';\n\nimport server from './Server';\nimport { getPreimage, toRawTx, toBsvTx } from './web3/wutils';\nimport { PlayerAddress, PlayerPublicKey, getPlayer } from './utils';\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  is_alice_turn: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.game && props.game.gameState) {\n      this.state = props.game.gameState;\n    } else {\n      this.state = initialState;\n    }\n  }\n\n\n\n  componentWillReceiveProps(nextProps) {\n    console.log('componentWillReceiveProps', nextProps)\n    if (nextProps.game && nextProps.game.gameState) {\n      this.setState(nextProps.game.gameState);\n    } else {\n      this.setState(initialState);\n    }\n  }\n\n\n  getNewStateScript(squares) {\n    return this.props.contractInstance.getNewStateScript({\n      is_alice_turn: !this.state.is_alice_turn,\n      board: new Bytes(squares.map(square => {\n\n        if (square && square.label === 'X') {\n          return '01'\n        } else if (square && square.label === 'O') {\n          return '02'\n        } else {\n          return '00';\n        }\n      }).join(''))\n    })\n  }\n\n  calculateOldState(squares) {\n\n    this.props.contractInstance.is_alice_turn = this.state.is_alice_turn;\n    this.props.contractInstance.board = new Bytes(squares.map(square => {\n\n      if (square && square.label === 'X') {\n        return '01'\n      } else if (square && square.label === 'O') {\n        return '02'\n      } else {\n        return '00';\n      }\n    }).join(''));\n  }\n\n\n  updateState(i, squares) {\n    if (!this.props.game || !this.props.game.lastUtxo) {\n      return false;\n    }\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return false;\n    }\n    squares[i] = { label: this.state.is_alice_turn ? 'X' : 'O' };\n    let player = server.getCurrentPlayer();\n\n    if (player === \"alice\" && this.state.is_alice_turn) {\n      return true;\n    } else if (player === \"bob\" && !this.state.is_alice_turn) {\n      return true;\n    } else {\n      alert(`now is ${this.state.is_alice_turn ? 'Alice' : 'Bob'} turn `)\n      console.error(`now is ${this.state.is_alice_turn ? 'Alice' : 'Bob'} turn , but got ${player}`)\n      return false;\n    }\n\n  }\n\n\n  async buildCallContractTx(i, squares, history) {\n    let winner = calculateWinner(squares).winner;\n    const FEE = 3000;\n    let outputs = [];\n    let amount = this.props.game.lastUtxo.satoshis - FEE;\n    if (winner) {\n      const player = getPlayer();\n      // winner is current player\n\n      let address = await PlayerAddress.get(player);\n\n      outputs.push({\n        satoshis: amount,\n        script: bsv.Script.buildPublicKeyHashOut(address).toHex()\n      })\n\n    } else if (history.length >= 9) {\n\n      const aliceAddress = new bsv.PublicKey(this.props.game.alicePubKey, {\n        network: bsv.Networks.testnet\n      });\n      const bobAddress = new bsv.PublicKey(this.props.game.bobPubKey, {\n        network: bsv.Networks.testnet\n      });\n\n      //no body win\n      const aliceLockingScript = bsv.Script.buildPublicKeyHashOut(aliceAddress.toAddress(bsv.Networks.testnet)).toHex();\n      const bobLockingScript = bsv.Script.buildPublicKeyHashOut(bobAddress.toAddress(bsv.Networks.testnet)).toHex();\n      amount = (this.props.game.lastUtxo.satoshis - FEE) / 2;\n\n      outputs.push({\n        satoshis: amount,\n        script: aliceLockingScript\n      })\n\n      outputs.push({\n        satoshis: amount,\n        script: bobLockingScript\n      })\n\n    } else {\n      //next\n      const newLockingScript = this.getNewStateScript(squares);\n      outputs.push({\n        satoshis: amount,\n        script: newLockingScript.toHex()\n      })\n    }\n\n\n    if (outputs[0].satoshis <= 0) {\n      alert(`fund in contract is too low `)\n      return undefined;\n    }\n\n\n    let tx = {\n      inputs: [{\n        utxo: this.props.game.lastUtxo,\n        sequence: 0,\n        script: \"\"\n      }],\n      outputs: outputs\n    }\n\n    let preimage = getPreimage(tx);\n\n    const addr = PlayerAddress.get();\n\n    let sig = await web3.wallet.getSignature(toRawTx(tx), 0,  tx.inputs[0].utxo.satoshis,\n       tx.inputs[0].utxo.script, SignType.ALL, addr);\n\n    let unlockScript = this.props.contractInstance.move(i, new Sig(toHex(sig)), amount, preimage).toHex();\n\n    tx.inputs[0].script = unlockScript;\n\n    // we can verify locally before we broadcast the tx, if fail, \n    // it will print the launch.json in the brower webview developer tool, just copy/paste,\n    // and try launch the sCrypt debugger\n\n    const result = this.props.contractInstance.move(i, new Sig(toHex(sig)), amount, preimage).verify({ inputSatoshis: this.props.game.lastUtxo.satoshis, tx: toBsvTx(tx) })\n\n    if (!result.success) {\n      throw new Error(result.error)\n    }\n\n    return tx;\n  }\n\n\n  async handleClick(i) {\n\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    this.calculateOldState(squares);\n    if (!this.updateState(i, squares)) {\n      console.error('handleClick checkIfValid false...')\n      return;\n    }\n\n    // let tx = await this.buildCallContractTx(i, newState, squares, history);\n    let tx = await this.buildCallContractTx(i, squares, history);\n\n    if (!tx) {\n      console.error('buildCallContractTx fail...')\n      return;\n    }\n\n    web3.sendTx(tx).then(txid => {\n\n      squares[i].tx = txid;\n      squares[i].n = history.length;\n      let gameState = {\n        history: history.concat([\n          {\n            squares,\n            currentLocation: getLocation(i),\n            stepNumber: history.length,\n          },\n        ]),\n        is_alice_turn: !this.state.is_alice_turn,\n        currentStepNumber: history.length,\n      };\n\n      server.saveGame(Object.assign({}, this.props.game, {\n        gameState: gameState,\n        lastUtxo: {\n          txHash: txid,\n          outputIndex: 0,\n          satoshis: tx.outputs[0].satoshis,\n          script: tx.outputs[0].script\n        }\n      }), 'next')\n\n      this.setState(gameState);\n\n    }).catch(e => {\n      if (e.response) {\n        alert('sendTx errror: ' + e.response.data)\n      }\n      console.error('sendTx errror', e.response)\n    })\n\n  }\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n\n\n    const game = server.getGame();\n\n\n\n\n    let status;\n    let end;\n\n    let icon;\n\n\n    if (server.getCurrentPlayer() === 'bob') {\n      icon = <div className=\"bob\">Bob<img src=\"/tic-tac-toe/bob.png\"></img></div>\n    } else {\n      icon = <div className=\"alice\">Alice<img src=\"/tic-tac-toe/alice.jpg\"></img></div>\n    }\n\n    let bet;\n    if (game && game.deploy) {\n      bet = <div className=\"bet\"><a href={`https://whatsonchain.com/tx/${game.deploy}`} target=\"_blank\">Bet transaction</a> </div>\n    }\n\n    let player = server.getCurrentPlayer();\n    if (winner) {\n      let winnerName = winner.label === 'X' ? 'Alice' : 'Bob';\n      status = `Winner is ${winnerName}`;\n      if (game && game.lastUtxo) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${game.lastUtxo.txHash}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n      if (game && game.lastUtxo) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${game.lastUtxo.txHash}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else {\n\n      let nexter = this.state.is_alice_turn ? 'Alice' : 'Bob';\n\n      status = `Next player: ${nexter}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div className=\"game-title\">\n            {icon}\n            <div className=\"game-status\"> {status} </div>\n          </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n\n          <div className=\"game-bottom\">\n            {bet}\n            {end}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { web3 } from './web3';\nimport server from './Server';\n\nfunction makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n\nfunction TitleBar(props) {\n    const forceUpdate = React.useReducer(bool => !bool)[1];\n\n    const amountRef = useRef(null);\n\n    const onStart = (e) => {\n\n        if (!web3.wallet) {\n            alert(\"Pelease create wallet first\")\n            return;\n        }\n        let amount = parseInt(amountRef.current.value);\n\n        if (amount < 20000) {\n            alert(\"The bet fund is too small to play, at least 20000\")\n            return;\n        }\n\n        if (!isNaN(amount)) {\n            props.startBet(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        props.cancelBet();\n    }\n\n\n\n    if (props.started) {\n\n        return (\n            <div>\n                The game is in progress ...\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n    }\n    else if (props.game && props.game.creator === server.getCurrentPlayer()) {\n\n        const player = server.getCurrentPlayer() === 'alice' ? 'bob' : 'alice';\n\n        var url = window.location.href.split('?')[0];\n\n        return (\n            <div>\n                Waiting someone join the game ...\n                <a className=\"pure-button\" href={url + '?player=' + player} target=\"_blank\"> Join</a>\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n\n    } else if (props.game && props.game.creator !== server.getCurrentPlayer()) {\n\n        return (\n            <div>\n                Joining the game...\n            </div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <label>Bet amount:\n                    <input ref={amountRef} type=\"number\" name=\"amount\" placeholder=\"in satoshis\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>Start Bet</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","import { NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport axios from 'axios';\nimport { bsv } from 'scryptlib/dist';\n\n\nexport class Sensilet extends wallet {\n  static DEBUG_TAG = 'Sensilet';\n  API_PREFIX: string;\n  sensilet: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == NetWork.Testnet ? 'test' : 'main'}`;\n    if (typeof (window as any).sensilet !== 'undefined') {\n      console.log('Sensilet is installed!');\n      this.sensilet = (window as any).sensilet \n    } else {\n      console.warn(\"sensilet is not installed\");\n    }\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n\n    if(!this.sensilet) {\n      if(typeof (window as any).sensilet === 'undefined') {\n        alert(\"sensilet is not installed\");\n         window.open(\"https://sensilet.com/\", '_blank');\n      } else  {\n        console.log('Sensilet is installed!');\n        this.sensilet = (window as any).sensilet \n        return this.sensilet.requestAccount()\n      }\n    }\n\n    return this.sensilet.requestAccount()\n  }\n\n  async isConnect(): Promise<boolean> {\n    try {\n      console.log('isConnect')\n      if (typeof this.sensilet !== 'undefined') {\n        let isConnected = await this.sensilet.isConnect();\n        console.log('connect state', isConnected);\n        return isConnected;\n      } \n\n    } catch (error) {\n    \n    }\n    return Promise.resolve(false);\n  }\n\n\n  async getbalance(): Promise<number> {\n    try {\n      let res = await this.sensilet.getBsvBalance();\n      console.log(Sensilet.DEBUG_TAG, 'getbalance', res.balance)\n      return Promise.resolve(res.balance.total);\n    } catch (error) {\n      console.error('getbalance error', error);\n    }\n\n    return Promise.resolve(0)\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n    console.log('signRawTransaction', rawtx)\n    const tx = new bsv.Transaction(rawtx);\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: addr,\n          inputIndex:inputIndex,\n          satoshis:tx.inputs[inputIndex].satoshis\n        }\n      ]\n    });\n    console.log(res)\n\n    return Promise.resolve(res.sigList[0].sig);\n  }\n\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    inputAmount: number,\n    inputScript: string, \n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: addr,\n          inputIndex:inputIndex,\n          satoshis:inputAmount,\n          scriptHex: inputScript,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    return res.sigList[0].sig;\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    // 1 second per KB\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n\n    try {\n      const res = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n        txhex: rawTx\n      }, {\n        timeout: time\n      });\n      return res.data;\n    } catch (error) {\n      throw new Error('sendRawTransaction error: ')\n    }\n\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n\n    let address = await this.sensilet.getAddress();\n    console.log(Sensilet.DEBUG_TAG, 'listUnspent', address)\n    return axios.get(`${this.API_PREFIX}/address/${address}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(address).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getAddress();\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getPublicKey();\n  }\n\n  async exitAccount(): Promise<boolean> {\n    try {\n      await this.sensilet.exitAccount();\n      return true\n   } catch (e) {\n     console.log(e);\n   }\n   return false;\n  }\n}","\nimport React, { useState, useEffect } from 'react';\nimport { web3, DotWallet} from './web3';\nimport server from './Server';\nimport {getCode, getPlayer, PlayerPublicKey, PlayerAddress} from './utils';\nimport { Sensilet } from './web3/sensilet';\nconst Wallet = props => {\n    const [balance, setBalance] = useState(0)\n    const [authed, setAuth] = useState(false)\n\n    useEffect(()=>{\n        const dotWalletCode = getCode();\n        if(dotWalletCode) {\n            const dotwallet = new DotWallet()\n            dotwallet.code2token(dotWalletCode)\n        }\n    },[])\n\n\n\n    useEffect(async () => {\n\n        const id = setTimeout(async () => {\n            \n            if (!web3.wallet) {\n                if (server.getAccessToken()) {\n                    const dotwallet = new DotWallet()\n                    web3.setWallet(dotwallet);\n                    props.startGame()\n                    setAuth(true)\n                } else {\n    \n                    const sensilet = new Sensilet();\n                    const isConnect = await sensilet.isConnect();\n    \n                    if(isConnect) {\n                        web3.setWallet(sensilet);\n                        console.log('..... setAuth')\n                        props.startGame()\n                        setAuth(true)\n                    }\n                }\n            }\n\n            if(web3.wallet) {\n                web3.wallet.getbalance().then(balance => {\n                    setBalance(balance)\n                })\n            }\n\n        }, 1000)\n\n        return () => clearTimeout(id)\n\n    },[]);\n\n\n    const handleDotwallet = (e)=>{\n        const dotwallet = new DotWallet()\n        dotwallet.requestAccount(getPlayer())\n    }\n\n    const handleSensilet = async (e)=>{\n        try {\n            const sensilet = new Sensilet();\n            const res = await sensilet.requestAccount(getPlayer())\n            if(res) {\n                window.location.reload()\n            }\n        } catch (error) {\n            console.error('requestAccount error', error)\n        }\n\n    }\n\n    const handleExit = async (e)=>{\n\n        localStorage.clear();\n        const sensilet = new Sensilet();\n\n        const isConnect = await sensilet.isConnect();\n\n        if(isConnect) {\n            await sensilet.exitAccount();\n        }\n\n        web3.setWallet(undefined);\n        setAuth(false)\n        window.location.reload()\n    }\n\n\n    if (authed) {\n        return <div className=\"wallet\">\n            <div className=\"walletInfo\">\n                <div className=\"balance\">\n                    <label >Balance: {balance}</label>\n                </div>\n                <button className=\"pure-button button-large\" onClick={handleExit}>Logout</button>\n            </div>\n        </div>\n    } else {\n        return <div className=\"wallet\">\n            <div>\n                <button className=\"pure-button button-large sensilet\" onClick={handleSensilet}>Sensilet</button>\n                <button className=\"pure-button button-large dotwallet\" onClick={handleDotwallet}>Dotwallet</button>\n            </div>\n        </div>\n    }\n}\n\nexport default Wallet;\n\n\n","import \"./App.css\";\nimport Game from \"./Game\";\nimport React, { useState, useEffect } from \"react\";\nimport TitleBar from \"./TitleBar\";\nimport { Bytes, PubKey, toHex, bsv } from \"scryptlib\";\n\nimport { DotWallet, web3, UTXO } from \"./web3\";\nimport Wallet from \"./wallet\";\nimport server from \"./Server\";\nimport { PlayerPublicKey, PlayerAddress } from \"./utils\";\nimport { Sensilet } from \"./web3/sensilet\";\n\nfunction App() {\n  const [started, updateStart] = useState(false);\n\n  const [contractInstance, updateContractInstance] = useState(null);\n\n  const forceUpdate = React.useReducer((bool) => !bool)[1];\n\n  const startBet = async (amount) => {\n    //let tx = await web3.deploy(contractInstance, 10000);\n    console.log(\"startBet with amount\", amount);\n\n    if (web3.wallet) {\n      let balance = await web3.wallet.getbalance();\n\n      if (amount > balance) {\n        alert(\"Please fund your wallet address first\");\n        return;\n      }\n\n      let player = server.getCurrentPlayer();\n\n      let game = {\n        amount: amount,\n        tx: {\n          inputs: [],\n          outputs: [],\n        },\n        name: \"tic-tac-toe\",\n        alicePubKey: \"\",\n        bobPubKey: \"\",\n        creator: player,\n        player: \"\",\n        date: new Date(),\n      };\n\n      if (player === \"alice\") {\n        Object.assign(game, {\n          alicePubKey: PlayerPublicKey.get(\"alice\"),\n        });\n      } else {\n        Object.assign(game, {\n          bobPubKey: PlayerPublicKey.get(\"bob\"),\n        });\n      }\n\n      server.createGame(game);\n\n      forceUpdate();\n    }\n  };\n\n  const cancelBet = () => {\n    server.deleteGame();\n    updateStart(false);\n    forceUpdate();\n  };\n\n  const onDeployed = async (game) => {\n    console.log(\"onDeployed...\");\n\n    if (game && game.alicePubKey && game.bobPubKey) {\n      fetchContract(game.alicePubKey, game.bobPubKey);\n    }\n\n    updateStart(true);\n  };\n\n  const onNext = async (game) => {\n    //BOB SIGN\n    console.log(\"onNext\", game);\n    forceUpdate();\n  };\n\n  async function fetchContract(alicePubKey, bobPubKey) {\n    if (contractInstance === null && alicePubKey && bobPubKey) {\n      let { contractClass: TictactoeContractClass } = await web3.loadContract(\n        \"/tic-tac-toe/tictactoe_release_desc.json\"\n      );\n\n      let c = new TictactoeContractClass(\n        new PubKey(toHex(alicePubKey)),\n        new PubKey(toHex(bobPubKey)),\n        true,\n        new Bytes('000000000000000000')\n      );\n\n\n      updateContractInstance(c);\n      console.log(\"fetchContract successfully\");\n      return c;\n    }\n    return contractInstance;\n  }\n\n  function setPlayersPublicKey() {\n    console.log('setPlayersPublicKey ...')\n    let wallet = web3.wallet\n\n    if (wallet instanceof Sensilet) {\n      return wallet.getPublicKey().then(async (publicKeyStr) => {\n        let publicKey = bsv.PublicKey.fromHex(publicKeyStr)\n\n        PlayerPublicKey.set(publicKeyStr, 'alice');\n        PlayerAddress.set(publicKey.toAddress(), 'alice');\n\n        PlayerPublicKey.set(publicKeyStr, 'bob');\n        PlayerAddress.set(publicKey.toAddress(), 'bob');\n      })\n    } else if (wallet instanceof DotWallet) {\n      return wallet.listUnspent(20000, {\n        purpose: 'alice'\n      }).then(async (utxos) => {\n\n        if (utxos.length === 0) {\n          throw new Error('no utxos');\n        }\n\n        let publicKey = bsv.PublicKey.fromHex(utxos[0].pubkey)\n\n        PlayerPublicKey.set(utxos[0].pubkey, 'alice');\n        PlayerAddress.set(publicKey.toAddress(), 'alice');\n\n        PlayerPublicKey.set(utxos[0].pubkey, 'bob');\n        PlayerAddress.set(publicKey.toAddress(), 'bob');\n      })\n    }\n  }\n\n\n  async function joinGame(game) {\n    console.log(\"joinGame...\", game);\n\n    let balance = await web3.wallet.getbalance();\n\n    if (balance <= game.amount) {\n      alert(\n        \"no available utxos or  balance is not enough, please fund your wallet\"\n      );\n      return;\n    }\n\n\n    Object.assign(game, {\n      alicePubKey: PlayerPublicKey.get(\"alice\"),\n      player: \"alice\",\n    });\n    Object.assign(game, {\n      bobPubKey: PlayerPublicKey.get(\"bob\"),\n      player: \"bob\",\n    });\n\n\n\n    let contract = await fetchContract(game.alicePubKey, game.bobPubKey);\n\n    if (contract != null) {\n      web3\n        .deploy(contract, game.amount)\n        .then(([tx, txid]) => {\n\n          game.lastUtxo = {\n            txHash: txid,\n            outputIndex: 0,\n            satoshis: tx.outputs[0].satoshis,\n            script: tx.outputs[0].script,\n          };\n\n          game.tx = tx;\n          game.deploy = txid;\n          server.saveGame(game, \"deployed\");\n          updateStart(true);\n        })\n        .catch((e) => {\n          if (e.message === \"no utxos\") {\n            alert(\"no available utxos, please fund your wallet\");\n          }\n          console.error(\"deploy error\", e);\n        });\n    }\n  }\n\n  async function startGame() {\n\n\n    if (started) {\n      console.log('already started')\n      return;\n    }\n    console.log('startGame...')\n    await setPlayersPublicKey();\n\n    let game = server.getGame();\n    if (game && game.lastUtxo) {\n      updateStart(true);\n    }\n\n    if (game && game.alicePubKey && game.bobPubKey) {\n      fetchContract(game.alicePubKey, game.bobPubKey);\n    }\n\n    if (game && !game.deploy) {\n      joinGame(game);\n    }\n\n  }\n\n  useEffect(() => {\n    server.addDeployedListener(onDeployed);\n    server.addNextListener(onNext);\n    return () => {\n      server.removeDeployedListener(onDeployed);\n      server.removeNextListener(onNext);\n    };\n  }, [contractInstance]);\n\n  const game = server.getGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Play Tic-Tac-Toe on Bitcoin</h2>\n        <TitleBar\n          startBet={startBet}\n          cancelBet={cancelBet}\n          started={started}\n          game={game}\n        />\n\n        <Game game={game} contractInstance={contractInstance} />\n\n        <Wallet startGame={startGame}></Wallet>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}