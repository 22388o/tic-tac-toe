{"version":3,"sources":["../../../src/web3/wallet.ts","../../src/contract.ts","../../src/serializer.ts","../../src/abi.ts","../../src/utils.ts","../../src/index.ts","../../../src/web3/index.ts","../../../src/web3/web3.ts","../../../src/web3/localwallet.ts","../../../src/web3/wutils.ts","Square.js","Board.js","Server.js","Game.js","TitleBar.js","wallet.js","hooks.js","App.js","reportWebVitals.js","index.js","../../src/scryptTypes.ts","../../src/compilerWrapper.ts"],"names":["buildTypeResolver","serializeInt","n","asms","ret","m","l","Interp","exports","Array","isArray","arg","defineProperty","enumerable","WEB3_VERSION","network","Square","props","className","winnerClass","onClick","value","label","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","winnerSquares","squares","createBoard","React","Component","server","player","privKey","existGamebySelf","game","window","localStorage","getItem","JSON","parse","creator","existGamebyOther","deleteGame","console","log","removeItem","createGame","event","setItem","stringify","JoinGame","saveGame","getGame","gameJson","getIdentity","savePrivateKey","key","getPrivateKey","urlParams","URLSearchParams","location","search","get","self","addEventListener","e","emit","error","cb","on","off","EventEmitter","calculateWinner","lines","length","a","b","c","winner","winnerRow","initialState","history","fill","currentStepNumber","xIsNext","Game","gameState","state","nextProps","setState","slice","current","newState","map","square","join","newLockingScript","web3","wallet","changeAddress","address","bsv","Script","buildPublicKeyHashOut","toHex","contractInstance","codePart","fromASM","tx","inputs","utxo","lastUtxo","sequence","script","outputs","satoshis","preimage","getPreimage","signTx","SignType","ALL","then","sig","unlockScript","move","Sig","sendTx","txid","concat","currentLocation","0","1","2","3","4","5","6","7","8","stepNumber","Object","assign","txHash","outputIndex","status","handleClick","TitleBar","prop","useReducer","bool","amountRef","useRef","onCancel","cancelBet","useEffect","started","href","deploy","target","ref","type","name","amount","parseInt","isNaN","startBet","Wallet","useState","setAddress","balance","setBalance","setWallet","LocalWallet","NetWork","Testnet","updateWallet","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","htmlFor","placeholder","onChange","privateKey","PrivateKey","fromWIF","currentTarget","App","updateStart","updateContractInstance","forceUpdate","publicKey","alicePubKey","Date","onBobJoin","appendPayInput","onAliceSign","onDeployed","fetchContract","onNext","bobPubKey","loadContract","TictactoeContractClass","contractClass","newCall","PubKey","setDataPart","buildUnsignDeployTx","bobJoin","addJoinListener","addAliceSignListener","addDeployedListener","addNextListener","removeAliceSignListener","removeDeployedListener","removeJoinListener","removeNextListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","v","abi","CompileErrorType"],"mappings":"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","file":"static/js/main.44f26cd2.chunk.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.wallet = exports.SignType = exports.NetWork = void 0;\r\nconst utils_1 = require(\"../utils\");\r\nconst Signature = utils_1.bsv.crypto.Signature;\r\nvar NetWork;\r\n(function (NetWork) {\r\n    NetWork[\"Testnet\"] = \"testnet\";\r\n    NetWork[\"Mainnet\"] = \"mainnet\";\r\n    NetWork[\"STN\"] = \"STN\";\r\n})(NetWork = exports.NetWork || (exports.NetWork = {}));\r\nvar SignType;\r\n(function (SignType) {\r\n    SignType[SignType[\"ALL\"] = 65] = \"ALL\";\r\n    SignType[SignType[\"SINGLE\"] = 67] = \"SINGLE\";\r\n    SignType[SignType[\"NONE\"] = 66] = \"NONE\";\r\n    SignType[SignType[\"ANYONECANPAY_ALL\"] = 193] = \"ANYONECANPAY_ALL\";\r\n    SignType[SignType[\"ANYONECANPAY_SINGLE\"] = 195] = \"ANYONECANPAY_SINGLE\";\r\n    SignType[SignType[\"ANYONECANPAY_NONE\"] = 194] = \"ANYONECANPAY_NONE\";\r\n})(SignType = exports.SignType || (exports.SignType = {}));\r\nclass wallet {\r\n    constructor(network) {\r\n        this.network = network;\r\n    }\r\n    static toBsvTx(tx) {\r\n        const tx_ = new utils_1.bsv.Transaction();\r\n        tx.inputs.forEach(input => {\r\n            tx_.addInput(new utils_1.bsv.Transaction.Input({\r\n                prevTxId: input.utxo.txHash,\r\n                outputIndex: input.utxo.outputIndex,\r\n                script: input.script ? utils_1.bsv.Script.fromHex(input.script) : new utils_1.bsv.Script(),\r\n            }), utils_1.bsv.Script.fromHex(input.utxo.script), input.utxo.satoshis);\r\n        });\r\n        tx.outputs.forEach(output => {\r\n            tx_.addOutput(new utils_1.bsv.Transaction.Output({\r\n                script: utils_1.bsv.Script.fromHex(output.script),\r\n                satoshis: output.satoshis,\r\n            }));\r\n        });\r\n        return tx_;\r\n    }\r\n    static toHexBsvTx(tx) {\r\n        return wallet.toBsvTx(tx).toString();\r\n    }\r\n}\r\nexports.wallet = wallet;\r\n//# sourceMappingURL=wallet.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.buildTypeResolver = exports.buildTypeClasses = exports.buildStructsClass = exports.buildContractClass = exports.AbstractContract = void 0;\r\nconst abi_1 = require(\"./abi\");\r\nconst serializer_1 = require(\"./serializer\");\r\nconst utils_1 = require(\"./utils\");\r\nconst scryptTypes_1 = require(\"./scryptTypes\");\r\nconst compilerWrapper_1 = require(\"./compilerWrapper\");\r\nclass AbstractContract {\r\n    constructor() {\r\n        this.calls = new Map();\r\n        this.asmArgs = null;\r\n    }\r\n    get lockingScript() {\r\n        let lsASM = this.scriptedConstructor.toASM();\r\n        if (typeof this._dataPart === 'string') {\r\n            const dp = this._dataPart.trim();\r\n            if (dp) {\r\n                lsASM += ` OP_RETURN ${dp}`;\r\n            }\r\n            else {\r\n                lsASM += ' OP_RETURN'; // note there is no space after op_return\r\n            }\r\n        }\r\n        return utils_1.bsv.Script.fromASM(lsASM.trim());\r\n    }\r\n    set txContext(txContext) {\r\n        this._txContext = txContext;\r\n    }\r\n    get txContext() {\r\n        return this._txContext;\r\n    }\r\n    // replace assembly variables with assembly values\r\n    replaceAsmVars(asmVarValues) {\r\n        this.asmArgs = asmVarValues;\r\n        this.scriptedConstructor.init(asmVarValues);\r\n    }\r\n    static findSrcInfo(steps, opcodes, stepIndex, opcodesIndex) {\r\n        while (--stepIndex > 0 && --opcodesIndex > 0) {\r\n            if (opcodes[opcodesIndex].pos && opcodes[opcodesIndex].pos.file !== 'std' && opcodes[opcodesIndex].pos.line > 0 && steps[stepIndex].fExec) {\r\n                return opcodes[opcodesIndex];\r\n            }\r\n        }\r\n    }\r\n    static findLastfExec(steps, stepIndex) {\r\n        while (--stepIndex > 0) {\r\n            if (steps[stepIndex].fExec) {\r\n                return stepIndex;\r\n            }\r\n        }\r\n    }\r\n    run_verify(unlockingScriptASM, txContext) {\r\n        const txCtx = Object.assign({}, this._txContext || {}, txContext || {});\r\n        const us = utils_1.bsv.Script.fromASM(unlockingScriptASM.trim());\r\n        const ls = this.lockingScript;\r\n        const tx = txCtx.tx;\r\n        const inputIndex = txCtx.inputIndex || 0;\r\n        const inputSatoshis = txCtx.inputSatoshis || 0;\r\n        const bsi = utils_1.bsv.Script.Interpreter();\r\n        let stepCounter = 0;\r\n        const steps = [];\r\n        bsi.stepListener = function (step, stack, altstack) {\r\n            steps.push(step);\r\n            stepCounter++;\r\n        };\r\n        const opcodes = Object.getPrototypeOf(this).constructor.opcodes;\r\n        const result = bsi.verify(us, ls, tx, inputIndex, utils_1.DEFAULT_FLAGS, new utils_1.bsv.crypto.BN(inputSatoshis));\r\n        let error = result ? '' : `VerifyError: ${bsi.errstr}`;\r\n        // some time there is no opcodes, such as when sourcemap flag is closeed. \r\n        if (opcodes) {\r\n            const offset = unlockingScriptASM.trim().split(' ').length;\r\n            // the complete script may have op_return and data, but compiled output does not have it. So we need to make sure the index is in boundary.\r\n            const lastStepIndex = AbstractContract.findLastfExec(steps, stepCounter);\r\n            if (typeof this._dataPart === 'string') {\r\n                opcodes.push({ opcode: 'OP_RETURN', stack: [] });\r\n                const dp = this._dataPart.trim();\r\n                if (dp) {\r\n                    dp.split(' ').forEach(data => {\r\n                        opcodes.push({ opcode: data, stack: [] });\r\n                    });\r\n                }\r\n            }\r\n            let opcodeIndex = lastStepIndex - offset;\r\n            if (stepCounter < (opcodes.length + offset)) {\r\n                // not all opcodes were executed, stopped in the middle at opcode like OP_VERIFY\r\n                opcodeIndex += 1;\r\n            }\r\n            if (!result && opcodes[opcodeIndex]) {\r\n                const opcode = opcodes[opcodeIndex];\r\n                if (!opcode.pos || opcode.pos.file === 'std') {\r\n                    const srcInfo = AbstractContract.findSrcInfo(steps, opcodes, lastStepIndex, opcodeIndex);\r\n                    if (srcInfo) {\r\n                        opcode.pos = srcInfo.pos;\r\n                    }\r\n                }\r\n                // in vscode termianal need to use [:] to jump to file line, but here need to use [#] to jump to file line in output channel.\r\n                if (opcode.pos) {\r\n                    const file = typeof process === 'undefined' ? utils_1.path2uri(opcode.pos.file) : opcode.pos.file;\r\n                    error = `VerifyError: ${bsi.errstr} \\n\\t[Go to Source](${file}#${opcode.pos.line})  fails at ${opcode.opcode}\\n`;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            success: result,\r\n            error: error\r\n        };\r\n    }\r\n    set dataPart(dataInScript) {\r\n        throw new Error('Setter for dataPart is not available. Please use: setDataPart() instead');\r\n    }\r\n    get dataPart() {\r\n        return this._dataPart !== undefined ? utils_1.bsv.Script.fromASM(this._dataPart) : undefined;\r\n    }\r\n    setDataPart(state) {\r\n        if (typeof state === 'string') {\r\n            // TODO: validate hex string\r\n            this._dataPart = state.trim();\r\n        }\r\n        else {\r\n            this._dataPart = serializer_1.serializeState(state);\r\n        }\r\n    }\r\n    get codePart() {\r\n        const codeASM = this.scriptedConstructor.toASM();\r\n        // note: do not trim the trailing space\r\n        return utils_1.bsv.Script.fromASM(codeASM + ' OP_RETURN');\r\n    }\r\n    static getAsmVars(contractAsm, instAsm) {\r\n        const regex = /(\\$\\S+)/g;\r\n        const vars = contractAsm.match(regex);\r\n        if (vars === null) {\r\n            return null;\r\n        }\r\n        const asmArray = contractAsm.split(/\\s/g);\r\n        const lsASMArray = instAsm.split(/\\s/g);\r\n        const result = {};\r\n        for (let i = 0; i < asmArray.length; i++) {\r\n            for (let j = 0; j < vars.length; j++) {\r\n                if (vars[j] === asmArray[i]) {\r\n                    result[vars[j].replace('$', '')] = lsASMArray[i];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    arguments(pubFuncName) {\r\n        if (pubFuncName === 'constructor') {\r\n            return this.scriptedConstructor.args;\r\n        }\r\n        if (this.calls.has(pubFuncName)) {\r\n            return this.calls.get(pubFuncName).args;\r\n        }\r\n        return [];\r\n    }\r\n}\r\nexports.AbstractContract = AbstractContract;\r\nconst invalidMethodName = ['arguments', 'setDataPart', 'run_verify', 'replaceAsmVars', 'asmVars', 'asmArguments', 'dataPart', 'lockingScript', 'txContext'];\r\nfunction buildContractClass(desc) {\r\n    if (!desc.contract) {\r\n        throw new Error('missing field `contract` in description');\r\n    }\r\n    if (!desc.abi) {\r\n        throw new Error('missing field `abi` in description');\r\n    }\r\n    if (!desc.asm) {\r\n        throw new Error('missing field `asm` in description');\r\n    }\r\n    if (!desc['errors']) {\r\n        desc = compilerWrapper_1.desc2CompileResult(desc);\r\n    }\r\n    else {\r\n        desc = desc;\r\n    }\r\n    const ContractClass = class Contract extends AbstractContract {\r\n        constructor(...ctorParams) {\r\n            super();\r\n            if (ctorParams.length > 0 || Contract.abi.find(fn => (fn.type === 'constructor' && fn.params.length === 0))) {\r\n                this.scriptedConstructor = Contract.abiCoder.encodeConstructorCall(this, Contract.asm, ...ctorParams);\r\n            }\r\n        }\r\n        //When create a contract instance using UTXO, \r\n        //use fromHex or fromASM because you do not know the parameters of constructor.\r\n        /**\r\n         * Create a contract instance using UTXO asm\r\n         * @param hex\r\n         */\r\n        static fromASM(asm) {\r\n            const obj = new this();\r\n            obj.scriptedConstructor = Contract.abiCoder.encodeConstructorCallFromASM(obj, asm);\r\n            return obj;\r\n        }\r\n        /**\r\n         * Create a contract instance using UTXO hex\r\n         * @param hex\r\n         */\r\n        static fromHex(hex) {\r\n            return ContractClass.fromASM((new utils_1.bsv.Script(hex)).toASM());\r\n        }\r\n        /**\r\n         * Get the parameter of the constructor and inline asm vars,\r\n         * all values is hex string, need convert it to number or bytes on using\r\n         */\r\n        get asmVars() {\r\n            return AbstractContract.getAsmVars(Contract.asm, this.scriptedConstructor.toASM());\r\n        }\r\n        get asmArguments() {\r\n            //TODO: @deprecate AbstractContract.getAsmVars , using asmArguments\r\n            return null;\r\n        }\r\n    };\r\n    ContractClass.contractName = desc.contract;\r\n    ContractClass.abi = desc.abi;\r\n    ContractClass.asm = desc.asm.map(item => item['opcode'].trim()).join(' ');\r\n    ContractClass.abiCoder = new abi_1.ABICoder(desc.abi, desc.alias || []);\r\n    ContractClass.opcodes = desc.asm;\r\n    ContractClass.file = desc.file;\r\n    ContractClass.structs = desc.structs;\r\n    ContractClass.abi.forEach(entity => {\r\n        if (invalidMethodName.indexOf(entity.name) > -1) {\r\n            throw new Error(`Method name [${entity.name}] is used by scryptlib now, Pelease change you contract method name!`);\r\n        }\r\n        ContractClass.prototype[entity.name] = function (...args) {\r\n            const call = ContractClass.abiCoder.encodePubFunctionCall(this, entity.name, args);\r\n            this.calls.set(entity.name, call);\r\n            return call;\r\n        };\r\n    });\r\n    return ContractClass;\r\n}\r\nexports.buildContractClass = buildContractClass;\r\n/**\r\n * @deprecated use buildTypeClasses\r\n * @param desc CompileResult or ContractDescription\r\n */\r\nfunction buildStructsClass(desc) {\r\n    const structTypes = {};\r\n    const structs = desc.structs || [];\r\n    const alias = desc.alias || [];\r\n    const finalTypeResolver = buildTypeResolver(alias);\r\n    structs.forEach(element => {\r\n        const name = element.name;\r\n        Object.assign(structTypes, {\r\n            [name]: class extends scryptTypes_1.Struct {\r\n                constructor(o) {\r\n                    super(o);\r\n                    this._typeResolver = finalTypeResolver; //we should assign this before bind\r\n                    this.bind();\r\n                }\r\n            }\r\n        });\r\n        structTypes[name].structAst = element;\r\n    });\r\n    return structTypes;\r\n}\r\nexports.buildStructsClass = buildStructsClass;\r\nfunction buildTypeClasses(desc) {\r\n    const structClasses = buildStructsClass(desc);\r\n    const aliasTypes = {};\r\n    const alias = desc.alias || [];\r\n    const finalTypeResolver = buildTypeResolver(alias);\r\n    alias.forEach(element => {\r\n        const finalType = finalTypeResolver(element.name);\r\n        if (utils_1.isStructType(finalType)) {\r\n            const type = utils_1.getStructNameByType(finalType);\r\n            Object.assign(aliasTypes, {\r\n                [element.name]: class extends structClasses[type] {\r\n                    constructor(o) {\r\n                        super(o);\r\n                        this._type = element.name;\r\n                        this._typeResolver = finalTypeResolver;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else if (utils_1.isArrayType(finalType)) {\r\n            //TODO: just return some class, but they are useless\r\n            const [elemTypeName, _] = utils_1.arrayTypeAndSize(finalType);\r\n            const C = scryptTypes_1.BasicScryptType[elemTypeName];\r\n            if (C) {\r\n                Object.assign(aliasTypes, {\r\n                    [element.name]: class extends Array {\r\n                    }\r\n                });\r\n            }\r\n            else if (utils_1.isStructType(elemTypeName)) {\r\n                const type = utils_1.getStructNameByType(elemTypeName);\r\n                const C = structClasses[type];\r\n                Object.assign(aliasTypes, {\r\n                    [element.name]: class extends Array {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            const C = scryptTypes_1.BasicScryptType[finalType];\r\n            if (C) {\r\n                const Class = C;\r\n                const aliasClass = class extends Class {\r\n                    constructor(o) {\r\n                        super(o);\r\n                        this._type = element.name;\r\n                        this._typeResolver = finalTypeResolver;\r\n                    }\r\n                };\r\n                Object.assign(aliasTypes, {\r\n                    [element.name]: aliasClass\r\n                });\r\n            }\r\n            else {\r\n                throw new Error(`can not resolve type alias ${element.name} ${element.type}`);\r\n            }\r\n        }\r\n    });\r\n    Object.assign(aliasTypes, structClasses);\r\n    return aliasTypes;\r\n}\r\nexports.buildTypeClasses = buildTypeClasses;\r\nfunction buildTypeResolver(alias) {\r\n    const resolvedTypes = {};\r\n    alias.forEach(element => {\r\n        const finalType = utils_1.resolveType(alias, element.name);\r\n        resolvedTypes[element.name] = finalType;\r\n    });\r\n    return (alias) => {\r\n        if (utils_1.isStructType(alias)) {\r\n            alias = utils_1.getStructNameByType(alias);\r\n        }\r\n        let arrayType = '';\r\n        if (utils_1.isArrayType(alias)) {\r\n            const [elemTypeName, sizes] = utils_1.arrayTypeAndSize(alias);\r\n            alias = elemTypeName;\r\n            arrayType = sizes.map(size => `[${size}]`).join('');\r\n        }\r\n        if (scryptTypes_1.BasicScryptType[alias]) {\r\n            return `${alias}${arrayType}`;\r\n        }\r\n        if (resolvedTypes[alias]) {\r\n            return `${resolvedTypes[alias]}${arrayType}`;\r\n        }\r\n        return `struct ${alias} {}${arrayType}`;\r\n    };\r\n}\r\nexports.buildTypeResolver = buildTypeResolver;\r\n//# sourceMappingURL=contract.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.deserializeState = exports.serializeState = exports.STATE_LEN_4BYTES = exports.STATE_LEN_2BYTES = void 0;\r\nconst utils_1 = require(\"./utils\");\r\nconst Script = utils_1.bsv.Script;\r\nconst Opcode = utils_1.bsv.Opcode;\r\nconst BN = utils_1.bsv.crypto.BN;\r\n// number of bytes to denote state length after serialization, exclusing varint prefix\r\nexports.STATE_LEN_2BYTES = 2;\r\nexports.STATE_LEN_4BYTES = 4;\r\nfunction serializeBool(flag) {\r\n    return flag ? 'OP_TRUE' : 'OP_FALSE';\r\n}\r\nfunction serializeInt(n) {\r\n    const num = new BN(n);\r\n    if (num.eqn(0)) {\r\n        return '00';\r\n    }\r\n    return num.toSM({ endian: 'little' }).toString('hex');\r\n}\r\nfunction serializeString(str) {\r\n    if (str === '') {\r\n        return '00';\r\n    }\r\n    const buf = Buffer.from(str, 'utf8');\r\n    return buf.toString('hex');\r\n}\r\n// TODO: validate\r\nfunction serializeBytes(hexStr) {\r\n    return hexStr;\r\n}\r\nfunction serializeWithSchema(state, key, schema = undefined) {\r\n    const type = schema[key];\r\n    if (type === 'boolean') {\r\n        return serializeBool(state[key]);\r\n    }\r\n    else if (type === 'number') {\r\n        return serializeInt(state[key]);\r\n    }\r\n    else if (type === 'bigint') {\r\n        return serializeInt(state[key]);\r\n    }\r\n    else if (type === 'string') {\r\n        return serializeString(state[key]);\r\n    }\r\n    else {\r\n        return serializeBytes(state[key]);\r\n    }\r\n}\r\nfunction serialize(x) {\r\n    if (typeof x === 'boolean') {\r\n        return serializeBool(x);\r\n    }\r\n    if (typeof x === 'number') {\r\n        return serializeInt(x);\r\n    }\r\n    if (typeof x === 'bigint') {\r\n        return serializeInt(x);\r\n    }\r\n    else {\r\n        return serializeBytes(x);\r\n    }\r\n}\r\n// serialize contract state into Script ASM\r\nfunction serializeState(state, stateBytes = exports.STATE_LEN_2BYTES, schema = undefined) {\r\n    const asms = [];\r\n    const keys = Object.keys(state);\r\n    for (const key of keys) {\r\n        if (schema) {\r\n            const str = serializeWithSchema(state, key, schema);\r\n            asms.push(str);\r\n        }\r\n        else {\r\n            const str = serialize(state[key]);\r\n            asms.push(str);\r\n        }\r\n    }\r\n    const script = Script.fromASM(asms.join(' '));\r\n    const scriptHex = script.toHex();\r\n    const stateLen = scriptHex.length / 2;\r\n    // use fixed size to denote state len\r\n    const len = utils_1.num2bin(stateLen, stateBytes);\r\n    return script.toASM() + ' ' + len;\r\n}\r\nexports.serializeState = serializeState;\r\nclass OpState {\r\n    constructor(op) {\r\n        this.op = op;\r\n    }\r\n    toNumber() {\r\n        return Number(this.toBigInt());\r\n    }\r\n    toBigInt() {\r\n        if (this.op.opcodenum === Opcode.OP_1) {\r\n            return BigInt(1);\r\n        }\r\n        else if (this.op.opcodenum === Opcode.OP_0) {\r\n            return BigInt(0);\r\n        }\r\n        else if (this.op.opcodenum === Opcode.OP_1NEGATE) {\r\n            return BigInt(-1);\r\n        }\r\n        else if (this.op.opcodenum >= Opcode.OP_2 && this.op.opcodenum <= Opcode.OP_16) {\r\n            return BigInt(this.op.opcodenum - Opcode.OP_2 + 2);\r\n        }\r\n        else {\r\n            if (!this.op.buf)\r\n                throw new Error('state does not have a number representation');\r\n            return utils_1.bin2num(this.op.buf);\r\n        }\r\n    }\r\n    toBoolean() {\r\n        return this.toBigInt() !== BigInt(0);\r\n    }\r\n    toHex() {\r\n        if (!this.op.buf)\r\n            throw new Error('state does not have a hexadecimal representation');\r\n        return this.op.buf.toString('hex');\r\n    }\r\n    toString(arg = 'utf8') {\r\n        if (!this.op.buf) {\r\n            throw new Error('state does not have a string representation');\r\n        }\r\n        if (this.op.buf[0] === 0) {\r\n            return '';\r\n        }\r\n        return this.op.buf.toString(arg);\r\n    }\r\n}\r\n// deserialize Script or Script Hex or Script ASM Code to contract state array and object\r\nfunction deserializeState(s, schema = undefined) {\r\n    let script;\r\n    try {\r\n        script = new Script(s);\r\n    }\r\n    catch (e) {\r\n        script = Script.fromASM(s);\r\n    }\r\n    const chunks = script.chunks;\r\n    const states = [];\r\n    const pos = chunks.length;\r\n    //the last opcode is length of stats, skip\r\n    for (let i = pos - 2; i >= 0; i--) {\r\n        const opcodenum = chunks[i].opcodenum;\r\n        if (opcodenum === Opcode.OP_RETURN) {\r\n            break;\r\n        }\r\n        else {\r\n            states.unshift(new OpState(chunks[i]));\r\n        }\r\n    }\r\n    //deserialize to an array\r\n    if (!schema) {\r\n        return states;\r\n    }\r\n    //deserialize to an object\r\n    let ret;\r\n    if (Array.isArray(schema)) {\r\n        ret = [];\r\n    }\r\n    else {\r\n        ret = {};\r\n    }\r\n    const keys = Object.keys(schema);\r\n    for (let i = 0; i < states.length; i++) {\r\n        const key = keys[i];\r\n        if (!key) {\r\n            break;\r\n        }\r\n        const val = schema[key];\r\n        if (val === 'boolean' || typeof val === 'boolean') {\r\n            ret[key] = states[i].toBoolean();\r\n        }\r\n        else if (val === 'number' || typeof val === 'number') {\r\n            ret[key] = states[i].toNumber();\r\n        }\r\n        else if (val === 'bigint' || typeof val === 'bigint') {\r\n            ret[key] = states[i].toBigInt();\r\n        }\r\n        else if (val === 'string') {\r\n            ret[key] = states[i].toString();\r\n        }\r\n        else {\r\n            ret[key] = states[i].toHex();\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.deserializeState = deserializeState;\r\n//# sourceMappingURL=serializer.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ABICoder = exports.FunctionCall = void 0;\r\nconst ts_optchain_1 = require(\"ts-optchain\");\r\nconst utils_1 = require(\"./utils\");\r\nconst scryptTypes_1 = require(\"./scryptTypes\");\r\nconst compilerWrapper_1 = require(\"./compilerWrapper\");\r\nfunction escapeRegExp(stringToGoIntoTheRegex) {\r\n    return stringToGoIntoTheRegex.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\r\nclass FunctionCall {\r\n    constructor(methodName, params, binding) {\r\n        this.methodName = methodName;\r\n        this.params = params;\r\n        this.args = [];\r\n        if (binding.lockingScriptASM === undefined && binding.unlockingScriptASM === undefined) {\r\n            throw new Error('param binding.lockingScriptASM & binding.unlockingScriptASM cannot both be empty');\r\n        }\r\n        this.contract = binding.contract;\r\n        this.args = Object.getPrototypeOf(this.contract).constructor.abi.filter((entity) => {\r\n            if ('constructor' === methodName) {\r\n                return entity.type === 'constructor';\r\n            }\r\n            return entity.name === methodName;\r\n        }).map((entity) => {\r\n            return entity.params.map((param, index) => {\r\n                return {\r\n                    name: param.name,\r\n                    type: param.type,\r\n                    value: params[index]\r\n                };\r\n            });\r\n        }).flat(1);\r\n        if (binding.lockingScriptASM) {\r\n            this._lockingScriptAsm = binding.lockingScriptASM;\r\n        }\r\n        if (binding.unlockingScriptASM) {\r\n            this._unlockingScriptAsm = binding.unlockingScriptASM;\r\n        }\r\n    }\r\n    get unlockingScript() {\r\n        return this._unlockingScriptAsm === undefined ? undefined : utils_1.bsv.Script.fromASM(this._unlockingScriptAsm);\r\n    }\r\n    get lockingScript() {\r\n        return this._lockingScriptAsm === undefined ? undefined : utils_1.bsv.Script.fromASM(this._lockingScriptAsm);\r\n    }\r\n    init(asmVarValues) {\r\n        for (const key in asmVarValues) {\r\n            const val = asmVarValues[key];\r\n            const re = new RegExp(`\\\\$${key}`, 'g');\r\n            this._lockingScriptAsm = this._lockingScriptAsm.replace(re, val);\r\n        }\r\n    }\r\n    toASM() {\r\n        if (this.lockingScript) {\r\n            return this.lockingScript.toASM();\r\n        }\r\n        else {\r\n            return this.unlockingScript.toASM();\r\n        }\r\n    }\r\n    toString() {\r\n        return this.toHex();\r\n    }\r\n    toScript() {\r\n        return utils_1.bsv.Script.fromASM(this.toASM());\r\n    }\r\n    toHex() {\r\n        return this.toScript().toHex();\r\n    }\r\n    genLaunchConfigFile(txContext) {\r\n        const constructorArgs = this.contract.scriptedConstructor.params;\r\n        const pubFuncArgs = this.params;\r\n        const pubFunc = this.methodName;\r\n        const name = `Debug ${Object.getPrototypeOf(this.contract).constructor.contractName}`;\r\n        const program = `${Object.getPrototypeOf(this.contract).constructor.file}`;\r\n        const asmArgs = this.contract.asmArgs || {};\r\n        const dataPart = this.contract.dataPart ? this.contract.dataPart.toASM() : '';\r\n        const txCtx = Object.assign({}, this.contract.txContext || {}, txContext || {}, { opReturn: dataPart });\r\n        return utils_1.genLaunchConfigFile(constructorArgs, pubFuncArgs, pubFunc, name, program, txCtx, asmArgs);\r\n    }\r\n    verify(txContext) {\r\n        if (this.unlockingScript) {\r\n            const result = this.contract.run_verify(this.unlockingScript.toASM(), txContext);\r\n            if (!result.success) {\r\n                const debugUrl = this.genLaunchConfigFile(txContext);\r\n                if (debugUrl && utils_1.printDebugUri()) {\r\n                    result.error = result.error + `\\t[Launch Debugger](${debugUrl.replace(/file:/i, 'scryptlaunch:')})\\n`;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return {\r\n            success: false,\r\n            error: 'verification failed, missing unlockingScript'\r\n        };\r\n    }\r\n}\r\nexports.FunctionCall = FunctionCall;\r\nclass ABICoder {\r\n    constructor(abi, alias) {\r\n        this.abi = abi;\r\n        this.alias = alias;\r\n    }\r\n    encodeConstructorCall(contract, asmTemplate, ...args) {\r\n        const constructorABI = this.abi.filter(entity => entity.type === compilerWrapper_1.ABIEntityType.CONSTRUCTOR)[0];\r\n        const cParams = ts_optchain_1.oc(constructorABI).params([]);\r\n        if (args.length !== cParams.length) {\r\n            throw new Error(`wrong number of arguments for #constructor, expected ${cParams.length} but got ${args.length}`);\r\n        }\r\n        // handle array type\r\n        const cParams_ = [];\r\n        const args_ = [];\r\n        cParams.forEach((param, index) => {\r\n            const arg = args[index];\r\n            const finalType = utils_1.resolveType(this.alias, param.type);\r\n            if (utils_1.isArrayType(finalType)) {\r\n                const [elemTypeName, arraySizes] = utils_1.arrayTypeAndSize(finalType);\r\n                if (Array.isArray(arg)) {\r\n                    if (utils_1.checkArray(arg, [elemTypeName, arraySizes])) {\r\n                        // flattern array\r\n                        utils_1.flatternArray(arg, param.name, finalType).forEach((e, idx) => {\r\n                            cParams_.push({ name: e.name, type: e.type });\r\n                            args_.push(e.value);\r\n                        });\r\n                    }\r\n                    else {\r\n                        throw new Error(`constructor ${index}-th parameter should be ${finalType}`);\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error(`constructor ${index}-th parameter should be ${finalType}`);\r\n                }\r\n            }\r\n            else if (utils_1.isStructType(finalType)) {\r\n                const argS = arg;\r\n                if (finalType != argS.finalType) {\r\n                    throw new Error(`expect struct ${param.type} but got struct ${argS.type}`);\r\n                }\r\n                utils_1.flatternStruct(argS, param.name).forEach(v => {\r\n                    cParams_.push({ name: `${v.name}`, type: v.type });\r\n                    args_.push(v.value);\r\n                });\r\n            }\r\n            else {\r\n                cParams_.push(param);\r\n                args_.push(arg);\r\n            }\r\n        });\r\n        let lsASM = asmTemplate;\r\n        cParams_.forEach((param, index) => {\r\n            if (!asmTemplate.includes(`$${param.name}`)) {\r\n                throw new Error(`abi constructor params mismatch with args provided: missing ${param.name} in ASM tempalte`);\r\n            }\r\n            const re = new RegExp(escapeRegExp(`$${param.name}`), 'g');\r\n            lsASM = lsASM.replace(re, this.encodeParam(args_[index], param));\r\n        });\r\n        return new FunctionCall('constructor', args, { contract, lockingScriptASM: lsASM });\r\n    }\r\n    encodeConstructorCallFromASM(contract, lsASM) {\r\n        return new FunctionCall('constructor', [], { contract, lockingScriptASM: lsASM });\r\n    }\r\n    encodePubFunctionCall(contract, name, args) {\r\n        for (const entity of this.abi) {\r\n            if (entity.name === name) {\r\n                if (entity.params.length !== args.length) {\r\n                    throw new Error(`wrong number of arguments for #${name}, expected ${entity.params.length} but got ${args.length}`);\r\n                }\r\n                let asm = this.encodeParams(args, entity.params);\r\n                if (this.abi.length > 2 && entity.index !== undefined) {\r\n                    // selector when there are multiple public functions\r\n                    const pubFuncIndex = entity.index;\r\n                    asm += ` ${utils_1.int2Asm(pubFuncIndex.toString())}`;\r\n                }\r\n                return new FunctionCall(name, args, { contract, unlockingScriptASM: asm });\r\n            }\r\n        }\r\n        throw new Error(`no function named '${name}' found in abi`);\r\n    }\r\n    encodeParams(args, paramsEntitys) {\r\n        return args.map((arg, i) => this.encodeParam(arg, paramsEntitys[i])).join(' ');\r\n    }\r\n    encodeParamArray(args, arrayParm) {\r\n        if (args.length === 0) {\r\n            throw new Error('Empty array not allowed');\r\n        }\r\n        const t = typeof args[0];\r\n        if (!args.every(arg => typeof arg === t)) {\r\n            throw new Error('Array arguments are not of the same type');\r\n        }\r\n        const finalType = utils_1.resolveType(this.alias, arrayParm.type);\r\n        const [elemTypeName, arraySizes] = utils_1.arrayTypeAndSize(finalType);\r\n        if (utils_1.checkArray(args, [elemTypeName, arraySizes])) {\r\n            return utils_1.flatternArray(args, arrayParm.name, finalType).map(arg => {\r\n                return this.encodeParam(arg.value, { name: arg.name, type: arg.type });\r\n            }).join(' ');\r\n        }\r\n        else {\r\n            throw new Error(`checkArray ${arrayParm.type} fail`);\r\n        }\r\n    }\r\n    encodeParam(arg, paramEntity) {\r\n        const finalType = utils_1.resolveType(this.alias, paramEntity.type);\r\n        if (utils_1.isArrayType(finalType)) {\r\n            if (Array.isArray(arg)) {\r\n                return this.encodeParamArray(arg, paramEntity);\r\n            }\r\n            else {\r\n                const scryptType = utils_1.typeOfArg(arg);\r\n                throw new Error(`expect param ${paramEntity.name} as ${finalType} but got ${scryptType}`);\r\n            }\r\n        }\r\n        if (utils_1.isStructType(finalType)) {\r\n            if (scryptTypes_1.Struct.isStruct(arg)) {\r\n                const argS = arg;\r\n                if (finalType != argS.finalType) {\r\n                    throw new Error(`expect struct ${paramEntity.type} but got struct ${argS.type}`);\r\n                }\r\n            }\r\n            else {\r\n                const scryptType = arg.type;\r\n                throw new Error(`expect param ${paramEntity.name} as struct ${utils_1.getStructNameByType(paramEntity.type)} but got ${scryptType}`);\r\n            }\r\n        }\r\n        const scryptType = utils_1.typeOfArg(arg);\r\n        if (scryptType != finalType) {\r\n            throw new Error(`wrong argument type, expected ${finalType} or ${paramEntity.type} but got ${scryptType}`);\r\n        }\r\n        const typeofArg = typeof arg;\r\n        if (typeofArg === 'boolean') {\r\n            arg = new scryptTypes_1.Bool(arg);\r\n        }\r\n        if (typeofArg === 'number') {\r\n            arg = new scryptTypes_1.Int(arg);\r\n        }\r\n        if (typeofArg === 'bigint') {\r\n            arg = new scryptTypes_1.Int(arg);\r\n        }\r\n        return arg.toASM();\r\n    }\r\n}\r\nexports.ABICoder = ABICoder;\r\n//# sourceMappingURL=abi.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.printDebugUri = exports.resolveType = exports.genLaunchConfigFile = exports.newCall = exports.compileContract = exports.getCIScryptc = exports.isEmpty = exports.readFileByLine = exports.typeOfArg = exports.flatternStruct = exports.flatternArray = exports.subscript = exports.checkArray = exports.subArrayType = exports.toLiteralArrayType = exports.arrayTypeAndSize = exports.arrayTypeAndSizeStr = exports.checkStruct = exports.findStructByType = exports.getStructNameByType = exports.isArrayType = exports.isStructType = exports.findStructByName = exports.literal2Asm = exports.uri2path = exports.path2uri = exports.bin2num = exports.num2bin = exports.getPreimage = exports.toHex = exports.signTx = exports.getValidatedHexString = exports.hexStringToBytes = exports.bytesToHexString = exports.bytes2Literal = exports.literal2ScryptType = exports.parseLiteral = exports.intValue2hex = exports.int2Value = exports.int2Asm = exports.bool2Asm = exports.DEFAULT_SIGHASH_TYPE = exports.DEFAULT_FLAGS = exports.bsv = void 0;\r\nconst url_1 = require(\"url\");\r\nconst scryptTypes_1 = require(\"./scryptTypes\");\r\nconst compilerWrapper_1 = require(\"./compilerWrapper\");\r\nconst bsv = require(\"bsv\");\r\nexports.bsv = bsv;\r\nconst fs = require(\"fs\");\r\nconst path_1 = require(\"path\");\r\nconst minimist = require(\"minimist\");\r\nconst os_1 = require(\"os\");\r\nconst BN = bsv.crypto.BN;\r\nconst Interp = bsv.Script.Interpreter;\r\nexports.DEFAULT_FLAGS = \r\n//Interp.SCRIPT_VERIFY_P2SH | Interp.SCRIPT_VERIFY_CLEANSTACK | // no longer applies now p2sh is deprecated: cleanstack only applies to p2sh\r\nInterp.SCRIPT_ENABLE_MAGNETIC_OPCODES | Interp.SCRIPT_ENABLE_MONOLITH_OPCODES | // TODO: to be removed after upgrade to bsv 2.0\r\n    Interp.SCRIPT_VERIFY_STRICTENC |\r\n    Interp.SCRIPT_ENABLE_SIGHASH_FORKID | Interp.SCRIPT_VERIFY_LOW_S | Interp.SCRIPT_VERIFY_NULLFAIL |\r\n    Interp.SCRIPT_VERIFY_DERSIG |\r\n    Interp.SCRIPT_VERIFY_MINIMALDATA | Interp.SCRIPT_VERIFY_NULLDUMMY |\r\n    Interp.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\r\n    Interp.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY | Interp.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\r\nexports.DEFAULT_SIGHASH_TYPE = bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_FORKID;\r\nfunction bool2Asm(str) {\r\n    if (str === 'true') {\r\n        return 'OP_TRUE';\r\n    }\r\n    if (str === 'false') {\r\n        return 'OP_FALSE';\r\n    }\r\n    throw new Error(`invalid str '${str}' to convert to bool`);\r\n}\r\nexports.bool2Asm = bool2Asm;\r\n/**\r\n * decimal or hex int to little-endian signed magnitude\r\n */\r\nfunction int2Asm(str) {\r\n    if (/^(-?\\d+)$/.test(str) || /^0x([0-9a-fA-F]+)$/.test(str)) {\r\n        const number = str.startsWith('0x') ? new BN(str.substring(2), 16) : new BN(str, 10);\r\n        if (number.eqn(-1)) {\r\n            return 'OP_1NEGATE';\r\n        }\r\n        if (number.gten(0) && number.lten(16)) {\r\n            return 'OP_' + str;\r\n        }\r\n        const m = number.toSM({ endian: 'little' });\r\n        return m.toString('hex');\r\n    }\r\n    else {\r\n        throw new Error(`invalid str '${str}' to convert to int`);\r\n    }\r\n}\r\nexports.int2Asm = int2Asm;\r\n/**\r\n * decimal int or hex str to number or bigint\r\n */\r\nfunction int2Value(str) {\r\n    if (/^(-?\\d+)$/.test(str) || /^0x([0-9a-fA-F]+)$/.test(str)) {\r\n        const number = str.startsWith('0x') ? new BN(str.substring(2), 16) : new BN(str, 10);\r\n        if (number.toNumber() < Number.MAX_SAFE_INTEGER) {\r\n            return number.toNumber();\r\n        }\r\n        else {\r\n            return BigInt(str);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(`invalid str '${str}' to convert to int`);\r\n    }\r\n}\r\nexports.int2Value = int2Value;\r\nfunction intValue2hex(val) {\r\n    let hex = val.toString(16);\r\n    if (hex.length % 2 === 1) {\r\n        hex = '0' + hex;\r\n    }\r\n    return hex;\r\n}\r\nexports.intValue2hex = intValue2hex;\r\nfunction parseLiteral(l) {\r\n    // bool\r\n    if (l === 'false') {\r\n        return ['OP_FALSE', false, scryptTypes_1.VariableType.BOOL];\r\n    }\r\n    if (l === 'true') {\r\n        return ['OP_TRUE', true, scryptTypes_1.VariableType.BOOL];\r\n    }\r\n    // hex int\r\n    let m = /^(0x[0-9a-fA-F]+)$/.exec(l);\r\n    if (m) {\r\n        return [int2Asm(m[1]), int2Value(m[1]), scryptTypes_1.VariableType.INT];\r\n    }\r\n    // decimal int\r\n    m = /^(-?\\d+)$/.exec(l);\r\n    if (m) {\r\n        return [int2Asm(m[1]), int2Value(m[1]), scryptTypes_1.VariableType.INT];\r\n    }\r\n    // bytes\r\n    // note: special handling of empty bytes b''\r\n    m = /^b'([\\da-fA-F]*)'$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        const asm = value === '' ? 'OP_0' : value;\r\n        return [asm, value, scryptTypes_1.VariableType.BYTES];\r\n    }\r\n    // PrivKey\r\n    // 1) decimal int\r\n    m = /^PrivKey\\((-?\\d+)\\)$/.exec(l);\r\n    if (m) {\r\n        return [m[1], int2Value(m[1]), scryptTypes_1.VariableType.PRIVKEY];\r\n    }\r\n    // 2) hex int\r\n    m = /^PrivKey\\((0x[0-9a-fA-F]+)\\)$/.exec(l);\r\n    if (m) {\r\n        return [m[1], int2Value(m[1]), scryptTypes_1.VariableType.PRIVKEY];\r\n    }\r\n    // PubKey\r\n    m = /^PubKey\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.PUBKEY];\r\n    }\r\n    // Sig\r\n    m = /^Sig\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.SIG];\r\n    }\r\n    // Ripemd160\r\n    m = /^Ripemd160\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.RIPEMD160];\r\n    }\r\n    // Sha1\r\n    m = /^Sha1\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.SHA1];\r\n    }\r\n    // Sha256\r\n    m = /^Sha256\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.SHA256];\r\n    }\r\n    // SigHashType\r\n    m = /^SigHashType\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const bn = new BN(getValidatedHexString(m[1]), 16);\r\n        return [bn.toString('hex', 2), bn.toNumber(), scryptTypes_1.VariableType.SIGHASHTYPE];\r\n    }\r\n    // SigHashPreimage\r\n    m = /^SigHashPreimage\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.SIGHASHPREIMAGE];\r\n    }\r\n    // OpCodeType\r\n    m = /^OpCodeType\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\r\n    if (m) {\r\n        const value = getValidatedHexString(m[1]);\r\n        return [value, value, scryptTypes_1.VariableType.OPCODETYPE];\r\n    }\r\n    // Struct\r\n    m = /^\\{([\\w(){}[\\],\\s']+)\\}$/.exec(l);\r\n    if (m) {\r\n        // we use object to constructor a struct, no use literal, so here we return empty\r\n        return ['', '', scryptTypes_1.VariableType.STRUCT];\r\n    }\r\n    throw new Error(`<${l}> cannot be cast to ASM format, only sCrypt native types supported`);\r\n}\r\nexports.parseLiteral = parseLiteral;\r\n/**\r\n * convert literals to Scrypt Type\r\n */\r\nfunction literal2ScryptType(l) {\r\n    const [asm, value, type] = parseLiteral(l);\r\n    switch (type) {\r\n        case scryptTypes_1.VariableType.BOOL:\r\n            return new scryptTypes_1.Bool(value);\r\n        case scryptTypes_1.VariableType.INT:\r\n            return new scryptTypes_1.Int(value);\r\n        case scryptTypes_1.VariableType.BYTES:\r\n            return new scryptTypes_1.Bytes(value);\r\n        case scryptTypes_1.VariableType.PRIVKEY:\r\n            return new scryptTypes_1.PrivKey(value);\r\n        case scryptTypes_1.VariableType.PUBKEY:\r\n            return new scryptTypes_1.PubKey(value);\r\n        case scryptTypes_1.VariableType.SIG:\r\n            return new scryptTypes_1.Sig(value);\r\n        case scryptTypes_1.VariableType.RIPEMD160:\r\n            return new scryptTypes_1.Ripemd160(value);\r\n        case scryptTypes_1.VariableType.SHA1:\r\n            return new scryptTypes_1.Sha1(value);\r\n        case scryptTypes_1.VariableType.SHA256:\r\n            return new scryptTypes_1.Sha256(value);\r\n        case scryptTypes_1.VariableType.SIGHASHTYPE:\r\n            return new scryptTypes_1.SigHashType(value);\r\n        case scryptTypes_1.VariableType.SIGHASHPREIMAGE:\r\n            return new scryptTypes_1.SigHashPreimage(value);\r\n        case scryptTypes_1.VariableType.OPCODETYPE:\r\n            return new scryptTypes_1.OpCodeType(value);\r\n        default:\r\n            throw new Error(`<${l}> cannot be cast to ScryptType, only sCrypt native types supported`);\r\n    }\r\n}\r\nexports.literal2ScryptType = literal2ScryptType;\r\nfunction bytes2Literal(bytearray, type) {\r\n    switch (type) {\r\n        case 'bool':\r\n            return BN.fromBuffer(bytearray, { endian: 'little' }) > 0 ? 'true' : 'false';\r\n        case 'int':\r\n            return BN.fromSM(bytearray, { endian: 'little' }).toString();\r\n        case 'bytes':\r\n            return `b'${bytesToHexString(bytearray)}'`;\r\n        default:\r\n            return `b'${bytesToHexString(bytearray)}'`;\r\n    }\r\n}\r\nexports.bytes2Literal = bytes2Literal;\r\nfunction bytesToHexString(bytearray) {\r\n    return bytearray.reduce(function (o, c) { return o += ('0' + (c & 0xFF).toString(16)).slice(-2); }, '');\r\n}\r\nexports.bytesToHexString = bytesToHexString;\r\nfunction hexStringToBytes(hex) {\r\n    getValidatedHexString(hex);\r\n    return hex.split('')\r\n        .reduce(function (o, c, i) {\r\n        if (i % 2 === 0) {\r\n            o.push(c);\r\n        }\r\n        else {\r\n            o[o.length - 1] += c;\r\n        }\r\n        return o;\r\n    }, new Array())\r\n        .map(b => parseInt(b, 16));\r\n}\r\nexports.hexStringToBytes = hexStringToBytes;\r\nfunction getValidatedHexString(hex, allowEmpty = true) {\r\n    const ret = hex.trim();\r\n    if (ret.length < 1 && !allowEmpty) {\r\n        throw new Error('can\\'t be empty string');\r\n    }\r\n    if (ret.length % 2) {\r\n        throw new Error(`${ret} should have even length`);\r\n    }\r\n    if (ret.length > 0 && !(/^[\\da-f]+$/i.test(ret))) {\r\n        throw new Error(`${ret} should only contain [0-9] or characters [a-fA-F]`);\r\n    }\r\n    return ret;\r\n}\r\nexports.getValidatedHexString = getValidatedHexString;\r\nfunction signTx(tx, privateKey, lockingScriptASM, inputAmount, inputIndex = 0, sighashType = exports.DEFAULT_SIGHASH_TYPE, flags = exports.DEFAULT_FLAGS) {\r\n    if (!tx) {\r\n        throw new Error('param tx can not be empty');\r\n    }\r\n    if (!privateKey) {\r\n        throw new Error('param privateKey can not be empty');\r\n    }\r\n    if (!lockingScriptASM) {\r\n        throw new Error('param lockingScriptASM can not be empty');\r\n    }\r\n    if (!inputAmount) {\r\n        throw new Error('param inputAmount can not be empty');\r\n    }\r\n    return bsv.Transaction.sighash.sign(tx, privateKey, sighashType, inputIndex, bsv.Script.fromASM(lockingScriptASM), new bsv.crypto.BN(inputAmount), flags).toTxFormat();\r\n}\r\nexports.signTx = signTx;\r\nfunction toHex(x) {\r\n    return x.toString('hex');\r\n}\r\nexports.toHex = toHex;\r\nfunction getPreimage(tx, inputLockingScriptASM, inputAmount, inputIndex = 0, sighashType = exports.DEFAULT_SIGHASH_TYPE, flags = exports.DEFAULT_FLAGS) {\r\n    const preimageBuf = bsv.Transaction.sighash.sighashPreimage(tx, sighashType, inputIndex, bsv.Script.fromASM(inputLockingScriptASM), new bsv.crypto.BN(inputAmount), flags);\r\n    return new scryptTypes_1.SigHashPreimage(preimageBuf.toString('hex'));\r\n}\r\nexports.getPreimage = getPreimage;\r\n// Converts a number into a sign-magnitude representation of certain size as a string\r\n// Throws if the number cannot be accommodated\r\n// Often used to append numbers to OP_RETURN, which are read in contracts\r\n// Support Bigint\r\nfunction num2bin(n, dataLen) {\r\n    const num = new BN(n);\r\n    if (num.eqn(0)) {\r\n        return '00'.repeat(dataLen);\r\n    }\r\n    const s = num.toSM({ endian: 'little' }).toString('hex');\r\n    const byteLen_ = s.length / 2;\r\n    if (byteLen_ > dataLen) {\r\n        throw new Error(`${n} cannot fit in ${dataLen} byte[s]`);\r\n    }\r\n    if (byteLen_ === dataLen) {\r\n        return s;\r\n    }\r\n    const paddingLen = dataLen - byteLen_;\r\n    const lastByte = s.substring(s.length - 2);\r\n    const rest = s.substring(0, s.length - 2);\r\n    let m = parseInt(lastByte, 16);\r\n    if (num.isNeg) {\r\n        // reset sign bit\r\n        m &= 0x7F;\r\n    }\r\n    let mHex = m.toString(16);\r\n    if (mHex.length < 2) {\r\n        mHex = '0' + mHex;\r\n    }\r\n    const padding = n > 0 ? '00'.repeat(paddingLen) : '00'.repeat(paddingLen - 1) + '80';\r\n    return rest + mHex + padding;\r\n}\r\nexports.num2bin = num2bin;\r\n//Support Bigint\r\nfunction bin2num(s) {\r\n    const hex = s.toString('hex');\r\n    const lastByte = hex.substring(hex.length - 2);\r\n    const rest = hex.substring(0, hex.length - 2);\r\n    const m = parseInt(lastByte, 16);\r\n    const n = m & 0x7F;\r\n    let nHex = n.toString(16);\r\n    if (nHex.length < 2) {\r\n        nHex = '0' + nHex;\r\n    }\r\n    //Support negative number\r\n    let bn = BN.fromHex(rest + nHex, { endian: 'little' });\r\n    if (m >> 7) {\r\n        bn = bn.neg();\r\n    }\r\n    return BigInt(bn);\r\n}\r\nexports.bin2num = bin2num;\r\nfunction path2uri(path) {\r\n    return url_1.pathToFileURL(path).toString();\r\n}\r\nexports.path2uri = path2uri;\r\nfunction uri2path(uri) {\r\n    return url_1.fileURLToPath(uri);\r\n}\r\nexports.uri2path = uri2path;\r\n/**\r\n * @deprecated\r\n * convert literals to script ASM format\r\n */\r\nfunction literal2Asm(l) {\r\n    const [asm, _, type] = parseLiteral(l);\r\n    return [asm, type];\r\n}\r\nexports.literal2Asm = literal2Asm;\r\nfunction findStructByName(name, s) {\r\n    return s.find(s => {\r\n        return s.name == name;\r\n    });\r\n}\r\nexports.findStructByName = findStructByName;\r\nfunction isStructType(type) {\r\n    return /^struct\\s(\\w+)\\s\\{\\}$/.test(type);\r\n}\r\nexports.isStructType = isStructType;\r\n// test struct Token {}[3], int[3], st.b.c[3]\r\nfunction isArrayType(type) {\r\n    return /^\\w[\\w.\\s{}]+(\\[[\\w.]+\\])+$/.test(type);\r\n}\r\nexports.isArrayType = isArrayType;\r\nfunction getStructNameByType(type) {\r\n    const m = /^struct\\s(\\w+)\\s\\{\\}$/.exec(type.trim());\r\n    if (m) {\r\n        return m[1];\r\n    }\r\n    return '';\r\n}\r\nexports.getStructNameByType = getStructNameByType;\r\nfunction findStructByType(type, s) {\r\n    const name = getStructNameByType(type);\r\n    if (name) {\r\n        return findStructByName(name, s);\r\n    }\r\n    return undefined;\r\n}\r\nexports.findStructByType = findStructByType;\r\nfunction checkStruct(s, arg, typeResolver) {\r\n    s.params.forEach(p => {\r\n        const member = arg.memberByKey(p.name);\r\n        const finalType = typeOfArg(member);\r\n        const paramFinalType = typeResolver(p.type);\r\n        if (finalType === 'undefined') {\r\n            throw new Error(`argument of type struct ${s.name} missing member ${p.name}`);\r\n        }\r\n        else if (finalType != paramFinalType) {\r\n            if (isArrayType(paramFinalType)) {\r\n                const [elemTypeName, arraySize] = arrayTypeAndSize(paramFinalType);\r\n                if (Array.isArray(arg.value[p.name])) {\r\n                    if (!checkArray(arg.value[p.name], [elemTypeName, arraySize])) {\r\n                        throw new Error(`checkArray fail, struct ${s.name} property ${p.name} should be ${paramFinalType}`);\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error(`struct ${s.name} property ${p.name} should be ${paramFinalType}`);\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(`wrong argument type, expected ${paramFinalType} but got ${finalType}`);\r\n            }\r\n        }\r\n    });\r\n    const members = s.params.map(p => p.name);\r\n    arg.getMembers().forEach(key => {\r\n        if (!members.includes(key)) {\r\n            throw new Error(`${key} is not a member of struct ${s.name}`);\r\n        }\r\n    });\r\n}\r\nexports.checkStruct = checkStruct;\r\n/**\r\n * return eg. int[N][N][4] => ['int', [\"N\",\"N\",\"4\"]]\r\n * @param arrayTypeName\r\n */\r\nfunction arrayTypeAndSizeStr(arrayTypeName) {\r\n    const arraySizes = [];\r\n    [...arrayTypeName.matchAll(/\\[([\\w.]+)\\]+/g)].map(match => {\r\n        arraySizes.push(match[1]);\r\n    });\r\n    const group = arrayTypeName.split('[');\r\n    const elemTypeName = group[0];\r\n    return [elemTypeName, arraySizes];\r\n}\r\nexports.arrayTypeAndSizeStr = arrayTypeAndSizeStr;\r\n/**\r\n * return eg. int[2][3][4] => ['int', [2,3,4]]\r\n * @param arrayTypeName  eg. int[2][3][4]\r\n */\r\nfunction arrayTypeAndSize(arrayTypeName) {\r\n    const [elemTypeName, arraySizes] = arrayTypeAndSizeStr(arrayTypeName);\r\n    return [elemTypeName, arraySizes.map(size => parseInt(size))];\r\n}\r\nexports.arrayTypeAndSize = arrayTypeAndSize;\r\nfunction toLiteralArrayType(elemTypeName, sizes) {\r\n    return [elemTypeName, sizes.map(size => `[${size}]`).join('')].join('');\r\n}\r\nexports.toLiteralArrayType = toLiteralArrayType;\r\n/**\r\n * return eg. int[2][3][4] => int[3][4]\r\n * @param arrayTypeName  eg. int[2][3][4]\r\n */\r\nfunction subArrayType(arrayTypeName) {\r\n    const [elemTypeName, sizes] = arrayTypeAndSize(arrayTypeName);\r\n    return toLiteralArrayType(elemTypeName, sizes.slice(1));\r\n}\r\nexports.subArrayType = subArrayType;\r\nfunction checkArray(args, arrayInfo) {\r\n    const [elemTypeName, arraySizes] = arrayInfo;\r\n    if (!Array.isArray(args)) {\r\n        return false;\r\n    }\r\n    const len = arraySizes[0];\r\n    if (!len) {\r\n        return false;\r\n    }\r\n    if (args.length !== len) {\r\n        return false;\r\n    }\r\n    if (!args.every(arg => {\r\n        if (Array.isArray(arg)) {\r\n            return checkArray(arg, [elemTypeName, arraySizes.slice(1)]);\r\n        }\r\n        else {\r\n            const scryptType = typeOfArg(arg);\r\n            return scryptType === elemTypeName && arraySizes.length == 1;\r\n        }\r\n    })) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.checkArray = checkArray;\r\nfunction subscript(index, arraySizes) {\r\n    if (arraySizes.length == 1) {\r\n        return `[${index}]`;\r\n    }\r\n    else if (arraySizes.length > 1) {\r\n        const subArraySizes = arraySizes.slice(1);\r\n        const offset = subArraySizes.reduce(function (acc, val) { return acc * val; }, 1);\r\n        return `[${Math.floor(index / offset)}]${subscript(index % offset, subArraySizes)}`;\r\n    }\r\n}\r\nexports.subscript = subscript;\r\nfunction flatternArray(arg, name, finalType) {\r\n    if (!Array.isArray(arg)) {\r\n        throw new Error('flatternArray only work on array');\r\n    }\r\n    const [elemTypeName, arraySizes] = arrayTypeAndSize(finalType);\r\n    return arg.map((item, index) => {\r\n        if (typeof item === 'boolean') {\r\n            item = new scryptTypes_1.Bool(item);\r\n        }\r\n        else if (typeof item === 'number') {\r\n            item = new scryptTypes_1.Int(item);\r\n        }\r\n        else if (typeof item === 'bigint') {\r\n            item = new scryptTypes_1.Int(item);\r\n        }\r\n        else if (Array.isArray(item)) {\r\n            return flatternArray(item, `${name}[${index}]`, subArrayType(finalType));\r\n        }\r\n        else if (scryptTypes_1.Struct.isStruct(item)) {\r\n            return flatternStruct(item, `${name}[${index}]`);\r\n        }\r\n        else {\r\n            item = item;\r\n        }\r\n        return {\r\n            value: item,\r\n            name: `${name}${subscript(index, arraySizes)}`,\r\n            type: elemTypeName\r\n        };\r\n    }).flat(Infinity);\r\n}\r\nexports.flatternArray = flatternArray;\r\nfunction flatternStruct(arg, name) {\r\n    if (scryptTypes_1.Struct.isStruct(arg)) {\r\n        const argS = arg;\r\n        const keys = argS.getMembers();\r\n        return keys.map(key => {\r\n            let member = argS.memberByKey(key);\r\n            if (scryptTypes_1.Struct.isStruct(member)) {\r\n                return flatternStruct(member, `${name}.${key}`);\r\n            }\r\n            else if (Array.isArray(member)) {\r\n                const finalType = argS.getMemberAstFinalType(key);\r\n                return flatternArray(member, `${name}.${key}`, finalType);\r\n            }\r\n            else {\r\n                member = member;\r\n                return {\r\n                    value: member,\r\n                    name: `${name}.${key}`,\r\n                    type: member.type\r\n                };\r\n            }\r\n        }).flat(Infinity);\r\n    }\r\n    else {\r\n        throw new Error(`${arg} should be struct`);\r\n    }\r\n}\r\nexports.flatternStruct = flatternStruct;\r\nfunction typeOfArg(arg) {\r\n    if (arg instanceof scryptTypes_1.ScryptType) {\r\n        const scryptType = arg.finalType;\r\n        return scryptType;\r\n    }\r\n    const typeofArg = typeof arg;\r\n    if (typeofArg === 'boolean') {\r\n        return 'bool';\r\n    }\r\n    if (typeofArg === 'number') {\r\n        return 'int';\r\n    }\r\n    if (typeofArg === 'bigint') {\r\n        return 'int';\r\n    }\r\n    return typeof arg;\r\n}\r\nexports.typeOfArg = typeOfArg;\r\nfunction readFileByLine(path, index) {\r\n    let result = '';\r\n    fs.readFileSync(path, 'utf8').split(/\\r?\\n/).every(function (line, i) {\r\n        if (i === (index - 1)) {\r\n            result = line;\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n    return result;\r\n}\r\nexports.readFileByLine = readFileByLine;\r\nfunction isEmpty(obj) {\r\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\r\n}\r\nexports.isEmpty = isEmpty;\r\nfunction findCompiler(directory) {\r\n    if (!directory) {\r\n        directory = path_1.dirname(module.parent.filename);\r\n    }\r\n    const compiler = path_1.resolve(directory, 'compiler');\r\n    if (fs.existsSync(compiler) && fs.statSync(compiler).isDirectory()) {\r\n        const scryptc = path_1.join(compiler, '..', compilerWrapper_1.getPlatformScryptc());\r\n        return scryptc;\r\n    }\r\n    const parent = path_1.resolve(directory, '..');\r\n    if (parent === directory) {\r\n        return undefined;\r\n    }\r\n    return findCompiler(parent);\r\n}\r\nfunction getCIScryptc() {\r\n    const scryptc = findCompiler(__dirname);\r\n    return fs.existsSync(scryptc) ? scryptc : undefined;\r\n}\r\nexports.getCIScryptc = getCIScryptc;\r\nfunction compileContract(file, out) {\r\n    console.log(`Compiling contract ${file} ...`);\r\n    if (!fs.existsSync(file)) {\r\n        throw (`file ${file} not exists!`);\r\n    }\r\n    const argv = minimist(process.argv.slice(2));\r\n    let scryptc = argv.scryptc;\r\n    if (argv.ci || !scryptc) {\r\n        scryptc = getCIScryptc();\r\n    }\r\n    const result = compilerWrapper_1.compile({ path: file }, {\r\n        desc: true, debug: true, sourceMap: true, outputDir: out ? out : path_1.join(__dirname, '../out'),\r\n        cmdPrefix: scryptc\r\n    });\r\n    return result;\r\n}\r\nexports.compileContract = compileContract;\r\nfunction newCall(Cls, args) {\r\n    return new (Function.prototype.bind.apply(Cls, [null].concat(args)));\r\n}\r\nexports.newCall = newCall;\r\nfunction genLaunchConfigFile(constructorArgs, pubFuncArgs, pubFunc, name, program, txContext, asmArgs) {\r\n    // some desc without sourceMap will not have file property.\r\n    if (!program) {\r\n        return '';\r\n    }\r\n    const debugConfig = {\r\n        type: 'scrypt',\r\n        request: 'launch',\r\n        internalConsoleOptions: 'openOnSessionStart',\r\n        name: name,\r\n        program: program,\r\n        constructorArgs: constructorArgs,\r\n        pubFunc: pubFunc,\r\n        pubFuncArgs: pubFuncArgs\r\n    };\r\n    const debugTxContext = {};\r\n    if (!isEmpty(txContext)) {\r\n        const tx = txContext.tx || '';\r\n        const inputIndex = txContext.inputIndex || 0;\r\n        const inputSatoshis = txContext.inputSatoshis || 0;\r\n        if (tx) {\r\n            Object.assign(debugTxContext, { hex: tx.toString(), inputIndex, inputSatoshis });\r\n        }\r\n        if (txContext.opReturn) {\r\n            Object.assign(debugTxContext, { opReturn: txContext.opReturn });\r\n        }\r\n    }\r\n    if (!isEmpty(asmArgs)) {\r\n        Object.assign(debugConfig, { asmArgs: asmArgs });\r\n    }\r\n    if (!isEmpty(debugTxContext)) {\r\n        Object.assign(debugConfig, { txContext: debugTxContext });\r\n    }\r\n    const launch = {\r\n        version: '0.2.0',\r\n        configurations: [debugConfig]\r\n    };\r\n    if (typeof process !== 'object') {\r\n        console.error('DebugConfiguration', JSON.stringify(launch));\r\n        return '';\r\n    }\r\n    const filename = `${name}-launch.json`;\r\n    const file = path_1.join(fs.mkdtempSync(`${os_1.tmpdir()}${path_1.sep}sCrypt.`), filename);\r\n    fs.writeFileSync(file, JSON.stringify(launch, (key, value) => (typeof value === 'bigint'\r\n        ? value.toString()\r\n        : value // return everything else unchanged\r\n    ), 2));\r\n    return path2uri(file);\r\n}\r\nexports.genLaunchConfigFile = genLaunchConfigFile;\r\n/***\r\n * resolve type\r\n */\r\nfunction resolveType(alias, type) {\r\n    if (isArrayType(type)) {\r\n        const [elemTypeName, sizes] = arrayTypeAndSize(type);\r\n        return toLiteralArrayType(resolveType(alias, elemTypeName), sizes);\r\n    }\r\n    if (isStructType(type)) {\r\n        return resolveType(alias, getStructNameByType(type));\r\n    }\r\n    const a = alias.find(a => {\r\n        return a.name === type;\r\n    });\r\n    if (a) {\r\n        return resolveType(alias, a.type);\r\n    }\r\n    else {\r\n        if (scryptTypes_1.BasicType.indexOf(type) > -1) {\r\n            return type;\r\n        }\r\n        else { // should be struct if it is not basic type\r\n            return `struct ${type} {}`;\r\n        }\r\n    }\r\n}\r\nexports.resolveType = resolveType;\r\nfunction printDebugUri() {\r\n    const argv = minimist(process.argv.slice(2));\r\n    return argv.debugUri === true;\r\n}\r\nexports.printDebugUri = printDebugUri;\r\n//# sourceMappingURL=utils.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar contract_1 = require(\"./contract\");\r\nObject.defineProperty(exports, \"buildContractClass\", { enumerable: true, get: function () { return contract_1.buildContractClass; } });\r\nObject.defineProperty(exports, \"buildTypeClasses\", { enumerable: true, get: function () { return contract_1.buildTypeClasses; } });\r\nObject.defineProperty(exports, \"buildStructsClass\", { enumerable: true, get: function () { return contract_1.buildStructsClass; } });\r\nObject.defineProperty(exports, \"buildTypeResolver\", { enumerable: true, get: function () { return contract_1.buildTypeResolver; } });\r\nvar compilerWrapper_1 = require(\"./compilerWrapper\");\r\nObject.defineProperty(exports, \"compile\", { enumerable: true, get: function () { return compilerWrapper_1.compile; } });\r\nObject.defineProperty(exports, \"getStructDeclaration\", { enumerable: true, get: function () { return compilerWrapper_1.getStructDeclaration; } });\r\nObject.defineProperty(exports, \"getABIDeclaration\", { enumerable: true, get: function () { return compilerWrapper_1.getABIDeclaration; } });\r\nObject.defineProperty(exports, \"ABIEntityType\", { enumerable: true, get: function () { return compilerWrapper_1.ABIEntityType; } });\r\nvar utils_1 = require(\"./utils\");\r\nObject.defineProperty(exports, \"bsv\", { enumerable: true, get: function () { return utils_1.bsv; } });\r\nObject.defineProperty(exports, \"signTx\", { enumerable: true, get: function () { return utils_1.signTx; } });\r\nObject.defineProperty(exports, \"toHex\", { enumerable: true, get: function () { return utils_1.toHex; } });\r\nObject.defineProperty(exports, \"getPreimage\", { enumerable: true, get: function () { return utils_1.getPreimage; } });\r\nObject.defineProperty(exports, \"num2bin\", { enumerable: true, get: function () { return utils_1.num2bin; } });\r\nObject.defineProperty(exports, \"bin2num\", { enumerable: true, get: function () { return utils_1.bin2num; } });\r\nObject.defineProperty(exports, \"bool2Asm\", { enumerable: true, get: function () { return utils_1.bool2Asm; } });\r\nObject.defineProperty(exports, \"int2Asm\", { enumerable: true, get: function () { return utils_1.int2Asm; } });\r\nObject.defineProperty(exports, \"parseLiteral\", { enumerable: true, get: function () { return utils_1.parseLiteral; } });\r\nObject.defineProperty(exports, \"bytes2Literal\", { enumerable: true, get: function () { return utils_1.bytes2Literal; } });\r\nObject.defineProperty(exports, \"bytesToHexString\", { enumerable: true, get: function () { return utils_1.bytesToHexString; } });\r\nObject.defineProperty(exports, \"getValidatedHexString\", { enumerable: true, get: function () { return utils_1.getValidatedHexString; } });\r\nObject.defineProperty(exports, \"literal2ScryptType\", { enumerable: true, get: function () { return utils_1.literal2ScryptType; } });\r\nObject.defineProperty(exports, \"literal2Asm\", { enumerable: true, get: function () { return utils_1.literal2Asm; } });\r\nObject.defineProperty(exports, \"findStructByType\", { enumerable: true, get: function () { return utils_1.findStructByType; } });\r\nObject.defineProperty(exports, \"findStructByName\", { enumerable: true, get: function () { return utils_1.findStructByName; } });\r\nObject.defineProperty(exports, \"isStructType\", { enumerable: true, get: function () { return utils_1.isStructType; } });\r\nObject.defineProperty(exports, \"isArrayType\", { enumerable: true, get: function () { return utils_1.isArrayType; } });\r\nObject.defineProperty(exports, \"compileContract\", { enumerable: true, get: function () { return utils_1.compileContract; } });\r\nObject.defineProperty(exports, \"arrayTypeAndSize\", { enumerable: true, get: function () { return utils_1.arrayTypeAndSize; } });\r\nObject.defineProperty(exports, \"newCall\", { enumerable: true, get: function () { return utils_1.newCall; } });\r\nObject.defineProperty(exports, \"getStructNameByType\", { enumerable: true, get: function () { return utils_1.getStructNameByType; } });\r\nObject.defineProperty(exports, \"genLaunchConfigFile\", { enumerable: true, get: function () { return utils_1.genLaunchConfigFile; } });\r\nObject.defineProperty(exports, \"subArrayType\", { enumerable: true, get: function () { return utils_1.subArrayType; } });\r\nvar serializer_1 = require(\"./serializer\");\r\nObject.defineProperty(exports, \"serializeState\", { enumerable: true, get: function () { return serializer_1.serializeState; } });\r\nObject.defineProperty(exports, \"deserializeState\", { enumerable: true, get: function () { return serializer_1.deserializeState; } });\r\nObject.defineProperty(exports, \"STATE_LEN_2BYTES\", { enumerable: true, get: function () { return serializer_1.STATE_LEN_2BYTES; } });\r\nObject.defineProperty(exports, \"STATE_LEN_4BYTES\", { enumerable: true, get: function () { return serializer_1.STATE_LEN_4BYTES; } });\r\nvar scryptTypes_1 = require(\"./scryptTypes\");\r\nObject.defineProperty(exports, \"Int\", { enumerable: true, get: function () { return scryptTypes_1.Int; } });\r\nObject.defineProperty(exports, \"Bool\", { enumerable: true, get: function () { return scryptTypes_1.Bool; } });\r\nObject.defineProperty(exports, \"Bytes\", { enumerable: true, get: function () { return scryptTypes_1.Bytes; } });\r\nObject.defineProperty(exports, \"PrivKey\", { enumerable: true, get: function () { return scryptTypes_1.PrivKey; } });\r\nObject.defineProperty(exports, \"PubKey\", { enumerable: true, get: function () { return scryptTypes_1.PubKey; } });\r\nObject.defineProperty(exports, \"Sig\", { enumerable: true, get: function () { return scryptTypes_1.Sig; } });\r\nObject.defineProperty(exports, \"Ripemd160\", { enumerable: true, get: function () { return scryptTypes_1.Ripemd160; } });\r\nObject.defineProperty(exports, \"Sha1\", { enumerable: true, get: function () { return scryptTypes_1.Sha1; } });\r\nObject.defineProperty(exports, \"Sha256\", { enumerable: true, get: function () { return scryptTypes_1.Sha256; } });\r\nObject.defineProperty(exports, \"SigHashType\", { enumerable: true, get: function () { return scryptTypes_1.SigHashType; } });\r\nObject.defineProperty(exports, \"SigHashPreimage\", { enumerable: true, get: function () { return scryptTypes_1.SigHashPreimage; } });\r\nObject.defineProperty(exports, \"OpCodeType\", { enumerable: true, get: function () { return scryptTypes_1.OpCodeType; } });\r\nObject.defineProperty(exports, \"ScryptType\", { enumerable: true, get: function () { return scryptTypes_1.ScryptType; } });\r\nObject.defineProperty(exports, \"Struct\", { enumerable: true, get: function () { return scryptTypes_1.Struct; } });\r\nObject.defineProperty(exports, \"VariableType\", { enumerable: true, get: function () { return scryptTypes_1.VariableType; } });\r\nvar web3_1 = require(\"./web3\");\r\nObject.defineProperty(exports, \"web3\", { enumerable: true, get: function () { return web3_1.web3; } });\r\nObject.defineProperty(exports, \"wallet\", { enumerable: true, get: function () { return web3_1.wallet; } });\r\nObject.defineProperty(exports, \"LocalWallet\", { enumerable: true, get: function () { return web3_1.LocalWallet; } });\r\nObject.defineProperty(exports, \"NetWork\", { enumerable: true, get: function () { return web3_1.NetWork; } });\r\nObject.defineProperty(exports, \"SignType\", { enumerable: true, get: function () { return web3_1.SignType; } });\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar web3_1 = require(\"./web3\");\r\nObject.defineProperty(exports, \"web3\", { enumerable: true, get: function () { return web3_1.web3; } });\r\nvar wallet_1 = require(\"./wallet\");\r\nObject.defineProperty(exports, \"wallet\", { enumerable: true, get: function () { return wallet_1.wallet; } });\r\nObject.defineProperty(exports, \"NetWork\", { enumerable: true, get: function () { return wallet_1.NetWork; } });\r\nObject.defineProperty(exports, \"SignType\", { enumerable: true, get: function () { return wallet_1.SignType; } });\r\nvar localwallet_1 = require(\"./localwallet\");\r\nObject.defineProperty(exports, \"LocalWallet\", { enumerable: true, get: function () { return localwallet_1.LocalWallet; } });\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.web3 = void 0;\r\nconst contract_1 = require(\"../contract\");\r\nconst wallet_1 = require(\"./wallet\");\r\nconst utils_1 = require(\"../utils\");\r\nconst axios_1 = require(\"axios\");\r\nconst WEB3_VERSION = '0.0.1';\r\nconst FEE_PER_KB = 500;\r\nconst FEE = 1000;\r\nclass web3 {\r\n    static setWallet(wallet) {\r\n        web3.wallet = wallet;\r\n    }\r\n    static version() {\r\n        return WEB3_VERSION;\r\n    }\r\n    static loadContract(url) {\r\n        return axios_1.default.get(url, {\r\n            timeout: 10000\r\n        }).then(res => {\r\n            if (res.status === 200) {\r\n                return {\r\n                    contractClass: contract_1.buildContractClass(res.data),\r\n                    types: contract_1.buildTypeClasses(res.data)\r\n                };\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n    static async buildDeployTx(contract, amountInContract) {\r\n        return web3.buildUnsignDeployTx(contract, amountInContract).then(async (tx) => {\r\n            const sig = await web3.wallet.signTx(tx, 0, wallet_1.SignType.ALL);\r\n            tx.inputs[0].script = sig;\r\n            return tx;\r\n        });\r\n    }\r\n    static async appendPayInput(tx, payAmount) {\r\n        const changeAddress = await web3.wallet.changeAddress();\r\n        return web3.wallet.queryUtxos(payAmount, {\r\n            purpose: 'change'\r\n        }).then(async (utxos) => {\r\n            if (utxos.length === 0) {\r\n                throw new Error('no utxos');\r\n            }\r\n            const inputIndex = tx.inputs.length;\r\n            tx.inputs.push({\r\n                utxo: utxos[0],\r\n                script: '',\r\n                sequence: 0\r\n            });\r\n            const changeAmount = utxos[0].satoshis - payAmount - FEE;\r\n            tx.outputs.push({\r\n                script: utils_1.bsv.Script.buildPublicKeyHashOut(changeAddress).toHex(),\r\n                satoshis: changeAmount\r\n            });\r\n            const sig = await web3.wallet.signTx(tx, inputIndex, wallet_1.SignType.ALL);\r\n            tx.inputs[inputIndex].script = sig;\r\n            return tx;\r\n        });\r\n    }\r\n    static async buildUnsignDeployTx(contract, amountInContract) {\r\n        const changeAddress = await web3.wallet.changeAddress();\r\n        return web3.wallet.queryUtxos(amountInContract, {\r\n            purpose: 'change'\r\n        }).then(async (utxos) => {\r\n            if (utxos.length === 0) {\r\n                throw new Error('no utxos');\r\n            }\r\n            const tx = {\r\n                inputs: [],\r\n                outputs: []\r\n            };\r\n            const input = {\r\n                utxo: utxos[0],\r\n                sequence: 0,\r\n                script: ''\r\n            };\r\n            tx.inputs.push(input);\r\n            tx.outputs.push({\r\n                script: contract.lockingScript.toHex(),\r\n                satoshis: amountInContract\r\n            });\r\n            const changeAmount = utxos[0].satoshis - amountInContract - FEE;\r\n            tx.outputs.push({\r\n                script: utils_1.bsv.Script.buildPublicKeyHashOut(changeAddress).toHex(),\r\n                satoshis: changeAmount\r\n            });\r\n            return tx;\r\n        });\r\n    }\r\n    static getPreimage(tx, inputIndex = 0, sigHashType = wallet_1.SignType.ALL) {\r\n        const bsvTx = wallet_1.wallet.toBsvTx(tx);\r\n        return utils_1.getPreimage(bsvTx, utils_1.bsv.Script.fromHex(tx.inputs[inputIndex].utxo.script).toASM(), tx.inputs[inputIndex].utxo.satoshis, inputIndex, sigHashType);\r\n    }\r\n    static async sendRawTx(rawTx) {\r\n        return web3.wallet.sendTx(rawTx);\r\n    }\r\n    static async sendTx(tx) {\r\n        return web3.wallet.sendTx(wallet_1.wallet.toHexBsvTx(tx));\r\n    }\r\n    static async deploy(contract, amountInContract) {\r\n        return web3.buildDeployTx(contract, amountInContract).then(async (tx) => {\r\n            return web3.sendTx(tx);\r\n        });\r\n    }\r\n    static call(calls, utxos, outputs) {\r\n        return null;\r\n    }\r\n}\r\nexports.web3 = web3;\r\nconsole.log(`hello, this is scryptlib web3 ${WEB3_VERSION}.`);\r\n//# sourceMappingURL=web3.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LocalWallet = void 0;\r\nconst wallet_1 = require(\"./wallet\");\r\nconst utils_1 = require(\"../utils\");\r\nconst wutils_1 = require(\"./wutils\");\r\nconst axios_1 = require(\"axios\");\r\nclass LocalWallet extends wallet_1.wallet {\r\n    constructor(network, key) {\r\n        super(network);\r\n        this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == wallet_1.NetWork.Testnet ? 'test' : 'main'}`;\r\n        this.privKey = key ? new utils_1.bsv.PrivateKey.fromWIF(key) : new utils_1.bsv.PrivateKey.fromRandom(network);\r\n    }\r\n    requestAccount(name, permissions) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async balance() {\r\n        const { data: balance } = await axios_1.default.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/balance`, {\r\n            timeout: 5000\r\n        });\r\n        return balance.confirmed + balance.unconfirmed;\r\n    }\r\n    async signTx(tx, inputIndex, sigHashType, onlySig = false) {\r\n        const tx_ = wallet_1.wallet.toBsvTx(tx);\r\n        const utxo = tx.inputs[inputIndex].utxo;\r\n        if (onlySig) {\r\n            return utils_1.signTx(tx_, this.privKey, tx_.inputs[inputIndex].output.script.toASM(), tx_.inputs[inputIndex].output.satoshisBN, inputIndex, sigHashType);\r\n        }\r\n        return wutils_1.signInput(this.privKey, tx_, inputIndex, sigHashType, utxo);\r\n    }\r\n    async sendTx(rawTx) {\r\n        // 1 second per KB\r\n        const size = Math.max(1, rawTx.length / 2 / 1024); //KB\r\n        const time = Math.max(10000, 1000 * size);\r\n        const { data: txid } = await axios_1.default.post(`${this.API_PREFIX}/tx/raw`, {\r\n            txhex: rawTx\r\n        }, {\r\n            timeout: time\r\n        });\r\n        return txid;\r\n    }\r\n    async queryUtxos(minAmount, options) {\r\n        return axios_1.default.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/unspent`, {\r\n            timeout: 10000\r\n        }).then(res => {\r\n            return res.data.map(utxo => {\r\n                return {\r\n                    txHash: utxo.tx_hash,\r\n                    outputIndex: utxo.tx_pos,\r\n                    satoshis: utxo.value,\r\n                    script: utils_1.bsv.Script.buildPublicKeyHashOut(this.privKey.toAddress()).toHex(),\r\n                };\r\n            });\r\n        });\r\n    }\r\n    changeAddress(options) {\r\n        return new Promise(resolve => resolve(this.privKey.toAddress() + ''));\r\n    }\r\n    publicKey(options) {\r\n        return new Promise(resolve => resolve(utils_1.toHex(this.privKey.publicKey)));\r\n    }\r\n}\r\nexports.LocalWallet = LocalWallet;\r\n//# sourceMappingURL=localwallet.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.signInput = void 0;\r\nconst utils_1 = require(\"../utils\");\r\nfunction signInput(privateKey, tx, inputIndex, sigHashType, utxo) {\r\n    tx.inputs[inputIndex].output = new utils_1.bsv.Transaction.Output({\r\n        script: utxo.script,\r\n        satoshis: utxo.satoshis\r\n    });\r\n    const sig = new utils_1.bsv.Transaction.Signature({\r\n        publicKey: privateKey.publicKey,\r\n        prevTxId: utxo.txHash,\r\n        outputIndex: utxo.outputIndex,\r\n        inputIndex,\r\n        signature: utils_1.bsv.Transaction.Sighash.sign(tx, privateKey, sigHashType, inputIndex, tx.inputs[inputIndex].output.script, tx.inputs[inputIndex].output.satoshisBN),\r\n        sigtype: sigHashType,\r\n    });\r\n    return utils_1.bsv.Script.buildPublicKeyHashIn(sig.publicKey, sig.signature.toDER(), sig.sigtype).toHex();\r\n}\r\nexports.signInput = signInput;\r\n//# sourceMappingURL=wutils.js.map","import React from 'react';\n\nconst Square = props => (\n  <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n    {props.value ? props.value.label : props.value}\n  </button>\n);\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n    const winnerClass =\n      this.props.winnerSquares &&\n      (this.props.winnerSquares[0] === i ||\n        this.props.winnerSquares[1] === i ||\n        this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","\nimport { web3 } from 'scryptlib';\nimport sha1 from 'js-sha1';\nimport { EventEmitter } from 'events';\n\nclass Server extends EventEmitter {\n    player = ''\n    privKey = ''\n    constructor() {\n        super();\n        var urlParams = new URLSearchParams(window.location.search);\n        this.player = urlParams.get('player') || \"alice\";\n        const self = this;\n        window.addEventListener('storage', (e) => {\n            // When local storage changes, dump the list to\n            // the console.\n            console.log('on storage change ' + this.player, e)\n\n\n            if (e.key === \"game\") {\n                try {\n                    let gameJson = window.localStorage.getItem('game');\n                    if (gameJson && gameJson !== null) {\n                        let game = JSON.parse(gameJson);\n\n                        if (game.event) {\n\n                            self.emit(game.event, game)\n                        }\n\n                    }\n                } catch (e) {\n                    console.error(' storage change error', e)\n                }\n            }\n\n        }, false);\n\n    }\n\n    existGamebySelf = () => {\n\n        let game = window.localStorage.getItem('game');\n\n        if (game && game !== null) {\n            game = JSON.parse(game);\n            if (game.creator && game.creator === this.player) {\n                return game;\n            }\n        }\n\n        return undefined;\n    }\n\n    existGamebyOther = () => {\n\n        let game = window.localStorage.getItem('game');\n\n        if (game && game !== null) {\n            game = JSON.parse(game);\n            if (game.creator && game.creator !== this.player) {\n                return game;\n            }\n        }\n\n        return undefined;\n    }\n\n\n    deleteGame = () => {\n        console.log('deleteGame');\n        window.localStorage.removeItem('game');\n    }\n\n\n    createGame = (game) => {\n        game.event = 'createGame';\n        console.log('createGame', game);\n        return window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n\n    JoinGame = (game) => {\n        game.event = 'JoinGame';\n        console.log('JoinGame', game);\n        window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n    saveGame = (game, event) => {\n        game.event = event;\n        console.log('saveGame', game);\n        window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n\n\n    getGame = () => {\n        let gameJson = window.localStorage.getItem('game');\n        if (gameJson && gameJson !== null) {\n            return JSON.parse(gameJson);\n        }\n        return undefined\n    }\n\n\n\n    getIdentity = () => (this.player);\n\n\n    savePrivateKey = (key) => {\n        this.privKey = key;\n        window.localStorage.setItem(this.player, key);\n    }\n\n\n    getPrivateKey = () => {\n        if (this.player) {\n            this.privKey = window.localStorage.getItem(this.player);\n        }\n\n        return this.privKey;\n    }\n\n\n    addJoinListener(cb) {\n        console.log('addJoinListener');\n        this.on('JoinGame', cb);\n    }\n\n\n    removeJoinListener(cb) {\n        console.log('removeJoinListener');\n        this.off('JoinGame', cb)\n    }\n\n\n    addAliceSignListener(cb) {\n        console.log('addAliceSignListener');\n        this.on('AliceSign', cb);\n    }\n\n    removeAliceSignListener(cb) {\n        console.log('removeAliceSignListener');\n        this.off('AliceSign', cb)\n    }\n\n\n    addDeployedListener(cb) {\n        console.log('addDeployedListener');\n        this.on('deployed', cb);\n    }\n\n\n    removeDeployedListener(cb) {\n        console.log('removeDeployedListener');\n        this.off('deployed', cb)\n    }\n\n\n    addNextListener(cb) {\n        console.log('addNextListener');\n        this.on('next', cb);\n    }\n\n    removeNextListener(cb) {\n        console.log('removeNextListener');\n        this.off('next', cb)\n    }\n}\n\nconst server = new Server();\n\nexport default server;","import React from 'react';\nimport Board from './Board';\nimport { web3, bsv, PubKey, toHex, Input, Bytes, Sig, SignType, getPreimage, wallet } from 'scryptlib';\nimport server from './Server';\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  xIsNext: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n    console.log('Game constructor', props.game)\n\n    if (props.game && props.game.gameState) {\n      this.state = props.game.gameState;\n    } else {\n      this.state = initialState;\n    }\n  }\n\n\n\n  componentWillReceiveProps(nextProps) {\n    console.log('componentWillReceiveProps', nextProps)\n    if (nextProps.game && nextProps.game.gameState) {\n      this.setState(nextProps.game.gameState);\n    }\n\n  }\n\n\n  async componentDidMount() {\n    console.log('componentDidMount', this.props)\n\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n\n  async handleClick(i) {\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    squares[i] = { label: this.state.xIsNext ? 'X' : 'O' };\n\n    if (server.getIdentity() !== \"alice\" && this.state.xIsNext) {\n      console.error('now is alice turn')\n      return;\n    }\n\n    if (server.getIdentity() !== \"bob\" && !this.state.xIsNext) {\n      console.error('now is bob turn')\n      return;\n    }\n\n\n\n    let newState = (!this.state.xIsNext ? '00' : '01') + squares.map(square => {\n\n      if (square && square.label === 'X') {\n        return '01'\n      } else if (square && square.label === 'O') {\n        return '02'\n      } else {\n        return '00';\n      }\n    }).join('');\n\n    let newLockingScript = \"\";\n    let winner = calculateWinner(squares).winner;\n    if (winner) {\n      // winner is alice\n\n      let address = await web3.wallet.changeAddress();\n\n      newLockingScript = bsv.Script.buildPublicKeyHashOut(address).toHex()\n\n    } else {\n      newLockingScript = [this.props.contractInstance.codePart.toHex(), bsv.Script.fromASM(newState).toHex()].join('');\n    }\n\n\n    const FEE = 2000;\n\n    let tx = {\n      inputs: [{\n        utxo: this.props.game.lastUtxo,\n        sequence: 0,\n        script: \"\"\n      }],\n      outputs: [{\n        satoshis: this.props.game.lastUtxo.satoshis - FEE,\n        script: newLockingScript\n      }]\n    }\n\n\n    let preimage = web3.getPreimage(tx);\n\n    web3.wallet.signTx(tx, 0, SignType.ALL, true).then(sig => {\n\n      let unlockScript = this.props.contractInstance.move(i, new Sig(toHex(sig)), this.props.game.lastUtxo.satoshis - FEE, preimage).toHex();\n\n      tx.inputs[0].script = unlockScript;\n\n      web3.sendTx(tx).then(txid => {\n\n        squares[i].tx = txid;\n        let gameState = {\n          history: history.concat([\n            {\n              squares,\n              currentLocation: getLocation(i),\n              stepNumber: history.length,\n            },\n          ]),\n          xIsNext: !this.state.xIsNext,\n          currentStepNumber: history.length,\n        };\n\n        server.saveGame(Object.assign({}, this.props.game, {\n          gameState: gameState,\n          lastUtxo: {\n            txHash: txid,\n            outputIndex: 0,\n            satoshis: tx.outputs[0].satoshis,\n            script: tx.outputs[0].script\n          }\n        }), 'next')\n\n        this.setState(gameState);\n\n      })\n    })\n\n  }\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n\n\n    let status;\n    if (winner) {\n      status = `Winner ${winner.label === 'X' ? 'Alice' : 'Bob'}`;\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'Alice' : 'Bob'}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div> {status} </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\nimport { web3, LocalWallet, NetWork, bsv, PubKey, toHex, Tx, SignType } from 'scryptlib';\nimport server from './Server';\n\nfunction makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n\nfunction TitleBar(prop) {\n    const forceUpdate = React.useReducer(bool => !bool)[1];\n\n    const amountRef = useRef(null);\n\n    const onStart = (e) => {\n        let amount = parseInt(amountRef.current.value);\n\n        if (!isNaN(amount)) {\n            prop.startBet(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        prop.cancelBet();\n    }\n\n\n\n\n\n\n    useEffect(() => {\n\n    })\n\n    if (prop.started) {\n\n        return (\n            <div>\n                正在游戏\n                <a href={`https://test.whatsonchain.com/tx/${prop.game ? prop.game.deploy : \"\"}`} target=\"_blank\"> 下注合约</a>\n                <button className=\"cancel\" onClick={onCancel}>取消</button>\n            </div>\n        );\n    }\n    else if (server.existGamebySelf()) {\n        return (\n            <div>\n                等待对方加入游戏 ...\n                <a href={window.location.href + '?player=bob'} target=\"_blank\"> 加入</a>\n                <button className=\"cancel\" onClick={onCancel}>取消</button>\n            </div>\n        );\n\n    } else if (server.existGamebyOther()) {\n\n        return (\n            <div>\n                加入游戏...\n            </div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <label>金额:\n                    <input ref={amountRef} type=\"text\" name=\"amount\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>开始</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","\nimport * as QRCode from 'qrcode.react';\nimport { web3, LocalWallet, NetWork, bsv } from 'scryptlib';\nimport React, { useState, useEffect } from 'react';\n\nimport { useInterval, forceUpdate } from './hooks';\nimport server from './Server';\n\nconst Wallet = props => {\n\n    const [address, setAddress] = useState('')\n    const [balance, setBalance] = useState(0)\n\n    useEffect(() => {\n\n        if (web3.wallet) {\n            web3.wallet.changeAddress().then(address => {\n                setAddress(address)\n            })\n\n            web3.wallet.balance().then(balance => {\n                setBalance(balance)\n            })\n        } else if (server.getPrivateKey()) {\n            web3.setWallet(new LocalWallet(NetWork.Testnet, server.getPrivateKey()));\n            props.updateWallet()\n        }\n    });\n\n\n    useInterval(() => {\n\n        if (web3.wallet) {\n            web3.wallet.balance().then(balance => {\n                console.log('update balance ', balance)\n                setBalance(balance)\n            })\n        }\n\n    }, 5000);\n\n\n    const onChange = (e) => {\n\n        try {\n            const privateKey = new bsv.PrivateKey.fromWIF(e.currentTarget.value);\n\n            if (privateKey && privateKey.network.name === \"testnet\") {\n                web3.setWallet(new LocalWallet(NetWork.Testnet, e.currentTarget.value));\n\n                server.savePrivateKey(e.currentTarget.value);\n                props.updateWallet()\n            }\n        } catch (e) {\n            console.log('wallet onChange error', e)\n        }\n    };\n\n\n\n\n\n    if (web3.wallet) {\n        return <div className=\"wallet\">\n            <div>\n                <QRCode value={address}></QRCode>\n            </div>\n\n            <div className=\"\">\n                <label htmlFor=\"amount\">Address: {address} </label>\n            </div>\n\n            <div className=\"\">\n                <label htmlFor=\"amount\">Amount: </label>\n                <button id=\"amount\" name=\"amount\" >\n                    {balance}\n                </button>\n            </div>\n        </div>\n    } else {\n        return <div className=\"wallet\">\n            <label htmlFor=\"key\">create wallet:\n                        <input type=\"text\" name=\"key\" placeholder=\"Import your testnet Private Key\" onChange={onChange} />\n            </label>\n        </div>\n    }\n\n}\n\nexport default Wallet;\n\n\n","\nimport React, { useRef, useEffect } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    });\n\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n    }, [delay]);\n}\n","import './App.css';\nimport Game from './Game';\nimport React, { useState, useEffect } from 'react';\nimport TitleBar from './TitleBar';\nimport { web3, LocalWallet, NetWork, Bytes, PubKey, toHex, SignType, Input, newCall } from 'scryptlib';\nimport Wallet from './wallet';\n\nimport server from './Server';\n\n\n\nfunction App() {\n\n  const [started, updateStart] = useState(false);\n\n  const [contractInstance, updateContractInstance] = useState(null);\n\n  const forceUpdate = React.useReducer(bool => !bool)[1];\n\n  const startBet = async (amount) => {\n\n    //let tx = await web3.deploy(contractInstance, 10000);\n    console.log('startBet with amount', amount)\n\n    if (web3.wallet) {\n\n      //let tx = await web3.buildUnsignDeployTx(contractInstance, 10000);\n\n      let alicePubKey = await web3.wallet.publicKey();\n\n\n      server.createGame({\n        \"amount\": amount,\n        \"tx\": {\n          inputs: [],\n          outputs: []\n        },\n        \"name\": \"tic-tac-toe\",\n        \"alicePubKey\": alicePubKey,\n        \"bobPubKey\": \"\",\n        \"creator\": \"alice\",\n        \"player\": \"\",\n        \"date\": new Date()\n      })\n\n      forceUpdate();\n    }\n  }\n\n  const cancelBet = () => {\n\n    server.deleteGame();\n    updateStart(false)\n    forceUpdate();\n  }\n\n  const onBobJoin = async (game) => {\n\n\n    console.log('onBobJoin', game)\n\n\n    if (game.creator === \"alice\" && server.getIdentity() === \"alice\") {\n\n      let tx = await web3.appendPayInput(game.tx, game.amount);\n      game.tx = tx;\n\n\n      server.saveGame(game, 'AliceSign');\n\n    } else {\n      updateStart(true);\n    }\n  }\n\n\n  const onAliceSign = async (game) => {\n    //Alice SIGN\n\n    if (game.creator === \"alice\" && server.getIdentity() === \"bob\") {\n\n      console.log('onAliceSign', game)\n      let sig = await web3.wallet.signTx(game.tx, 0, SignType.ALL);\n      game.tx.inputs[0].script = sig;\n      web3.sendTx(game.tx).then((txid => {\n        game.lastUtxo = {\n          txHash: txid,\n          outputIndex: 0,\n          satoshis: game.tx.outputs[0].satoshis,\n          script: game.tx.outputs[0].script\n        };\n\n        game.deploy = txid;\n\n        server.saveGame(game, \"deployed\")\n        updateStart(true)\n      }))\n    }\n\n  }\n\n\n  const onDeployed = async (game) => {\n    //BOB SIGN\n    if (game.creator === \"alice\" && server.getIdentity() === \"alice\" && contractInstance === null) {\n      console.log('onDeployed', game)\n\n      fetchContract(game)\n      updateStart(true)\n    }\n  }\n\n\n  const onNext = async (game) => {\n    //BOB SIGN\n    console.log(\"onNext\", game)\n    forceUpdate();\n  }\n\n\n  async function fetchContract(game) {\n\n\n    if (contractInstance === null && game && game.bobPubKey && game.alicePubKey) {\n      let {\n        contractClass: TictactoeContractClass\n      } = await web3.loadContract(\"/tic-tac-toe/tictactoe_desc.json\");\n\n      let c = newCall(TictactoeContractClass, [new PubKey(toHex(game.alicePubKey)), new PubKey(toHex(game.bobPubKey))])\n      c.setDataPart(game.state ? game.state : '00000000000000000000');\n      console.log('fetchContract', c)\n      updateContractInstance(c);\n      return c;\n    }\n    console.log('fetchContract null')\n    return contractInstance\n  }\n\n\n  useEffect(() => {\n    let game = server.getGame();\n\n    if (game && game.lastUtxo) {\n      updateStart(true)\n    }\n\n\n\n    async function bobJoin(game) {\n\n      let bobPubKey = await web3.wallet.publicKey();\n\n      game = Object.assign(game, {\n        \"bobPubKey\": bobPubKey,\n        \"player\": \"Bob\"\n      })\n\n\n      let c = await fetchContract(game);\n\n      console.log('bobJoin fetchContract', c)\n      if (c != null) {\n        let tx = await web3.buildUnsignDeployTx(c, game.amount * 2);\n\n        server.JoinGame(Object.assign(game, {\n          \"tx\": tx\n        }))\n      }\n    }\n\n\n    if (server.getIdentity() === 'bob' && game && !game.deploy) {\n\n      bobJoin(game)\n\n    } else {\n      fetchContract(game);\n    }\n\n\n\n    server.addJoinListener(onBobJoin);\n    server.addAliceSignListener(onAliceSign);\n    server.addDeployedListener(onDeployed);\n    server.addNextListener(onNext)\n    return () => {\n\n      server.removeAliceSignListener(onAliceSign)\n      server.removeDeployedListener(onDeployed)\n      server.removeJoinListener(onBobJoin)\n      server.removeNextListener(onNext)\n    }\n\n  }, [contractInstance]);\n\n\n  console.log('render......', server.getGame())\n  return (\n    <div className=\"App\">\n      <Wallet updateWallet={() => {\n        console.log('updateWallet')\n        forceUpdate()\n      }}></Wallet>\n      <header className=\"App-header\">\n        <h2>\n          sCrypt dapp tic-tac-toe\n        </h2>\n\n        {\n          web3.wallet ? <div><TitleBar startBet={startBet} cancelBet={cancelBet} started={started} game={server.getGame()} /> <Game game={server.getGame()} contractInstance={contractInstance} /> </div> : <div> Please create wallet! </div>\n        }\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BasicScryptType = exports.BasicType = exports.VariableType = exports.Struct = exports.OpCodeType = exports.SigHashPreimage = exports.SigHashType = exports.SigHash = exports.Sha256 = exports.Sha1 = exports.Ripemd160 = exports.Sig = exports.PubKey = exports.PrivKey = exports.Bytes = exports.Bool = exports.Int = exports.ScryptType = exports.toScryptType = void 0;\r\nconst utils_1 = require(\"./utils\");\r\nfunction toScryptType(a) {\r\n    if (typeof a === 'number' || typeof a === 'bigint') {\r\n        return new Int(a);\r\n    }\r\n    else if (typeof a === 'boolean') {\r\n        return new Bool(a);\r\n    }\r\n    else if (a instanceof ScryptType) {\r\n        return a;\r\n    }\r\n    else {\r\n        throw `${a} cannot be convert to ScryptType`;\r\n    }\r\n}\r\nexports.toScryptType = toScryptType;\r\nclass ScryptType {\r\n    constructor(value) {\r\n        try {\r\n            this._value = value;\r\n            this._literal = this.toLiteral();\r\n            const [asm, _, scrType] = utils_1.parseLiteral(this._literal);\r\n            this._type = scrType;\r\n            this._asm = asm;\r\n        }\r\n        catch (error) {\r\n            throw new Error(`can't get type from ${this._literal}, ${error.message}`);\r\n        }\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    get finalType() {\r\n        if (this._typeResolver)\r\n            return this._typeResolver(this.type);\r\n        return this.type;\r\n    }\r\n    get literal() {\r\n        return this._literal;\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    toASM() {\r\n        return this._asm;\r\n    }\r\n    toJSON() {\r\n        return this.toLiteral();\r\n    }\r\n    toLiteral() {\r\n        return '';\r\n    }\r\n}\r\nexports.ScryptType = ScryptType;\r\nclass Int extends ScryptType {\r\n    constructor(intVal) {\r\n        super(intVal);\r\n    }\r\n    toLiteral() {\r\n        return this._value.toString();\r\n    }\r\n}\r\nexports.Int = Int;\r\nclass Bool extends ScryptType {\r\n    constructor(boolVal) {\r\n        super(boolVal);\r\n    }\r\n    toLiteral() {\r\n        return this._value.toString();\r\n    }\r\n}\r\nexports.Bool = Bool;\r\nclass Bytes extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `b'${utils_1.getValidatedHexString(this._value.toString())}'`;\r\n    }\r\n}\r\nexports.Bytes = Bytes;\r\nclass PrivKey extends ScryptType {\r\n    constructor(intVal) {\r\n        super(intVal);\r\n    }\r\n    toLiteral() {\r\n        const v = this._value;\r\n        return `PrivKey(0x${utils_1.intValue2hex(v)})`;\r\n    }\r\n}\r\nexports.PrivKey = PrivKey;\r\nclass PubKey extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `PubKey(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n}\r\nexports.PubKey = PubKey;\r\nclass Sig extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `Sig(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n}\r\nexports.Sig = Sig;\r\nclass Ripemd160 extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `Ripemd160(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n}\r\nexports.Ripemd160 = Ripemd160;\r\nclass Sha1 extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `Sha1(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n}\r\nexports.Sha1 = Sha1;\r\nclass Sha256 extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `Sha256(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n}\r\nexports.Sha256 = Sha256;\r\nvar SigHash;\r\n(function (SigHash) {\r\n    SigHash[SigHash[\"ALL\"] = 1] = \"ALL\";\r\n    SigHash[SigHash[\"NONE\"] = 2] = \"NONE\";\r\n    SigHash[SigHash[\"SINGLE\"] = 3] = \"SINGLE\";\r\n    SigHash[SigHash[\"FORKID\"] = 64] = \"FORKID\";\r\n    SigHash[SigHash[\"ANYONECANPAY\"] = 128] = \"ANYONECANPAY\";\r\n})(SigHash = exports.SigHash || (exports.SigHash = {}));\r\nclass SigHashType extends ScryptType {\r\n    constructor(intVal) {\r\n        super(intVal);\r\n    }\r\n    toLiteral() {\r\n        let hexStr = this._value.toString(16);\r\n        if (hexStr.length % 2) {\r\n            hexStr = '0' + hexStr;\r\n        }\r\n        return `SigHashType(b'${hexStr}')`;\r\n    }\r\n    toString() {\r\n        const types = [];\r\n        let value = this._value;\r\n        if ((value & SigHash.ANYONECANPAY) === SigHash.ANYONECANPAY) {\r\n            types.push('SigHash.ANYONECANPAY');\r\n            value = value - SigHash.ANYONECANPAY;\r\n        }\r\n        if ((value & SigHash.SINGLE) === SigHash.SINGLE) {\r\n            types.push('SigHash.SINGLE');\r\n            value = value - SigHash.SINGLE;\r\n        }\r\n        if ((value & SigHash.NONE) === SigHash.NONE) {\r\n            types.push('SigHash.NONE');\r\n            value = value - SigHash.NONE;\r\n        }\r\n        if ((value & SigHash.ALL) === SigHash.ALL) {\r\n            types.push('SigHash.ALL');\r\n            value = value - SigHash.ALL;\r\n        }\r\n        if ((value & SigHash.FORKID) === SigHash.FORKID) {\r\n            types.push('SigHash.FORKID');\r\n            value = value - SigHash.FORKID;\r\n        }\r\n        if (value === 0) {\r\n            return types.join(' | ');\r\n        }\r\n        throw new Error(`unknown sighash type value: ${this._value}`);\r\n    }\r\n}\r\nexports.SigHashType = SigHashType;\r\nclass SigHashPreimage extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n        this._buf = Buffer.from(bytesVal, 'hex');\r\n    }\r\n    getReader(buf) {\r\n        return new utils_1.bsv.encoding.BufferReader(buf);\r\n    }\r\n    // nVersion of the transaction\r\n    get nVersion() {\r\n        return this.getReader(this._buf.slice(0, 4)).readUInt32LE();\r\n    }\r\n    // hashPrevouts\r\n    get hashPrevouts() {\r\n        return this._buf.slice(4, 4 + 32).toString('hex');\r\n    }\r\n    // hashSequence\r\n    get hashSequence() {\r\n        return this._buf.slice(36, 36 + 32).toString('hex');\r\n    }\r\n    // outpoint\r\n    get outpoint() {\r\n        const buf = this._buf.slice(68, 68 + 32 + 4);\r\n        const hex = buf.toString('hex');\r\n        const index = this.getReader(buf.slice(32, 32 + 4)).readUInt32LE();\r\n        const hash = Buffer.from(buf.slice(0, 32)).reverse().toString('hex');\r\n        return {\r\n            hash,\r\n            index,\r\n            hex\r\n        };\r\n    }\r\n    // scriptCode of the input\r\n    get scriptCode() {\r\n        return this.getReader(this._buf.slice(104, this._buf.length - 52)).readVarLengthBuffer().toString('hex');\r\n    }\r\n    // value of the output spent by this input\r\n    get amount() {\r\n        return this.getReader(this._buf.slice(this._buf.length - 44 - 8, this._buf.length - 44)).readUInt32LE();\r\n    }\r\n    // nSequence of the input\r\n    get nSequence() {\r\n        return this.getReader(this._buf.slice(this._buf.length - 40 - 4, this._buf.length - 40)).readUInt32LE();\r\n    }\r\n    // hashOutputs\r\n    get hashOutputs() {\r\n        return this._buf.slice(this._buf.length - 8 - 32, this._buf.length - 8).toString('hex');\r\n    }\r\n    // nLocktime of the transaction\r\n    get nLocktime() {\r\n        return this.getReader(this._buf.slice(this._buf.length - 4 - 4, this._buf.length - 4)).readUInt32LE();\r\n    }\r\n    // sighash type of the signature\r\n    get sighashType() {\r\n        return this.getReader(this._buf.slice(this._buf.length - 4, this._buf.length)).readUInt32LE();\r\n    }\r\n    toString(format = 'hex') {\r\n        return this._buf.toString(format);\r\n    }\r\n    toLiteral() {\r\n        return `SigHashPreimage(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n    toJSONObject() {\r\n        return {\r\n            nVersion: this.nVersion,\r\n            hashPrevouts: this.hashPrevouts,\r\n            hashSequence: this.hashSequence,\r\n            outpoint: this.outpoint,\r\n            scriptCode: this.scriptCode,\r\n            amount: this.amount,\r\n            nSequence: this.nSequence,\r\n            hashOutputs: this.hashOutputs,\r\n            nLocktime: this.nLocktime,\r\n            sighashType: new SigHashType(this.sighashType).toString()\r\n        };\r\n    }\r\n}\r\nexports.SigHashPreimage = SigHashPreimage;\r\nclass OpCodeType extends ScryptType {\r\n    constructor(bytesVal) {\r\n        super(bytesVal);\r\n    }\r\n    toLiteral() {\r\n        return `OpCodeType(b'${utils_1.getValidatedHexString(this._value.toString())}')`;\r\n    }\r\n}\r\nexports.OpCodeType = OpCodeType;\r\nclass Struct extends ScryptType {\r\n    constructor(o) {\r\n        super(o);\r\n        this.sorted = false;\r\n    }\r\n    bind() {\r\n        const structAst = Object.getPrototypeOf(this).constructor.structAst;\r\n        utils_1.checkStruct(structAst, this, this._typeResolver);\r\n        const ordered = {};\r\n        const unordered = this.value;\r\n        Object.keys(this.value).sort((a, b) => {\r\n            return (structAst.params.findIndex(e => {\r\n                return e.name === a;\r\n            }) - structAst.params.findIndex(e => {\r\n                return e.name === b;\r\n            }));\r\n        }).forEach(function (key) {\r\n            ordered[key] = unordered[key];\r\n        });\r\n        this.sorted = true;\r\n        this._type = structAst.name;\r\n        this._value = ordered;\r\n    }\r\n    toASM() {\r\n        if (!this.sorted) {\r\n            throw 'unbinded Struct can\\'t call toASM';\r\n        }\r\n        this._asm = utils_1.flatternStruct(this, '').map(v => {\r\n            return v.value.toASM();\r\n        }).join(' ');\r\n        return this._asm;\r\n    }\r\n    /**\r\n     * @deprecated use  flatternStruct, see toASM\r\n     */\r\n    toArray() {\r\n        if (!this.sorted) {\r\n            throw 'unbinded Struct can\\'t call toArray';\r\n        }\r\n        const v = this.value;\r\n        return Object.keys(v).map((key) => {\r\n            if (v[key] instanceof ScryptType) {\r\n                return v[key];\r\n            }\r\n            else if (typeof v[key] === 'boolean') {\r\n                return new Bool(v[key]);\r\n            }\r\n            else if (typeof v[key] === 'number') {\r\n                return new Int(v[key]);\r\n            }\r\n            else if (typeof v[key] === 'bigint') {\r\n                return new Int(v[key]);\r\n            }\r\n        });\r\n    }\r\n    memberByIndex(index) {\r\n        if (!this.sorted) {\r\n            throw 'unbinded Struct can\\'t call memberByIndex';\r\n        }\r\n        const v = this.value;\r\n        return Object.keys(v)[index];\r\n    }\r\n    /**\r\n    * @deprecated use  getMemberFinalType\r\n    */\r\n    getMemberType(key) {\r\n        const v = this.value;\r\n        if (v[key] instanceof ScryptType) {\r\n            return v[key].type;\r\n        }\r\n        else if (typeof v[key] === 'boolean') {\r\n            return new Bool(v[key]).type;\r\n        }\r\n        else if (typeof v[key] === 'number') {\r\n            return new Int(v[key]).type;\r\n        }\r\n        else if (typeof v[key] === 'bigint') {\r\n            return new Int(v[key]).type;\r\n        }\r\n        else {\r\n            return typeof v[key];\r\n        }\r\n    }\r\n    /**\r\n     * Get the real member type of the structure\r\n     */\r\n    getMemberFinalType(key) {\r\n        const member = this.memberByKey(key);\r\n        return utils_1.typeOfArg(member);\r\n    }\r\n    /**\r\n     * Get the member type declared by the structure by structAst\r\n     */\r\n    getMemberAstFinalType(key) {\r\n        const structAst = Object.getPrototypeOf(this).constructor.structAst;\r\n        const paramEntity = structAst.params.find(p => {\r\n            return p.name === key;\r\n        });\r\n        if (!paramEntity) {\r\n            throw new Error(`${key} is member of struct ${structAst.name}`);\r\n        }\r\n        return this._typeResolver(paramEntity.type);\r\n    }\r\n    getMembers() {\r\n        const v = this.value;\r\n        return Object.keys(v);\r\n    }\r\n    memberByKey(key) {\r\n        const v = this.value;\r\n        if (v[key] instanceof ScryptType) {\r\n            return v[key];\r\n        }\r\n        else if (typeof v[key] === 'boolean') {\r\n            return new Bool(v[key]);\r\n        }\r\n        else if (typeof v[key] === 'number') {\r\n            return new Int(v[key]);\r\n        }\r\n        else if (typeof v[key] === 'bigint') {\r\n            return new Int(v[key]);\r\n        }\r\n        return v[key];\r\n    }\r\n    static arrayToLiteral(a) {\r\n        const al = a.map(i => {\r\n            if (Array.isArray(i)) {\r\n                return Struct.arrayToLiteral(i);\r\n            }\r\n            return toScryptType(i).toLiteral();\r\n        }).join(',');\r\n        return `[${al}]`;\r\n    }\r\n    toLiteral() {\r\n        const v = this.value;\r\n        const l = Object.keys(this.value).map(key => {\r\n            if (Array.isArray(v[key])) {\r\n                return Struct.arrayToLiteral(v[key]);\r\n            }\r\n            else {\r\n                return toScryptType(v[key]).toLiteral();\r\n            }\r\n        }).join(',');\r\n        return `{${l}}`;\r\n    }\r\n    toJSON() {\r\n        const v = this.value;\r\n        return Array.from(Object.keys(v)).reduce((obj, key) => {\r\n            if (v[key] instanceof ScryptType) {\r\n                if (Struct.isStruct(v[key])) {\r\n                    return Object.assign(obj, { [key]: v[key].toJSON() });\r\n                }\r\n                else if (Array.isArray(v[key])) {\r\n                    return Object.assign(obj, { [key]: JSON.stringify(v[key]) });\r\n                }\r\n                else {\r\n                    return Object.assign(obj, { [key]: v[key].toLiteral() });\r\n                }\r\n            }\r\n            else {\r\n                return Object.assign(obj, { [key]: v[key] });\r\n            }\r\n        }, {});\r\n    }\r\n    static isStruct(arg) {\r\n        return arg instanceof Struct;\r\n    }\r\n}\r\nexports.Struct = Struct;\r\nvar VariableType;\r\n(function (VariableType) {\r\n    VariableType[\"BOOL\"] = \"bool\";\r\n    VariableType[\"INT\"] = \"int\";\r\n    VariableType[\"BYTES\"] = \"bytes\";\r\n    VariableType[\"PUBKEY\"] = \"PubKey\";\r\n    VariableType[\"PRIVKEY\"] = \"PrivKey\";\r\n    VariableType[\"SIG\"] = \"Sig\";\r\n    VariableType[\"RIPEMD160\"] = \"Ripemd160\";\r\n    VariableType[\"SHA1\"] = \"Sha1\";\r\n    VariableType[\"SHA256\"] = \"Sha256\";\r\n    VariableType[\"SIGHASHTYPE\"] = \"SigHashType\";\r\n    VariableType[\"SIGHASHPREIMAGE\"] = \"SigHashPreimage\";\r\n    VariableType[\"OPCODETYPE\"] = \"OpCodeType\";\r\n    VariableType[\"STRUCT\"] = \"struct\";\r\n})(VariableType = exports.VariableType || (exports.VariableType = {}));\r\nexports.BasicType = Object.keys(VariableType).map(key => VariableType[key]);\r\nexports.BasicScryptType = {\r\n    [VariableType.BOOL]: Bool,\r\n    [VariableType.INT]: Int,\r\n    [VariableType.BYTES]: Bytes,\r\n    [VariableType.PUBKEY]: PubKey,\r\n    [VariableType.PRIVKEY]: PrivKey,\r\n    [VariableType.SIG]: Sig,\r\n    [VariableType.RIPEMD160]: Ripemd160,\r\n    [VariableType.SHA1]: Sha1,\r\n    [VariableType.SHA256]: Sha256,\r\n    [VariableType.SIGHASHTYPE]: SigHashType,\r\n    [VariableType.OPCODETYPE]: OpCodeType,\r\n    [VariableType.SIGHASHPREIMAGE]: SigHashPreimage\r\n};\r\n//# sourceMappingURL=scryptTypes.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.desc2CompileResult = exports.getDefaultScryptc = exports.getPlatformScryptc = exports.getStaticConstIntDeclaration = exports.getAliasDeclaration = exports.getStructDeclaration = exports.resolveArrayTypeWithConstInt = exports.getABIDeclaration = exports.compilerVersion = exports.compile = exports.ABIEntityType = exports.DebugModeTag = exports.CompileErrorType = void 0;\r\nconst path_1 = require(\"path\");\r\nconst child_process_1 = require(\"child_process\");\r\nconst fs_1 = require(\"fs\");\r\nconst ts_optchain_1 = require(\"ts-optchain\");\r\nconst os = require(\"os\");\r\nconst md5 = require(\"md5\");\r\nconst utils_1 = require(\"./utils\");\r\nconst compareVersions = require(\"compare-versions\");\r\nconst SYNTAX_ERR_REG = /(?<filePath>[^\\s]+):(?<line>\\d+):(?<column>\\d+):\\n([^\\n]+\\n){3}(unexpected (?<unexpected>[^\\n]+)\\nexpecting (?<expecting>[^\\n]+)|(?<message>[^\\n]+))/g;\r\nconst SEMANTIC_ERR_REG = /Error:(\\s|\\n)*(?<filePath>[^\\s]+):(?<line>\\d+):(?<column>\\d+):(?<line1>\\d+):(?<column1>\\d+):*\\n(?<message>[^\\n]+)\\n/g;\r\nconst INTERNAL_ERR_REG = /Internal error:(?<message>.+)/;\r\n//SOURCE_REG parser src eg: [0:6:3:8:4#Bar.constructor:0]\r\nconst SOURCE_REG = /^(?<fileIndex>-?\\d+):(?<line>\\d+):(?<col>\\d+):(?<endLine>\\d+):(?<endCol>\\d+)(#(?<tagStr>.+))?/;\r\n// see VERSIONLOG.md\r\nconst CURRENT_CONTRACT_DESCRIPTION_VERSION = 3;\r\nvar CompileErrorType;\r\n(function (CompileErrorType) {\r\n    CompileErrorType[\"SyntaxError\"] = \"SyntaxError\";\r\n    CompileErrorType[\"SemanticError\"] = \"SemanticError\";\r\n    CompileErrorType[\"InternalError\"] = \"InternalError\";\r\n})(CompileErrorType = exports.CompileErrorType || (exports.CompileErrorType = {}));\r\nvar DebugModeTag;\r\n(function (DebugModeTag) {\r\n    DebugModeTag[\"FuncStart\"] = \"F0\";\r\n    DebugModeTag[\"FuncEnd\"] = \"F1\";\r\n    DebugModeTag[\"LoopStart\"] = \"L0\";\r\n})(DebugModeTag = exports.DebugModeTag || (exports.DebugModeTag = {}));\r\nvar ABIEntityType;\r\n(function (ABIEntityType) {\r\n    ABIEntityType[\"FUNCTION\"] = \"function\";\r\n    ABIEntityType[\"CONSTRUCTOR\"] = \"constructor\";\r\n})(ABIEntityType = exports.ABIEntityType || (exports.ABIEntityType = {}));\r\nfunction compile(source, settings = {\r\n    asm: true,\r\n    debug: true,\r\n    optimize: false,\r\n}) {\r\n    const st = Date.now();\r\n    const sourcePath = source.path;\r\n    const srcDir = path_1.dirname(sourcePath);\r\n    const curWorkingDir = settings.cwd || srcDir;\r\n    const sourceFileName = path_1.basename(sourcePath);\r\n    const outputDir = settings.outputDir || srcDir;\r\n    const timeout = settings.timeout || 1200000;\r\n    const outputFiles = {};\r\n    try {\r\n        const sourceContent = source.content !== undefined ? source.content : fs_1.readFileSync(sourcePath, 'utf8');\r\n        const cmdPrefix = settings.cmdPrefix || getDefaultScryptc();\r\n        const cmd = `${cmdPrefix} compile ${settings.asm || settings.desc ? '--asm' : ''} ${settings.ast || settings.desc ? '--ast' : ''} ${settings.debug == false ? '' : '--debug'} ${settings.optimize ? '--opt' : ''} -r -o \"${outputDir}\" ${settings.cmdArgs ? settings.cmdArgs : ''}`;\r\n        let output = child_process_1.execSync(cmd, { input: sourceContent, cwd: curWorkingDir, timeout }).toString();\r\n        // Because the output of the compiler on the win32 platform uses crlf as a newline， here we change \\r\\n to \\n. make SYNTAX_ERR_REG、SEMANTIC_ERR_REG、IMPORT_ERR_REG work.\r\n        output = output.split(/\\r?\\n/g).join('\\n');\r\n        if (output.startsWith('Error:')) {\r\n            if (output.match(INTERNAL_ERR_REG)) {\r\n                return {\r\n                    errors: [{\r\n                            type: CompileErrorType.InternalError,\r\n                            filePath: getFullFilePath('stdin', srcDir, sourceFileName),\r\n                            message: `Compiler internal error: ${ts_optchain_1.oc(output.match(INTERNAL_ERR_REG).groups).message('')}`,\r\n                            position: [{\r\n                                    line: 1,\r\n                                    column: 1\r\n                                }, {\r\n                                    line: 1,\r\n                                    column: 1\r\n                                }]\r\n                        }]\r\n                };\r\n            }\r\n            else if (output.includes('Syntax error:')) {\r\n                const syntaxErrors = [...output.matchAll(SYNTAX_ERR_REG)].map(match => {\r\n                    const filePath = ts_optchain_1.oc(match.groups).filePath('');\r\n                    const unexpected = ts_optchain_1.oc(match.groups).unexpected('');\r\n                    const expecting = ts_optchain_1.oc(match.groups).expecting('');\r\n                    return {\r\n                        type: CompileErrorType.SyntaxError,\r\n                        filePath: getFullFilePath(filePath, srcDir, sourceFileName),\r\n                        position: [{\r\n                                line: parseInt(ts_optchain_1.oc(match.groups).line('-1')),\r\n                                column: parseInt(ts_optchain_1.oc(match.groups).column('-1')),\r\n                            }],\r\n                        message: ts_optchain_1.oc(match.groups).message(`unexpected ${unexpected}\\nexpecting ${expecting}`),\r\n                        unexpected,\r\n                        expecting,\r\n                    };\r\n                });\r\n                return {\r\n                    errors: syntaxErrors\r\n                };\r\n            }\r\n            else {\r\n                const semanticErrors = [...output.matchAll(SEMANTIC_ERR_REG)].map(match => {\r\n                    const filePath = ts_optchain_1.oc(match.groups).filePath('');\r\n                    return {\r\n                        type: CompileErrorType.SemanticError,\r\n                        filePath: getFullFilePath(filePath, srcDir, sourceFileName),\r\n                        position: [{\r\n                                line: parseInt(ts_optchain_1.oc(match.groups).line('-1')),\r\n                                column: parseInt(ts_optchain_1.oc(match.groups).column('-1')),\r\n                            }, {\r\n                                line: parseInt(ts_optchain_1.oc(match.groups).line1('-1')),\r\n                                column: parseInt(ts_optchain_1.oc(match.groups).column1('-1')),\r\n                            }],\r\n                        message: ts_optchain_1.oc(match.groups).message('')\r\n                    };\r\n                });\r\n                return {\r\n                    errors: semanticErrors\r\n                };\r\n            }\r\n        }\r\n        const result = { errors: [] };\r\n        if (settings.ast || settings.desc) {\r\n            const outputFilePath = getOutputFilePath(outputDir, 'ast');\r\n            outputFiles['ast'] = outputFilePath;\r\n            const allAst = addSourceLocation(JSON.parse(fs_1.readFileSync(outputFilePath, 'utf8')), srcDir, sourceFileName);\r\n            const sourceUri = utils_1.path2uri(sourcePath);\r\n            result.file = sourceUri;\r\n            result.ast = allAst[sourceUri];\r\n            delete allAst[sourceUri];\r\n            result.dependencyAsts = allAst;\r\n            result.alias = getAliasDeclaration(result.ast, allAst);\r\n            const staticConstInt = getStaticConstIntDeclaration(result.ast, allAst);\r\n            const { contract: name, abi } = getABIDeclaration(result.ast, result.alias, staticConstInt);\r\n            result.abi = abi;\r\n            result.contract = name;\r\n            result.structs = getStructDeclaration(result.ast, allAst);\r\n        }\r\n        let asmObj = null;\r\n        if (settings.asm || settings.desc) {\r\n            const outputFilePath = getOutputFilePath(outputDir, 'asm');\r\n            outputFiles['asm'] = outputFilePath;\r\n            asmObj = JSON.parse(fs_1.readFileSync(outputFilePath, 'utf8'));\r\n            const sources = asmObj.sources;\r\n            result.asm = asmObj.output.map(item => {\r\n                if (!settings.debug) {\r\n                    return {\r\n                        opcode: item.opcode\r\n                    };\r\n                }\r\n                const match = SOURCE_REG.exec(item.src);\r\n                if (match && match.groups) {\r\n                    const fileIndex = parseInt(match.groups.fileIndex);\r\n                    let debugTag;\r\n                    const tagStr = match.groups.tagStr;\r\n                    if (/\\w+\\.\\w+:0/.test(tagStr)) {\r\n                        debugTag = DebugModeTag.FuncStart;\r\n                    }\r\n                    if (/\\w+\\.\\w+:1/.test(tagStr)) {\r\n                        debugTag = DebugModeTag.FuncEnd;\r\n                    }\r\n                    if (/loop:0/.test(tagStr)) {\r\n                        debugTag = DebugModeTag.LoopStart;\r\n                    }\r\n                    const pos = sources[fileIndex] ? {\r\n                        file: sources[fileIndex] ? getFullFilePath(sources[fileIndex], srcDir, sourceFileName) : undefined,\r\n                        line: sources[fileIndex] ? parseInt(match.groups.line) : undefined,\r\n                        endLine: sources[fileIndex] ? parseInt(match.groups.endLine) : undefined,\r\n                        column: sources[fileIndex] ? parseInt(match.groups.col) : undefined,\r\n                        endColumn: sources[fileIndex] ? parseInt(match.groups.endCol) : undefined,\r\n                    } : undefined;\r\n                    return {\r\n                        opcode: item.opcode,\r\n                        stack: item.stack,\r\n                        pos: pos,\r\n                        debugTag\r\n                    };\r\n                }\r\n                throw new Error('Compile Failed: Asm output parsing Error!');\r\n            });\r\n            if (settings.debug) {\r\n                result.autoTypedVars = asmObj.autoTypedVars.map(item => {\r\n                    const match = SOURCE_REG.exec(item.src);\r\n                    if (match && match.groups) {\r\n                        const fileIndex = parseInt(match.groups.fileIndex);\r\n                        const pos = sources[fileIndex] ? {\r\n                            file: sources[fileIndex] ? getFullFilePath(sources[fileIndex], srcDir, sourceFileName) : undefined,\r\n                            line: sources[fileIndex] ? parseInt(match.groups.line) : undefined,\r\n                            endLine: sources[fileIndex] ? parseInt(match.groups.endLine) : undefined,\r\n                            column: sources[fileIndex] ? parseInt(match.groups.col) : undefined,\r\n                            endColumn: sources[fileIndex] ? parseInt(match.groups.endCol) : undefined,\r\n                        } : undefined;\r\n                        return {\r\n                            name: item.name,\r\n                            type: item.type,\r\n                            pos: pos\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (settings.desc) {\r\n            settings.outputToFiles = true;\r\n            const outputFilePath = getOutputFilePath(outputDir, 'desc');\r\n            outputFiles['desc'] = outputFilePath;\r\n            const description = {\r\n                version: CURRENT_CONTRACT_DESCRIPTION_VERSION,\r\n                compilerVersion: compilerVersion(settings.cmdPrefix ? settings.cmdPrefix : getDefaultScryptc()),\r\n                contract: result.contract,\r\n                md5: md5(sourceContent),\r\n                structs: result.structs || [],\r\n                alias: result.alias || [],\r\n                abi: result.abi || [],\r\n                file: '',\r\n                asm: result.asm.map(item => item['opcode'].trim()).join(' '),\r\n                sources: [],\r\n                sourceMap: []\r\n            };\r\n            if (settings.debug && settings.sourceMap && asmObj) {\r\n                Object.assign(description, {\r\n                    file: result.file,\r\n                    sources: asmObj.sources.map(source => getFullFilePath(source, srcDir, sourceFileName)),\r\n                    sourceMap: asmObj.output.map(item => item.src),\r\n                });\r\n            }\r\n            fs_1.writeFileSync(outputFilePath, JSON.stringify(description, null, 4));\r\n            result.compilerVersion = description.compilerVersion;\r\n            result.md5 = description.md5;\r\n        }\r\n        return result;\r\n    }\r\n    finally {\r\n        if (settings.outputToFiles) {\r\n            Object.keys(outputFiles).forEach(outputType => {\r\n                const file = outputFiles[outputType];\r\n                if (fs_1.existsSync(file)) {\r\n                    if (settings[outputType]) {\r\n                        // rename all output files\r\n                        fs_1.renameSync(file, file.replace('stdin', path_1.basename(sourcePath, '.scrypt')));\r\n                    }\r\n                    else {\r\n                        fs_1.unlinkSync(file);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // cleanup all output files\r\n            Object.values(outputFiles).forEach(file => {\r\n                if (fs_1.existsSync(file)) {\r\n                    fs_1.unlinkSync(file);\r\n                }\r\n            });\r\n        }\r\n        // console.log('compile time spent: ', Date.now() - st)\r\n    }\r\n}\r\nexports.compile = compile;\r\nfunction compilerVersion(cwd) {\r\n    const text = child_process_1.execSync(`${cwd} version`).toString();\r\n    return /Version:\\s*([^\\s]+)\\s*/.exec(text)[1];\r\n}\r\nexports.compilerVersion = compilerVersion;\r\nfunction addSourceLocation(astRoot, basePath, curFileName) {\r\n    for (const fileName in astRoot) {\r\n        if (fileName === 'std') {\r\n            astRoot['std'] = _addSourceLocationProperty(astRoot['std'], 'std');\r\n        }\r\n        else {\r\n            const realFileName = fileName === 'stdin' ? curFileName : fileName;\r\n            const uri = utils_1.path2uri(path_1.join(basePath, realFileName));\r\n            astRoot[uri] = _addSourceLocationProperty(astRoot[fileName], uri);\r\n            delete astRoot[fileName];\r\n        }\r\n    }\r\n    return astRoot;\r\n}\r\nfunction _addSourceLocationProperty(astObj, uri) {\r\n    if (!(astObj instanceof Object)) {\r\n        return astObj;\r\n    }\r\n    for (const field in astObj) {\r\n        const value = astObj[field];\r\n        if (field === 'src') {\r\n            const matches = /:(\\d+):(\\d+):(\\d+):(\\d+)/.exec(value);\r\n            if (!matches) {\r\n                astObj.loc = null;\r\n            }\r\n            else {\r\n                astObj.loc = {\r\n                    source: uri,\r\n                    start: { line: parseInt(matches[1]), column: parseInt(matches[2]) },\r\n                    end: { line: parseInt(matches[3]), column: parseInt(matches[4]) }\r\n                };\r\n            }\r\n            delete astObj['src'];\r\n        }\r\n        else if (value instanceof Object) {\r\n            _addSourceLocationProperty(value, uri);\r\n        }\r\n    }\r\n    return astObj;\r\n}\r\nfunction getOutputFilePath(baseDir, target) {\r\n    return path_1.join(baseDir, `stdin_${target}.json`);\r\n}\r\nfunction getFullFilePath(relativePath, baseDir, curFileName) {\r\n    if (relativePath.endsWith('stdin')) {\r\n        return path_1.join(baseDir, curFileName); // replace 'stdin' with real current compiling file name.\r\n    }\r\n    if (relativePath === 'std') {\r\n        return 'std'; // \r\n    }\r\n    return path_1.join(baseDir, relativePath);\r\n}\r\nfunction getConstructorDeclaration(mainContract) {\r\n    // explict constructor\r\n    if (mainContract['constructor']) {\r\n        return {\r\n            type: ABIEntityType.CONSTRUCTOR,\r\n            params: mainContract['constructor']['params'].map(p => { return { name: p['name'], type: p['type'] }; }),\r\n        };\r\n    }\r\n    else {\r\n        // implicit constructor\r\n        if (mainContract['properties']) {\r\n            return {\r\n                type: ABIEntityType.CONSTRUCTOR,\r\n                params: mainContract['properties'].map(p => { return { name: p['name'].replace('this.', ''), type: p['type'] }; }),\r\n            };\r\n        }\r\n    }\r\n}\r\nfunction getPublicFunctionDeclaration(mainContract) {\r\n    let pubIndex = 0;\r\n    const interfaces = mainContract['functions']\r\n        .filter(f => f['visibility'] === 'Public')\r\n        .map(f => {\r\n        const entity = {\r\n            type: ABIEntityType.FUNCTION,\r\n            name: f['name'],\r\n            index: f['nodeType'] === 'Constructor' ? undefined : pubIndex++,\r\n            params: f['params'].map(p => { return { name: p['name'], type: p['type'] }; }),\r\n        };\r\n        return entity;\r\n    });\r\n    return interfaces;\r\n}\r\nfunction getABIDeclaration(astRoot, alias, staticConstInt) {\r\n    const mainContract = astRoot['contracts'][astRoot['contracts'].length - 1];\r\n    const interfaces = getPublicFunctionDeclaration(mainContract);\r\n    const constructorABI = getConstructorDeclaration(mainContract);\r\n    interfaces.push(constructorABI);\r\n    interfaces.forEach(abi => {\r\n        abi.params = abi.params.map(param => {\r\n            return Object.assign(param, {\r\n                type: resolveAbiParamType(mainContract['name'], param.type, alias, staticConstInt)\r\n            });\r\n        });\r\n    });\r\n    return {\r\n        contract: mainContract['name'],\r\n        abi: interfaces\r\n    };\r\n}\r\nexports.getABIDeclaration = getABIDeclaration;\r\nfunction resolveAbiParamType(contract, type, alias, staticConstInt) {\r\n    const resolvedConstIntType = resolveArrayTypeWithConstInt(contract, type, staticConstInt);\r\n    const resolvedAliasType = utils_1.resolveType(alias, resolvedConstIntType);\r\n    if (utils_1.isStructType(resolvedAliasType)) {\r\n        return utils_1.getStructNameByType(resolvedAliasType);\r\n    }\r\n    else if (utils_1.isArrayType(resolvedAliasType)) {\r\n        const [elemTypeName, arraySizes] = utils_1.arrayTypeAndSize(resolvedAliasType);\r\n        const elemType = utils_1.isStructType(elemTypeName) ? utils_1.getStructNameByType(elemTypeName) : elemTypeName;\r\n        return utils_1.toLiteralArrayType(elemType, arraySizes);\r\n    }\r\n    return resolvedAliasType;\r\n}\r\nfunction resolveArrayTypeWithConstInt(contract, type, staticConstInt) {\r\n    if (utils_1.isArrayType(type)) {\r\n        const [elemTypeName, arraySizes] = utils_1.arrayTypeAndSizeStr(type);\r\n        const sizes = arraySizes.map(size => {\r\n            if (/^(\\d)+$/.test(size)) {\r\n                return parseInt(size);\r\n            }\r\n            else {\r\n                if (size.indexOf('.') > 0) {\r\n                    return staticConstInt[size];\r\n                }\r\n                else {\r\n                    return staticConstInt[`${contract}.${size}`];\r\n                }\r\n            }\r\n        });\r\n        return utils_1.toLiteralArrayType(elemTypeName, sizes);\r\n    }\r\n    return type;\r\n}\r\nexports.resolveArrayTypeWithConstInt = resolveArrayTypeWithConstInt;\r\nfunction getStructDeclaration(astRoot, dependencyAsts) {\r\n    const allAst = [astRoot];\r\n    Object.keys(dependencyAsts).forEach(key => {\r\n        allAst.push(dependencyAsts[key]);\r\n    });\r\n    return allAst.map(ast => {\r\n        return ts_optchain_1.oc(ast).structs([]).map(s => ({\r\n            name: s['name'],\r\n            params: s['fields'].map(p => { return { name: p['name'], type: p['type'] }; }),\r\n        }));\r\n    }).flat(1);\r\n}\r\nexports.getStructDeclaration = getStructDeclaration;\r\nfunction getAliasDeclaration(astRoot, dependencyAsts) {\r\n    const allAst = [astRoot];\r\n    Object.keys(dependencyAsts).forEach(key => {\r\n        allAst.push(dependencyAsts[key]);\r\n    });\r\n    return allAst.map(ast => {\r\n        return ts_optchain_1.oc(ast).alias([]).map(s => ({\r\n            name: s['alias'],\r\n            type: s['type'],\r\n        }));\r\n    }).flat(1);\r\n}\r\nexports.getAliasDeclaration = getAliasDeclaration;\r\nfunction getStaticConstIntDeclaration(astRoot, dependencyAsts) {\r\n    const allAst = [astRoot];\r\n    Object.keys(dependencyAsts).forEach(key => {\r\n        allAst.push(dependencyAsts[key]);\r\n    });\r\n    return allAst.map((ast, index) => {\r\n        return ts_optchain_1.oc(ast).contracts([]).map(contract => {\r\n            return ts_optchain_1.oc(contract).statics([]).filter(s => (s.const === true && s.expr.nodeType === 'IntLiteral')).map(s => {\r\n                return {\r\n                    name: `${contract.name}.${s.name}`,\r\n                    value: s.expr.value\r\n                };\r\n            });\r\n        });\r\n    }).flat(Infinity).reduce((acc, item) => (acc[item.name] = item.value, acc), {});\r\n}\r\nexports.getStaticConstIntDeclaration = getStaticConstIntDeclaration;\r\nfunction getPlatformScryptc() {\r\n    switch (os.platform()) {\r\n        case 'win32':\r\n            return 'compiler/scryptc/win32/scryptc.exe';\r\n        case 'linux':\r\n            return 'compiler/scryptc/linux/scryptc';\r\n        case 'darwin':\r\n            return 'compiler/scryptc/mac/scryptc';\r\n        default:\r\n            throw `sCrypt doesn't support ${os.platform()}`;\r\n    }\r\n}\r\nexports.getPlatformScryptc = getPlatformScryptc;\r\nfunction vscodeExtensionPath() {\r\n    const homedir = os.homedir();\r\n    const extensionPath = path_1.join(homedir, '.vscode/extensions');\r\n    if (!fs_1.existsSync(extensionPath)) {\r\n        throw 'No Visual Studio Code extensions found. Please ensure Visual Studio Code is installed.';\r\n    }\r\n    return extensionPath;\r\n}\r\nfunction findVscodeScrypt(extensionPath) {\r\n    const sCryptPrefix = 'bsv-scrypt.scrypt-';\r\n    let versions = fs_1.readdirSync(extensionPath).reduce((filtered, item) => {\r\n        if (item.indexOf(sCryptPrefix) > -1) {\r\n            const version = item.substring(sCryptPrefix.length);\r\n            if (compareVersions.validate(version)) {\r\n                filtered.push(version);\r\n            }\r\n        }\r\n        return filtered;\r\n    }, []);\r\n    // compareVersions is ascending, so reverse.\r\n    versions = versions.sort(compareVersions).reverse();\r\n    return sCryptPrefix + versions[0];\r\n}\r\nfunction getDefaultScryptc() {\r\n    const extensionPath = vscodeExtensionPath();\r\n    const sCrypt = findVscodeScrypt(extensionPath);\r\n    if (!sCrypt) {\r\n        throw `No sCrypt extension found. Please install it at extension marketplace:\n\t\thttps://marketplace.visualstudio.com/items?itemName=bsv-scrypt.sCrypt`;\r\n    }\r\n    const scryptc = path_1.join(extensionPath, sCrypt, getPlatformScryptc());\r\n    if (!fs_1.existsSync(scryptc)) {\r\n        throw 'No sCrypt compiler found. Please update your sCrypt extension to the latest version';\r\n    }\r\n    return scryptc;\r\n}\r\nexports.getDefaultScryptc = getDefaultScryptc;\r\nfunction desc2CompileResult(description) {\r\n    const sources = description.sources;\r\n    const asm = description.asm.split(' ');\r\n    const errorMessage = 'Contract description version deprecated,  Please update your sCrypt extension to the latest version and recompile';\r\n    if (description.version === undefined) {\r\n        throw new Error(errorMessage);\r\n    }\r\n    if (description.version < CURRENT_CONTRACT_DESCRIPTION_VERSION) {\r\n        console.warn(errorMessage);\r\n    }\r\n    const result = {\r\n        compilerVersion: description.compilerVersion,\r\n        contract: description.contract,\r\n        md5: description.md5,\r\n        abi: description.abi,\r\n        structs: description.structs,\r\n        alias: description.alias,\r\n        file: description.file,\r\n        errors: [],\r\n        asm: asm.map((opcode, index) => {\r\n            const item = description.sourceMap && description.sourceMap[index];\r\n            if (item) {\r\n                const match = SOURCE_REG.exec(item);\r\n                if (match && match.groups) {\r\n                    const fileIndex = parseInt(match.groups.fileIndex);\r\n                    const pos = sources[fileIndex] ? {\r\n                        file: sources[fileIndex],\r\n                        line: sources[fileIndex] ? parseInt(match.groups.line) : undefined,\r\n                        endLine: sources[fileIndex] ? parseInt(match.groups.endLine) : undefined,\r\n                        column: sources[fileIndex] ? parseInt(match.groups.col) : undefined,\r\n                        endColumn: sources[fileIndex] ? parseInt(match.groups.endCol) : undefined,\r\n                    } : undefined;\r\n                    return {\r\n                        pos: pos,\r\n                        opcode: opcode,\r\n                        stack: []\r\n                    };\r\n                }\r\n            }\r\n            return {\r\n                opcode: opcode,\r\n                stack: []\r\n            };\r\n        })\r\n    };\r\n    return result;\r\n}\r\nexports.desc2CompileResult = desc2CompileResult;\r\n//# sourceMappingURL=compilerWrapper.js.map"],"sourceRoot":""}