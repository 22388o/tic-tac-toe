{"version":3,"sources":["web3/wallet.ts","Square.js","Board.js","web3/web3.ts","storage.js","Game.js","TitleBar.js","wallet.js","auth.js","App.js","reportWebVitals.js","index.js","web3/sensiletwallet.ts"],"names":["NetWork","SignType","wallet","network","this","Square","props","tx","value","icon","className","n","winnerClass","onClick","href","target","title","label","Board","row","col","board","cellCounter","i","columns","j","push","renderSquare","winnerSquares","squares","createBoard","React","Component","web3","url","axios","get","timeout","then","res","contractClass","buildContractClass","data","types","buildTypeClasses","getRawChangeAddress","rawTx","sendRawTransaction","contract","amountInContract","changeAddress","listUnspent","purpose","utxos","bsv","Transaction","from","addOutput","Output","script","lockingScript","satoshis","change","signRawTransaction","toString","ALL","a","sendRawTx","contractUtxo","cbBuildTx","addInput","Input","prevTxId","txId","outputIndex","Script","output","Player","PlayerPrivkey","player","localStorage","getItem","key","setItem","PlayerPublicKey","privateKey","PrivateKey","fromWIF","publicKey","PublicKey","fromPrivateKey","toHex","PlayerAddress","toAddress","CurrentPlayer","GameData","gameStr","JSON","parse","set","game","stringify","update","now","Object","assign","clear","ContractUtxos","add","utxo","id","outputs","utxosStr","getlast","length","getdeploy","calculateWinner","lines","b","c","winner","winnerRow","getLocation","move","0","1","2","3","4","5","6","7","8","initialState","history","Array","fill","currentStepNumber","isAliceTurn","toContractState","state","slice","map","square","Game","keys","attachState","setState","alert","states","contractInstance","current","canMove","console","error","backupState","gameState","concat","currentLocation","stepNumber","call","address","setOutput","buildPublicKeyHashOut","getEstimateFee","newStates","newLockingScript","getNewStateScript","amount","setInputScript","preimage","getPreimage","sig","signTx","Error","toScript","seal","catch","e","status","end","bet","deploy","last","src","winnerName","nexter","handleClick","TitleBar","amountRef","useRef","onStart","parseInt","isNaN","getbalance","balance","startBet","started","cancelBet","ref","type","name","min","defaultValue","placeholder","Wallet","useState","setBalance","useEffect","handleExit","sensilet","SensiletWallet","isConnect","exitAccount","setWallet","undefined","window","location","reload","Auth","sensiletLogin","requestAccount","fetchContract","alicePubKey","bobPubKey","loadContract","TictactoeContractClass","PubKey","App","useReducer","bool","createRef","isConnected","instance","updateStates","timer","setTimeout","log","clearTimeout","gameStates","date","Date","clean","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","aliceKey","fromRandom","toWIF","bobKey","initPlayer","ReactDOM","render","StrictMode","document","getElementById","Mainnet","API_PREFIX","Testnet","DEBUG_TAG","warn","permissions","open","Promise","resolve","getBsvBalance","total","rawtx","inputIndex","sigHashType","list","txHex","getAddressFromP2PKH","scriptHex","sigtype","unlockScript","Buffer","sigList","inputs","setScript","signature","publickey","size","Math","max","time","post","txhex","minAmount","options","getAddress","filter","tx_hash","tx_pos","getPublicKey","pubKeyHash","fromHex","toASM","split","Address"],"mappings":"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","file":"static/js/main.342f95fa.chunk.js","sourcesContent":["\nexport interface UTXO {\n  txId: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n  address?: string;\n  pubkey?: string\n}\n\nexport interface Output {\n  satoshis: number,\n  script: string;\n}\n\n\nexport interface Input {\n  utxo: UTXO,\n  sequence: number,\n  script: string;\n}\n\nexport interface Tx {\n  nLockTime?: number,\n  inputs: Input[],\n  outputs: Output[],\n}\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Regtest = 'regtest',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, script: string, satoshis: number, inputIndex: number, sigHashType: SignType, address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","import React from 'react';\n\nconst Square = props => {\n\n\n\n  let tx = props.value ? `https://whatsonchain.com/tx/${props.value.tx}` : \"\";\n  let icon = props.value ? <div className='squareicon'>{props.value.n}</div> : \"\";\n  return (\n    <div className=\"squarewapper\">\n      <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n        {props.value ? <a href={tx} target=\"_blank\" title=\"Click to see the transaction\">{props.value.label}</a> : props.value}\n      </button>\n      {icon}\n    </div>\n\n  )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n\n    const winnerClass =\n      this.props.winnerSquares &&\n        (this.props.winnerSquares[0] === i ||\n          this.props.winnerSquares[1] === i ||\n          this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { UTXO, wallet, SignType } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nconst WEB3_VERSION = '0.0.1';\n\n\nexport class web3 {\n\n  static wallet: wallet;\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n      const contractClass = buildContractClass(res.data);\n      return {\n        contractClass: contractClass,\n        types: buildTypeClasses(contractClass)\n      };\n    });\n  }\n\n\n  static async getChangeAddress(): Promise<string> {\n    return web3.wallet.getRawChangeAddress();\n  }\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n\n  static async deploy(contract: AbstractContract, amountInContract: number): Promise<string> {\n    const wallet = web3.wallet\n\n    const changeAddress = await web3.wallet.getRawChangeAddress();\n\n    return wallet.listUnspent(amountInContract, {\n      purpose: 'tic-tac-toe'\n    }).then((utxos: UTXO[]) => {\n      const tx = new bsv.Transaction();\n      tx.from([utxos[0]])\n        .addOutput(new bsv.Transaction.Output({\n          script: contract.lockingScript,\n          satoshis: amountInContract,\n        }))\n        .change(changeAddress);\n\n      return wallet.signRawTransaction(tx.toString(), utxos[0].script, utxos[0].satoshis, 0, SignType.ALL);\n    }).then(async (rawTx: string) => {\n      await web3.sendRawTx(rawTx);\n      return rawTx;\n    })\n  }\n\n  static async call(contractUtxo: UTXO,\n    cbBuildTx: (tx: bsv.Transaction) => void,\n  ): Promise<string> {\n    const wallet = web3.wallet\n    const tx = new bsv.Transaction();\n    tx.addInput(new bsv.Transaction.Input({\n      prevTxId: contractUtxo.txId,\n      outputIndex: contractUtxo.outputIndex,\n      script: new bsv.Script(), // placeholder\n      output: new bsv.Transaction.Output({\n        script: contractUtxo.script,\n        satoshis: contractUtxo.satoshis,\n      })\n    }))\n\n    cbBuildTx(tx);\n\n    const rawTx = tx.toString();\n    await web3.sendRawTx(rawTx);\n    return rawTx;\n  }\n}","import { PubKey, toHex, bsv } from \"scryptlib\";\n\n\nexport const Player = {\n  Alice: 'alice',\n  Bob: 'bob'\n};\n\nexport const PlayerPrivkey = {\n  get: (player) => {\n    return localStorage.getItem(player);\n  },\n  set: (player, key) => {\n    localStorage.setItem(player, key);\n  },\n};\n\n\nexport const PlayerPublicKey = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    const publicKey = bsv.PublicKey.fromPrivateKey(privateKey);\n    return toHex(publicKey);\n  }\n};\n\nexport const PlayerAddress = {\n  get: (player) => {\n    const key = PlayerPrivkey.get(player);\n    const privateKey = new bsv.PrivateKey.fromWIF(key);\n    return privateKey.toAddress().toString();\n  }\n};\n\nexport const CurrentPlayer = {\n  get: () => {\n    return localStorage[`player`] || Player.Alice;\n  },\n  set: (player) => {\n    localStorage.setItem(`player`, player);\n  },\n};\n\n\nexport const initPlayer = () => {\n\n  const alice = PlayerPrivkey.get(Player.Alice);\n\n  if(!alice) {\n    const aliceKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Alice, aliceKey.toWIF())\n  }\n\n  const bob = PlayerPrivkey.get(Player.Bob);\n\n  if(!bob) {\n    const bobKey = new bsv.PrivateKey.fromRandom();\n    PlayerPrivkey.set(Player.Bob, bobKey.toWIF())\n  }\n}\n\n\nexport const GameData = {\n  get: () => {\n    const gameStr = localStorage[`game`];\n    return gameStr ? JSON.parse(gameStr) : {};\n  },\n  set: (game) => {\n    localStorage.setItem(`game`, JSON.stringify(game));\n  },\n  update: (game) => {\n    const now = GameData.get();\n    localStorage.setItem(`game`, JSON.stringify(Object.assign(now, game)));\n  },\n  clear: () => {\n    localStorage.setItem(`game`, JSON.stringify({}));\n  },\n};\n\n\n\nexport const ContractUtxos = {\n  add: (rawTx, outputIndex = 0) => {\n    const tx = new bsv.Transaction(rawTx);\n    const utxos = ContractUtxos.get();\n    const utxo = {\n      utxo: {\n        txId: tx.id,\n        outputIndex: outputIndex,\n        satoshis: tx.outputs[outputIndex].satoshis,\n        script: tx.outputs[outputIndex].script.toHex()\n      },\n      rawTx: rawTx\n    };\n    utxos.push(utxo)\n    ContractUtxos.set(utxos)\n\n    return utxo;\n  },\n  get: () => {\n    const utxosStr = localStorage[`utxos`];\n    return utxosStr ? JSON.parse(utxosStr) : [];\n  },\n  set: (utxos) => {\n    localStorage.setItem(`utxos`, JSON.stringify(utxos));\n  },\n  clear: () => {\n    localStorage.setItem(`utxos`, JSON.stringify([]));\n  },\n  getlast: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[utxos.length - 1];\n  },\n\n  getdeploy: () => {\n    const utxos = ContractUtxos.get();\n    return utxos[0];\n  },\n};\n\n","import React from 'react';\nimport Board from './Board';\nimport { bsv, getPreimage, signTx } from 'scryptlib';\nimport { web3 } from './web3';\n\n\nimport { GameData, PlayerAddress, PlayerPrivkey, Player, CurrentPlayer, ContractUtxos } from './storage';\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  isAliceTurn: true,\n};\n\nconst toContractState = (state) => {\n  const history = state.history.slice(0, state.currentStepNumber + 1);\n  const current = history[history.length - 1];\n  const squares = current.squares.slice();\n  // n = 0 is first call\n  if (state.currentStepNumber > 0) {\n    return {\n      isAliceTurn: state.isAliceTurn,\n      board: squares.map(square => {\n        if (square && square.label === 'X') {\n          return 1;\n        } else if (square && square.label === 'O') {\n          return 2\n        } else {\n          return 0;\n        }\n      })\n    }\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const game = GameData.get();\n    if (Object.keys(game).length !== 0) {\n      this.state = game;\n    } else {\n      this.state = initialState;\n    }\n\n    this.attachState();\n  }\n\n  clean(){\n    this.setState(initialState);\n  }\n\n\n  canMove(isAliceTurn, i, squares) {\n    const game = GameData.get();\n    if (!game || Object.keys(game).length === 0) {\n      alert(`Please start game first.`)\n      return false;\n    }\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return false;\n    }\n\n    let player = CurrentPlayer.get();\n\n    if (player === Player.Alice && isAliceTurn) {\n      return true;\n    } else if (player === Player.Bob && !this.state.isAliceTurn) {\n      return true;\n    } else {\n      alert(`now is ${this.state.isAliceTurn ? 'Alice' : 'Bob'} turn `)\n      return false;\n    }\n  }\n\n\n  attachState() {\n    const states = toContractState(this.state);\n    if (states && this.props.contractInstance) {\n      this.props.contractInstance.isAliceTurn = states.isAliceTurn;\n      this.props.contractInstance.board = states.board;\n    }\n  }\n\n  async handleClick(i) {\n\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n\n    if (!this.canMove(this.state.isAliceTurn, i, squares)) {\n      console.error('can not move now!')\n      return;\n    }\n\n    const backupState = Object.assign({}, this.state);\n\n    squares[i] = { label: this.state.isAliceTurn ? 'X' : 'O' };\n    const gameState = {\n      history: history.concat([\n        {\n          squares,\n          currentLocation: getLocation(i),\n          stepNumber: history.length,\n        },\n      ]),\n      isAliceTurn: !this.state.isAliceTurn,\n      currentStepNumber: history.length,\n    }\n\n    // update states\n    this.setState(gameState)\n\n    const contractUtxo = ContractUtxos.getlast().utxo;\n\n    web3.call(contractUtxo, (tx) => {\n\n      let winner = calculateWinner(squares).winner;\n\n      if (winner) { // Current Player won\n        let address = PlayerAddress.get(CurrentPlayer.get());\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(address),\n            satoshis: contractUtxo.satoshis - tx.getEstimateFee(),\n          })\n        })\n\n      } else if (history.length >= 9) { //board is full\n\n        tx.setOutput(0, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerAddress.get(Player.Alice)),\n            satoshis: (contractUtxo.satoshis - tx.getEstimateFee()) /2,\n          })\n        })\n        .setOutput(1, (tx) => {\n          return new bsv.Transaction.Output({\n            script: bsv.Script.buildPublicKeyHashOut(PlayerAddress.get(Player.Bob)),\n            satoshis: (contractUtxo.satoshis - tx.getEstimateFee()) /2,\n          })\n        })\n\n      } else { //continue move\n\n        const newStates = toContractState(gameState);\n        const newLockingScript = this.props.contractInstance.getNewStateScript(newStates);\n        tx.setOutput(0, (tx) => {\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n          return new bsv.Transaction.Output({\n            script: newLockingScript,\n            satoshis: amount,\n          })\n        })\n      }\n\n      tx.setInputScript(0, (tx, output) => {\n          const preimage = getPreimage(tx, output.script, output.satoshis)\n          const privateKey = new bsv.PrivateKey.fromWIF(PlayerPrivkey.get(CurrentPlayer.get()));\n          const sig = signTx(tx, privateKey, output.script, output.satoshis)\n\n          const amount = contractUtxo.satoshis - tx.getEstimateFee();\n          \n          if(amount < 1) {\n            alert('Not enough funds.');\n            throw new Error('Not enough funds.')\n          }\n\n          // we can verify locally before we broadcast the tx, if fail, \n          // it will print the launch.json in the brower webview developer tool, just copy/paste,\n          // and try launch the sCrypt debugger\n          // const result = this.props.contractInstance.move(i, sig, amount, preimage).verify({\n          //   inputSatoshis: output.satoshis, tx\n          // })\n\n          return this.props.contractInstance.move(i, sig, amount, preimage).toScript();\n        })\n        .seal()\n\n\n    }).then(rawTx => {\n\n      const utxo = ContractUtxos.add(rawTx);\n\n      squares[i].tx = utxo.utxo.txId;\n      squares[i].n = history.length;\n\n      CurrentPlayer.set(this.state.isAliceTurn ? Player.Alice : Player.Bob);\n\n      // update states\n      const gameState = Object.assign({}, this.state, {\n        history: history.concat([\n          {\n            squares,\n            currentLocation: getLocation(i),\n            stepNumber: history.length,\n          },\n        ])\n      })\n      this.setState(gameState)\n      GameData.update(gameState)\n      this.attachState();\n    })\n    .catch(e => {\n      //restore prev states\n      this.setState(backupState)\n\n      console.error('call contract fail', e)\n    })\n\n\n\n  }\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n    const deploy = ContractUtxos.getdeploy();\n\n    const last = ContractUtxos.getlast();\n\n\n    let status;\n    let end;\n\n    let icon;\n\n\n    if (CurrentPlayer.get() === Player.Bob) {\n      icon = <div className=\"bob\">Bob<img src=\"/tic-tac-toe/bob.png\"></img></div>\n    } else {\n      icon = <div className=\"alice\">Alice<img src=\"/tic-tac-toe/alice.jpg\"></img></div>\n    }\n\n    let bet;\n    if (deploy) {\n      bet = <div className=\"bet\"><a href={`https://whatsonchain.com/tx/${deploy.utxo.txId}`} target=\"_blank\">Bet transaction</a> </div>\n    }\n\n    if (winner) {\n      let winnerName = winner.label === 'X' ? 'Alice' : 'Bob';\n      status = `Winner is ${winnerName}`;\n      if (last) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${last.utxo.txId}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n      if (last) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${last.utxo.txId}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else {\n\n      let nexter = this.state.isAliceTurn ? 'Alice' : 'Bob';\n\n      status = `Next player: ${nexter}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div className=\"game-title\">\n            {icon}\n            <div className=\"game-status\"> {status} </div>\n          </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n\n          <div className=\"game-bottom\">\n            {bet}\n            {end}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { web3 } from './web3';\n\n\nfunction TitleBar(props) {\n\n    const amountRef = useRef(null);\n\n    const onStart = async (e) => {\n\n        if (!web3.wallet) {\n            alert(\"Pelease create wallet first\")\n            return;\n        }\n        let amount = parseInt(amountRef.current.value);\n\n        if (amount < 50000) {\n            alert(\"invalid amount, at least 50000 satoshis\")\n            return;\n        }\n\n        if (!isNaN(amount)) {\n\n            let balance = await web3.wallet.getbalance();\n        \n            if (amount > balance) {\n                alert(\"Not enough funds. Please fund your wallet address first\");\n                return;\n            }\n\n            props.startBet(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        props.cancelBet();\n    }\n\n\n    if (props.started) {\n        return (\n            <div>\n                The game is in progress ...\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <label>Bet amount:\n                    <input ref={amountRef} type=\"number\" name=\"amount\" min=\"1\" defaultValue={50000} placeholder=\"in satoshis\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>Start</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","import { useState, useEffect } from \"react\";\nimport { web3 } from \"./web3\";\nimport { SensiletWallet } from \"./web3/sensiletwallet\";\n\nconst Wallet = (props) => {\n  const [balance, setBalance] = useState(0);\n\n  useEffect(async () => {\n    if (web3.wallet) {\n      web3.wallet.getbalance().then((balance) => {\n        setBalance(balance);\n      });\n    }\n  }, []);\n\n\n\n  const handleExit = async (e) => {\n    const sensilet = new SensiletWallet();\n\n    const isConnect = await sensilet.isConnect();\n\n    if (isConnect) {\n      await sensilet.exitAccount();\n    }\n\n    web3.setWallet(undefined);\n    window.location.reload();\n  };\n\n    return (\n      <div className=\"wallet\">\n        <div className=\"walletInfo\">\n          <div className=\"balance\">\n            <label>Balance: {balance} <span> (satoshis)</span></label>\n          </div>\n          <button className=\"pure-button button-large\" onClick={handleExit}>\n            Logout\n          </button>\n        </div>\n      </div>\n    );\n};\n\nexport default Wallet;\n","import { SensiletWallet } from \"./web3/sensiletwallet\";\n\nconst Auth = (props) => {\n\n  const sensiletLogin = async (e) => {\n    try {\n      const sensilet = new SensiletWallet();\n      const res = await sensilet.requestAccount(\"tic-tac-toe\");\n      if (res) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"requestAccount error\", error);\n    }\n  };\n\n  return (\n    <div className=\"auth\">\n      <div>\n        <button\n          className=\"pure-button button-large sensilet\"\n          onClick={sensiletLogin}\n        >\n          Sensilet\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import \"./App.css\";\nimport Game from \"./Game\";\nimport React, { useState, useEffect } from \"react\";\nimport TitleBar from \"./TitleBar\";\nimport { PubKey, toHex, bsv } from \"scryptlib\";\nimport { web3, UTXO } from \"./web3\";\nimport Wallet from \"./wallet\";\nimport {GameData, PlayerPublicKey, Player, ContractUtxos, CurrentPlayer} from \"./storage\";\nimport Auth from \"./auth\";\nimport { SensiletWallet } from \"./web3/sensiletwallet\";\n\n\nasync function fetchContract(alicePubKey, bobPubKey) {\n  let { contractClass: TictactoeContractClass } = await web3.loadContract(\n    \"/tic-tac-toe/tictactoe_release_desc.json\"\n  );\n\n  return new TictactoeContractClass(\n    new PubKey(alicePubKey),\n    new PubKey(bobPubKey),\n    true,\n    [0,0,0,0,0,0,0,0,0]\n  );\n}\n\nfunction App() {\n\n  const forceUpdate = React.useReducer((bool) => !bool)[1];\n\n  const ref = React.createRef();\n\n  const [states, updateStates] = useState({\n    started: false,\n    isConnected: false,\n    instance: null\n  });\n\n\n  useEffect(async () => {\n\n    const timer = setTimeout(async ()=> {\n      const sensilet = new SensiletWallet();\n      const isConnected = await sensilet.isConnect();\n      if (isConnected) {\n        web3.setWallet(sensilet);\n        console.log(\"sensilet login ...\");\n      }\n  \n      const instance = await fetchContract(PlayerPublicKey.get(Player.Alice),\n        PlayerPublicKey.get(Player.Bob))\n      \n      updateStates({\n        started: Object.keys(GameData.get()).length > 0,\n        isConnected: isConnected,\n        instance: instance\n      })\n  \n    }, 100)\n\n\n    return () => {\n      clearTimeout(timer)\n    }\n\n  }, []);\n\n  const startBet = async (amount) => {\n\n    if (web3.wallet && states.instance) {\n\n      web3.deploy(states.instance, amount).then(rawTx => {\n\n        let gameStates = {\n          amount: amount,\n          name: \"tic-tac-toe\",\n          date: new Date(),\n          history: [\n            {\n              squares: Array(9).fill(null),\n            },\n          ],\n          currentStepNumber: 0,\n          isAliceTurn: true,\n        };\n  \n        ContractUtxos.add(rawTx);\n        GameData.set(gameStates);\n        CurrentPlayer.set(Player.Alice);\n\n        updateStates(Object.assign({}, states, {\n          started: true\n        }))\n      })\n    }\n  };\n\n  const cancelBet = async () => {\n    GameData.clear();\n    ContractUtxos.clear();\n    CurrentPlayer.set(Player.Alice);\n\n    if(states.instance) {\n      // restore states\n      states.instance.isAliceTurn = true;\n      states.instance.board = [0,0,0,0,0,0,0,0,0];\n    }\n\n    ref.current.clean();\n\n    updateStates({\n      started: false,\n      isConnected: states.isConnected,\n      instance: states.instance\n    })\n\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Play Tic-Tac-Toe on Bitcoin</h2>\n        <TitleBar\n          startBet={startBet}\n          cancelBet={cancelBet}\n          started={states.started}\n        />\n        <Game ref={ref} contractInstance={states.instance} />\n\n        {states.isConnected ? <Wallet></Wallet> : <Auth></Auth>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {initPlayer} from './storage';\nimport reportWebVitals from './reportWebVitals';\n\n\ninitPlayer();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport axios from 'axios';\nimport { bsv } from 'scryptlib/dist';\n\n\nexport class SensiletWallet extends wallet {\n  static DEBUG_TAG = 'Sensilet';\n  API_PREFIX: string;\n  sensilet: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == NetWork.Testnet ? 'test' : 'main'}`;\n    if (typeof (window as any).sensilet !== 'undefined') {\n      console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n      this.sensilet = (window as any).sensilet \n    } else {\n      console.warn(SensiletWallet.DEBUG_TAG, \"sensilet is not installed\");\n    }\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n\n    if(!this.sensilet) {\n      if(typeof (window as any).sensilet === 'undefined') {\n        alert(\"sensilet is not installed\");\n         window.open(\"https://sensilet.com/\", '_blank');\n      } else  {\n        console.log(SensiletWallet.DEBUG_TAG, 'Sensilet is installed!');\n        this.sensilet = (window as any).sensilet \n        return this.sensilet.requestAccount()\n      }\n    }\n\n    return this.sensilet.requestAccount()\n  }\n\n  async isConnect(): Promise<boolean> {\n    try {\n      console.log(SensiletWallet.DEBUG_TAG, 'isConnect')\n      if (typeof this.sensilet !== 'undefined') {\n        let isConnected = await this.sensilet.isConnect();\n        console.log(SensiletWallet.DEBUG_TAG, 'connect state', isConnected);\n        return isConnected;\n      } \n\n    } catch (error) {\n    \n    }\n    return Promise.resolve(false);\n  }\n\n\n  async getbalance(): Promise<number> {\n    try {\n      let res = await this.sensilet.getBsvBalance();\n      console.log(SensiletWallet.DEBUG_TAG, 'getbalance', res.balance)\n      return Promise.resolve(res.balance.total);\n    } catch (error) {\n      console.error('getbalance error', error);\n    }\n\n    return Promise.resolve(0)\n  }\n\n  async signRawTransaction(rawtx: string,\n    script: string, \n    satoshis: number, \n    inputIndex: number, \n    sigHashType: SignType\n  ): Promise<string> {\n\n    const tx = new bsv.Transaction(rawtx);\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: getAddressFromP2PKH(script),\n          scriptHex: script,\n          inputIndex: inputIndex,\n          satoshis: satoshis,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    const unlockScript = new bsv.Script()\n    .add(Buffer.from(res.sigList[0].sig,'hex'))\n    .add(Buffer.from(res.sigList[0].publicKey,'hex'));\n\n    tx.inputs[inputIndex].setScript(unlockScript);\n\n    return tx.toString();\n  }\n\n\n\n  async getSignature(rawtx: string,\n    script: string, \n    satoshis: number,\n    inputIndex: number, \n    sigHashType: SignType,\n    address: string\n  ): Promise<{\n    signature: string,\n    publickey: string\n  }> {\n\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: address,\n          inputIndex:inputIndex,\n          satoshis:satoshis,\n          scriptHex: script,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    return {\n      signature: res.sigList[0].sig,\n      publickey:  res.sigList[0].publickey,\n    }\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    // 1 second per KB\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n\n    try {\n      const res = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n        txhex: rawTx\n      }, {\n        timeout: time\n      });\n      return res.data;\n    } catch (error) {\n      throw new Error('sendRawTransaction error: ')\n    }\n\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n\n    let address = await this.sensilet.getAddress();\n    console.log(SensiletWallet.DEBUG_TAG, 'listUnspent', address)\n    return axios.get(`${this.API_PREFIX}/address/${address}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txId: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(address).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getAddress();\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getPublicKey();\n  }\n\n  async exitAccount(): Promise<boolean> {\n    try {\n      await this.sensilet.exitAccount();\n      return true\n   } catch (e) {\n     console.error(SensiletWallet.DEBUG_TAG, \"exitAccount error\", e);\n   }\n   return false;\n  }\n}\n\nfunction getAddressFromP2PKH(script: string){\n  const asm = bsv.Script.fromHex(script).toASM();\n  //OP_DUP OP_HASH160 ${address} OP_EQUALVERIFY OP_CHECKSIG\n  const pubKeyHash = asm.split(' ')[2]; //get address from script\n  const address = new bsv.Address.fromHex(`00${pubKeyHash}`).toString();\n  return address\n}"],"sourceRoot":""}