{"version":3,"sources":["web3/wallet.ts","web3/web3.ts","web3/wutils.ts","Square.js","Board.js","utils.js","web3/localwallet.ts","Request.ts","web3/dotwallet.ts","Server.js","Game.js","TitleBar.js","web3/sensilet.ts","wallet.js","App.js","reportWebVitals.js","index.js"],"names":["NetWork","SignType","wallet","network","this","web3","url","axios","get","timeout","then","res","contractClass","buildContractClass","data","types","buildTypeClasses","contract","amountInContract","publicKey","getRawChangeAddress","changeAddress","minAmount","listUnspent","purpose","utxos","a","length","Error","tx","inputs","outputs","push","script","lockingScript","toHex","satoshis","utxo","sequence","changeAmount","bsv","Script","buildPublicKeyHashOut","pubKey","PublicKey","fromHex","address","toAddress","console","log","getSignature","toRawTx","ALL","signature","add","Buffer","from","toBuffer","rawTx","sendRawTransaction","pubkey","buildDeployTx","sendTx","txid","signInput","privateKey","inputIndex","sigHashType","output","Transaction","Output","sig","Signature","prevTxId","txHash","outputIndex","Sighash","sign","satoshisBN","sigtype","buildPublicKeyHashIn","toDER","toBsvTx","tx_","forEach","input","addInput","Input","sequenceNumber","addOutput","nLockTime","toString","getPreimage","bsvTx","getPreimage_","Square","props","value","icon","className","n","winnerClass","onClick","href","target","title","label","Board","row","col","board","cellCounter","i","columns","j","renderSquare","winnerSquares","squares","createBoard","React","Component","LocalStorageKey","DAPP_API_PATHS","getPlayer","URLSearchParams","window","location","search","getPlayerByState","DotWalletToken","localStorage","getItem","PlayerPublicKey","player","key","setItem","PlayerAddress","Request","create","interceptors","request","use","config","access_token","headers","error","Promise","reject","responseIntercepter","status","code","clear","alert","resolve","response","DotWallet","Mainnet","API_PREFIX","API_DOTWALLET","CLIENT_ID","loginUrl","sender","setToken","token","query","origin","Regtest","encodeURIComponent","appid","user_index","name","permissions","post","confirm","unconfirm","rawtx","addr","input_index","sig_type","signed_rawtx","inputAmount","inputScript","hex_signature","options","min_amount","filter","map","tx_hash","output_index","public_key","server","privKey","accessToken","deleteGame","removeItem","createGame","game","event","JSON","stringify","saveGame","getGame","gameJson","parse","getCurrentPlayer","savePrivateKey","getPrivateKey","getBobPrivateKey","getAlicePrivateKey","getAccessToken","urlParams","self","addEventListener","e","emit","cb","on","off","EventEmitter","calculateWinner","lines","b","c","winner","winnerRow","initialState","history","Array","fill","currentStepNumber","is_alice_turn","Game","gameState","state","nextProps","setState","contractInstance","getNewStateScript","square","lastUtxo","FEE","amount","aliceAddress","alicePubKey","Networks","testnet","bobAddress","bobPubKey","aliceLockingScript","bobLockingScript","newLockingScript","undefined","preimage","unlockScript","move","Sig","result","verify","inputSatoshis","success","slice","current","calculateOldState","updateState","buildCallContractTx","concat","currentLocation","0","1","2","3","4","5","6","7","8","stepNumber","Object","assign","catch","end","bet","src","deploy","winnerName","nexter","handleClick","TitleBar","useReducer","bool","amountRef","useRef","onCancel","cancelBet","started","creator","split","ref","type","placeholder","parseInt","isNaN","startBet","Sensilet","sensilet","Testnet","warn","requestAccount","open","isConnect","isConnected","getBsvBalance","DEBUG_TAG","balance","total","signTx","list","txHex","sigList","scriptHex","size","Math","max","time","txhex","getAddress","tx_pos","getPublicKey","exitAccount","Wallet","useState","setBalance","authed","setAuth","useEffect","id","setTimeout","dotwallet","setWallet","startGame","getbalance","clearTimeout","handleSensilet","reload","handleExit","App","updateStart","updateContractInstance","forceUpdate","date","Date","onDeployed","fetchContract","onNext","loadContract","TictactoeContractClass","PubKey","setPlayersPublicKey","publicKeyStr","joinGame","message","addDeployedListener","addNextListener","removeDeployedListener","removeNextListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAsCYA,EAQAC,E,kBARAD,K,kBAAAA,E,kBAAAA,E,kBAAAA,E,WAAAA,M,cAQAC,O,cAAAA,I,oBAAAA,I,gBAAAA,I,yCAAAA,I,+CAAAA,I,4CAAAA,M,KAUL,IAAeC,EAIpB,WAAYC,GAAmB,yBAF/BA,aAE8B,EAC5BC,KAAKD,QAAUA,I,uLCpDNE,EAAb,8FAME,SAAiBH,GACfG,EAAKH,OAASA,IAPlB,qBAWE,WACE,MAhBiB,UAIrB,0BAgBE,SAAoBI,GAKlB,OAAOC,IAAMC,IAAIF,EAAK,CACpBG,QAAS,MACRC,MAAK,SAAAC,GAEN,MAAO,CACLC,cAAeC,6BAAmBF,EAAIG,MACtCC,MAAOC,2BAAiBL,EAAIG,YA3BpC,kEAmCE,WAA2BG,EAA4BC,EAA0BC,GAAjF,kFAEMjB,EAASG,EAAKH,OAFpB,SAI4BG,EAAKH,OAAOkB,sBAJxC,cAIMC,EAJN,OAMQC,EAAYJ,EA3CV,IAqCV,kBAQShB,EAAOqB,YAAYD,EAAW,CACnCE,QAAS,UACRd,KAFI,uCAEC,WAAOe,GAAP,mBAAAC,EAAA,yDACe,IAAjBD,EAAME,OADJ,sBAEE,IAAIC,MAAM,YAFZ,WAKAC,EAAS,CACbC,OAAQ,GACRC,QAAS,KAGRA,QAAQC,KAAK,CACdC,OAAQhB,EAASiB,cAAcC,QAC/BC,SAAUlB,IAKZW,EAAGC,OAAOE,KACR,CACEK,KAAMZ,EAAM,GACZQ,OAAQ,GACRK,SAAU,OAIRC,EAAed,EAAM,GAAGW,SAAWlB,EAxEnC,MA0Ec,GA3Bd,sBA4BE,IAAIU,MAAM,sBA5BZ,cAgCAK,EAASO,MAAIC,OAAOC,sBAAsBrB,GAAec,QAC/DN,EAAGE,QAAQC,KACT,CACEC,OAAQA,EACRG,SAAUG,IApCR,kBAwCCV,GAxCD,4CAFD,uDA2CJnB,MAAK,SAACmB,GACP,IAAMQ,EAAOR,EAAGC,OAAO,GAAGO,KAEtBM,EAASH,MAAII,UAAUC,QAAQ1B,GAC/B2B,EAAO,UAAMH,EAAOI,aAExB,OADAC,QAAQC,IAAI,oBAAqBH,GAC1B5C,EAAOgD,aAAaC,YAAQtB,GAAK,EAAGQ,EAAKD,SAAUC,EAAKJ,OAAQhC,IAASmD,IAAKN,GAASpC,MAAK,SAAA2C,GACjGL,QAAQC,IAAI,eAAgBI,EAAWlC,GACvC,IAAMc,GAAS,IAAIO,MAAIC,QACtBa,IAAIC,EAAOC,KAAKH,EAAU,QAC1BC,IAAIX,EAAOc,YACXtB,QAED,OADAN,EAAGC,OAAO,GAAGG,OAASA,EACfJ,SAhEb,2CAnCF,yHA0GE,WAAuB6B,GAAvB,0FACSrD,EAAKH,OAAOyD,mBAAmBD,IADxC,2CA1GF,kHA8GE,WAAoB7B,GAApB,0FACSxB,EAAKH,OAAOyD,mBAAmBR,YAAQtB,KADhD,2CA9GF,kHAkHE,WAAoBZ,EAA4BC,EAA0B0C,GAA1E,0FACSvD,EAAKwD,cAAc5C,EAAUC,EAAkB0C,GAAQlD,KAAvD,uCAA4D,WAAMmB,GAAN,SAAAH,EAAA,+EAC1DrB,EAAKyD,OAAOjC,GAAInB,MAAK,SAAAqD,GAC1B,MAAO,CAAClC,EAAIkC,OAFmD,2CAA5D,wDADT,2CAlHF,kEAAa1D,EAGJH,Y,4WCXT,2JAIO,SAAS8D,EAAUC,EAAiBpC,EAASqC,EAAoBC,EAAqB9B,GAE3FR,EAAGC,OAAOoC,GAAYE,OAAS,IAAI5B,MAAI6B,YAAYC,OAAO,CACxDrC,OAAQI,EAAKJ,OACbG,SAAUC,EAAKD,WAGjB,IAAMmC,EAAM,IAAI/B,MAAI6B,YAAYG,UAAU,CACxCrD,UAAW8C,EAAW9C,UACtBsD,SAAUpC,EAAKqC,OACfC,YAAatC,EAAKsC,YAClBT,aACAb,UAAWb,MAAI6B,YAAYO,QAAQC,KAAKhD,EAAIoC,EAAYE,EACtDD,EACArC,EAAGC,OAAOoC,GAAYE,OAAOnC,OAC7BJ,EAAGC,OAAOoC,GAAYE,OAAOU,YAC/BC,QAASZ,IAGX,OAAO3B,MAAIC,OAAOuC,qBAChBT,EAAIpD,UACJoD,EAAIlB,UAAU4B,QACdV,EAAIQ,SACJ5C,QAMG,SAAS+C,EAAQrD,GACtB,IAAMsD,EAAM,IAAI3C,MAAI6B,YAoBpB,OAlBAxC,EAAGC,OAAOsD,SAAQ,SAAAC,GAChBF,EAAIG,SAAS,IAAI9C,MAAI6B,YAAYkB,MAAM,CACrCd,SAAUY,EAAMhD,KAAKqC,OACrBC,YAAaU,EAAMhD,KAAKsC,YACxBa,eAAgBH,EAAM/C,SACtBL,OAAQoD,EAAMpD,OAASO,MAAIC,OAAOI,QAAQwC,EAAMpD,QAAU,IAAIO,MAAIC,SAChED,MAAIC,OAAOI,QAAQwC,EAAMhD,KAAKJ,QAASoD,EAAMhD,KAAKD,aAIxDP,EAAGE,QAAQqD,SAAQ,SAAAhB,GACjBe,EAAIM,UAAU,IAAIjD,MAAI6B,YAAYC,OAAO,CACvCrC,OAAQO,MAAIC,OAAOI,QAAQuB,EAAOnC,QAClCG,SAAUgC,EAAOhC,eAIrB+C,EAAIO,UAAY7D,EAAG6D,WAAa,EACzBP,EAGF,SAAShC,EAAQtB,GACtB,OAAOqD,EAAQrD,GAAI8D,WAKd,SAASC,EAAY/D,GAAgF,IAAxEqC,EAAuE,uDAA1D,EAAGC,EAAuD,uDAA/BlE,IAASmD,IAC7EyC,EAAQX,EAAQrD,GACtB,OAAOiE,sBAAaD,EAAOrD,MAAIC,OAAOI,QAAQhB,EAAGC,OAAOoC,GAAY7B,KAAKJ,QAASJ,EAAGC,OAAOoC,GAAY7B,KAAKD,SAAU8B,EAAYC,K,uKC9CtH4B,EAlBA,SAAAC,GAIb,IAAInE,EAAKmE,EAAMC,MAAN,sCAA6CD,EAAMC,MAAMpE,IAAO,GACrEqE,EAAOF,EAAMC,MAAQ,qBAAKE,UAAU,aAAf,SAA6BH,EAAMC,MAAMG,IAAW,GAC7E,OACE,sBAAKD,UAAU,eAAf,UACE,wBAAQA,UAAS,UAAKH,EAAMK,YAAX,WAAiCC,QAASN,EAAMM,QAAjE,SACGN,EAAMC,MAAQ,mBAAGM,KAAM1E,EAAI2E,OAAO,SAASC,MAAM,+BAAnC,SAAmET,EAAMC,MAAMS,QAAaV,EAAMC,QAElHC,MC+BQS,E,iKAxCb,SAAYC,EAAKC,GAIf,IAHA,IAAMC,EAAQ,GACVC,EAAc,EAETC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAAG,CAE/B,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAAIL,EAAKK,GAAK,EAC5BD,EAAQjF,KAAK5B,KAAK+G,aAAaJ,MAEjCD,EAAM9E,KAAK,qBAAamE,UAAU,YAAvB,SAAoCc,GAA1BD,IAGvB,OAAOF,I,0BAGT,SAAaE,GAAI,IAAD,OAERX,GACJjG,KAAK4F,MAAMoB,eACRhH,KAAK4F,MAAMoB,cAAc,KAAOJ,GAC/B5G,KAAK4F,MAAMoB,cAAc,KAAOJ,GAChC5G,KAAK4F,MAAMoB,cAAc,KAAOJ,EAEhC,GADA,gBAGN,OACE,cAAC,EAAD,CACEX,YAAaA,EAEbJ,MAAO7F,KAAK4F,MAAMqB,QAAQL,GAC1BV,QAAS,kBAAM,EAAKN,MAAMM,QAAQU,KAF7BA,K,oBAOX,WACE,OAAO,8BAAM5G,KAAKkH,YAAY,EAAG,S,GArCjBC,IAAMC,W,iDCHbC,GCMoBvH,IDLjB,gBADHuH,EAKG,iBALHA,EAMC,cANDA,EASK,mBATLA,EAUG,gBAOHC,EACO,qCADPA,EAGe,6CAHfA,EAIQ,sCAJRA,EAKM,oCALNA,EAMe,6CANfA,EAOiB,+CAPjBA,EAQS,uCAOTC,EAAY,WAEvB,OADkB,IAAIC,gBAAgBC,OAAOC,SAASC,QACrCvH,IAAI,WAAa,SAIvBwH,EAAmB,WAE9B,OADkB,IAAIJ,gBAAgBC,OAAOC,SAASC,QACrCvH,IAAI,UAAY,SAYtByH,EACN,WACH,OAAOC,aAAaC,QAAQV,IAOnBW,EACN,SAACC,GACJ,GAAIA,EACF,OAAOH,aAAa,cAAD,OAAeG,IAEpC,IACMC,EACQ,UAFEX,IAGVF,EACAA,EACN,OAAOS,aAAaC,QAAQG,IAVnBF,EAYN,SAACjH,EAAWkH,GACf,GAAIA,EACFH,aAAa,cAAD,OAAeG,IAAYlH,MADzC,CAIA,IAAMmH,EACO,UAAXD,EACIZ,EACAA,EACNS,aAAaK,QAAQD,EAAKnH,KAIjBqH,EACN,SAACH,GACJ,GAAIA,EACF,OAAOH,aAAa,WAAD,OAAYG,IAEjC,IACMC,EACQ,UAFEX,IAGVF,EACAA,EACN,OAAOS,aAAaC,QAAQG,IAVnBE,EAYN,SAAC1F,EAASuF,GACb,GAAIA,EACFH,aAAa,WAAD,OAAYG,IAAYvF,MADtC,CAIA,IAAMwF,EACO,UAAXD,EACIZ,EACAA,EACNS,aAAaK,QAAQD,EAAKxF,KExGxB2F,EAAUlI,IAAMmI,OAAO,CAC3BjI,QAAS,MAeXgI,EAAQE,aAAaC,QAAQC,KAZK,SAACC,GACjC,IAAMC,EAAed,IAQrB,OANIc,IACFD,EAAOE,QAAP,cAAkC,UAAYD,GAKzCD,KAG4C,SAACG,GAAD,OACnDC,QAAQC,OAAOF,MAGV,IAAMG,EAAmB,uCAAG,WAAOzI,GAAP,SAAAe,EAAA,0DAC7Bf,GAAuB,OAAfA,EAAI0I,OADiB,mBAET,QAAlB1I,EAAIG,KAAKwI,OACXtG,QAAQiG,MAAMtI,GACduH,aAAaqB,QACbC,MAAM,YACN3B,OAAOC,SAASvB,KAAO,IAEF,KAAlB5F,EAAIG,KAAKwI,KARiB,yCAStBJ,QAAQO,QAAQ9I,IATM,gCAWtBuI,QAAQC,OAAOxI,IAXO,YAe7BA,GAAOA,EAAI0I,QAAU,KAfQ,yCAgBxBH,QAAQC,OAAOxI,IAhBS,gCAmB1BuI,QAAQO,QAAQ9I,IAnBU,4CAAH,sDAsBhC8H,EAAQE,aAAae,SAASb,IAAIO,GAAqB,SAACH,GAAD,OACrDC,QAAQC,OAAOF,MAGFR,QC7CFkB,EAAb,kDAOE,aAAiD,IAAD,EAApCxJ,EAAoC,uDAAjBH,IAAQ4J,QAAS,qBAC9C,cAAMzJ,IAPR0J,gBAMgD,IALhDC,mBAKgD,IAJhDC,UAAY,mCAIoC,EAHhDC,cAGgD,IAFhDC,YAEgD,IAmChDC,SAAW,SAACC,GACV,GAAIA,EAAO,CACTjC,aAAaT,GAAgC0C,EAC7C,IAAMC,EACkB,SAAtBpC,IAAgC,gBAAkB,cACpDH,OAAOC,SAASvB,KAAhB,UAA0BsB,OAAOC,SAASuC,OAA1C,uBAA+DD,KAtCjEpH,QAAQC,IAAI,iBACZ,EAAK4G,WAAL,8CACE1J,IAAYH,IAAQsK,QAAU,OAAS,QAGzC,EAAKR,cACH3J,IAAYH,IAAQsK,QAApB,qDAGFtH,QAAQC,IAAI,eAAZ,UAA+B4E,OAAOC,SAASuC,OAA/C,iBACA,IAAML,EAAQ,UAAM,EAAKF,cAAX,gCACZ,EAAKC,UADO,yBAEGQ,mBAAmB,GAAD,OAC9B1C,OAAOC,SAASuC,OADc,iBAFrB,sCAIiBE,mBAAmB,cAhBJ,OAiB9C,EAAKP,SAAWA,EAChB,EAAKC,OACH9J,IAAYH,IAAQsK,QAChB,CACEE,MAAO,wBACPC,WAAY,GAEd,CACED,MAAO,mBACPC,WAAY,GA1B0B,EAPlD,kDAqCE,SAAeC,EAAcC,GAE3B,OADA9C,OAAOC,SAASvB,KAAhB,UAA0BnG,KAAK4J,SAA/B,kBAAiDU,GAC1CxB,QAAQO,SAAQ,KAvC3B,+DA0EE,8BAAA/H,EAAA,+EAE2B+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,SALrB,uBAEYnJ,EAFZ,EAEYA,KAFZ,kBAQWA,EAAKA,KAAK+J,QAAU/J,EAAKA,KAAKgK,WARzC,yDAUW,GAVX,yDA1EF,6HAwFE,WACEC,EACA7G,EACAC,EACA6G,GAJF,iBAAAtJ,EAAA,sEAMyB+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,OACbgB,YAAa/G,EACbgH,SAAU/G,EACV4G,QACAC,QAEF,CACEhC,QAAS,KAhBf,uBAMUlI,EANV,EAMUA,KANV,kBAmBSA,EAAKA,KAAKqK,cAnBnB,gDAxFF,8HA8GE,WACEJ,EACA7G,EACAkH,EACAC,EACAlH,EACA6G,GANF,iBAAAtJ,EAAA,sEAQyB+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,OACbgB,YAAa/G,EACbgH,SAAU/G,EACV4G,QACAC,QAEF,CACEhC,QAAS,CACPX,OAAQ,WAnBhB,uBAQUvH,EARV,EAQUA,KARV,kBAwBSA,EAAKA,KAAKwK,eAxBnB,gDA9GF,wIAyIE,WAAyB5H,GAAzB,iBAAAhC,EAAA,sEACyB+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,OACbvG,UALN,uBACU5C,EADV,EACUA,KADV,kBASSA,EAAKA,KAAKiD,MATnB,gDAzIF,uHAqJE,WACEzC,EACAiK,GAFF,iBAAA7J,EAAA,sEAIyB+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,OACbuB,WAAYlK,GAEd,CACE0H,QAAS,CACPX,OAAM,OAAEkD,QAAF,IAAEA,OAAF,EAAEA,EAAS/J,WAZzB,uBAIUV,EAJV,EAIUA,KAJV,kBAiBSA,EAAKA,KAAKW,MACdgK,QAAO,SAACpJ,GAAD,OAAeA,EAAKD,UAAYd,KACvCoK,KAAI,SAACrJ,GASJ,MARc,CACZqC,OAAQrC,EAAKsJ,QACbhH,YAAatC,EAAKuJ,aAClBxJ,SAAUC,EAAKD,SACfH,OAAQI,EAAKJ,OACb+I,KAAM3I,EAAK2I,KACXpH,OAAQvB,EAAKuB,YA1BrB,gDArJF,iIAqLE,WAA0B2H,GAA1B,iBAAA7J,EAAA,sEACyB+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,QAEf,CACEjB,QAAS,CACPX,OAAM,OAAEkD,QAAF,IAAEA,OAAF,EAAEA,EAAS/J,WARzB,uBACUV,EADV,EACUA,KADV,kBAaSA,EAAKA,KAAKgC,SAbnB,gDArLF,wHAqME,WAAmByI,GAAnB,iBAAA7J,EAAA,sEACyB+G,EAAQmC,KAAR,UAClBxK,KAAK0J,eADa,OACGpC,GACxB,CACEuC,OAAQ7J,KAAK6J,QAEf,CACEjB,QAAS,CACPX,OAAM,OAAEkD,QAAF,IAAEA,OAAF,EAAEA,EAAS/J,WARzB,uBACUV,EADV,EACUA,KADV,kBAaSA,EAAKA,KAAK+K,YAbnB,gDArMF,4DAA+B3L,K,QCyHhB4L,EAFA,I,kDAnHX,aAAe,IAAD,uBACV,gBAJJzD,OAAS,GAGK,EAFd0D,QAAU,GAEI,EADdC,YAAc,GACA,EAkCdC,WAAa,WACTpE,OAAOK,aAAagE,WAAW,SAnCrB,EAuCdC,WAAa,SAACC,GAEV,OADAA,EAAKC,MAAQ,aACNxE,OAAOK,aAAaK,QAAQ,OAAQ+D,KAAKC,UAAUH,KAzChD,EA4CdI,SAAW,SAACJ,EAAMC,GACdD,EAAKC,MAAQA,EACbxE,OAAOK,aAAaK,QAAQ,OAAQ+D,KAAKC,UAAUH,KA9CzC,EAmDdK,QAAU,WACN,IAAIC,EAAW7E,OAAOK,aAAaC,QAAQ,QAC3C,GAAIuE,GAAyB,OAAbA,EACZ,OAAOJ,KAAKK,MAAMD,IAtDZ,EA6DdE,iBAAmB,kBAAO,EAAKvE,QA7DjB,EAgEdwE,eAAiB,SAACvE,GACd,EAAKyD,QAAUzD,EACfT,OAAOK,aAAaK,QAAQ,EAAKF,OAAQC,IAlE/B,EAsEdwE,cAAgB,WAKZ,OAJI,EAAKzE,SACL,EAAK0D,QAAUlE,OAAOK,aAAaC,QAAQ,EAAKE,SAG7C,EAAK0D,SA3EF,EA8EdgB,iBAAmB,WAEf,OAAOlF,OAAOK,aAAaC,QAAQ,QAhFzB,EAmFd6E,mBAAqB,WAEjB,OAAOnF,OAAOK,aAAaC,QAAQ,UArFzB,EAwFd8E,eAAiB,WAKb,OAJI,EAAK5E,SACL,EAAK2D,YAAc/D,KAGhB,EAAK+D,aA3FZ,IAAIkB,EAAY,IAAItF,gBAAgBC,OAAOC,SAASC,QACpD,EAAKM,OAAS6E,EAAU1M,IAAI,WAAa,QACzC,IAAM2M,EAAI,eAJA,OAKV,EAAKnB,YAAc/D,IAEnBJ,OAAOuF,iBAAiB,WAAW,SAACC,GAIhC,GAAc,SAAVA,EAAE/E,IACF,IACI,IAAIoE,EAAW7E,OAAOK,aAAaC,QAAQ,QAC3C,GAAIuE,GAAyB,OAAbA,EAAmB,CAC/B,IAAIN,EAAOE,KAAKK,MAAMD,GAElBN,EAAKC,OAELc,EAAKG,KAAKlB,EAAKC,MAAOD,IAIhC,MAAOiB,GACLrK,QAAQiG,MAAM,wBAAyBoE,OAIhD,GA5BO,E,uDAgGd,SAAoBE,GAChBnN,KAAKoN,GAAG,WAAYD,K,oCAIxB,SAAuBA,GACnBnN,KAAKqN,IAAI,WAAYF,K,6BAIzB,SAAgBA,GACZnN,KAAKoN,GAAG,OAAQD,K,gCAGpB,SAAmBA,GACfnN,KAAKqN,IAAI,OAAQF,O,SAnHJG,eCMfC,EAAkB,SAACtG,GAYvB,IAXA,IAAMuG,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGA5G,EAAI,EAAGA,EAAI4G,EAAMjM,OAAQqF,GAAK,EAAG,CAAC,IAAD,cACtB4G,EAAM5G,GADgB,GACjCtF,EADiC,KAC9BmM,EAD8B,KAC3BC,EAD2B,KAExC,GAAIzG,EAAQ3F,IAAM2F,EAAQwG,IAAMxG,EAAQyG,IAAMzG,EAAQ3F,GAAGgF,QAAUW,EAAQwG,GAAGnH,OAASW,EAAQ3F,GAAGgF,QAAUW,EAAQyG,GAAGpH,MACrH,MAAO,CAAEqH,OAAQ1G,EAAQ3F,GAAIsM,UAAWJ,EAAM5G,IAIlD,MAAO,CAAE+G,OAAQ,KAAMC,UAAW,OAmB9BC,EAAe,CACnBC,QAAS,CACP,CACE7G,QAAS8G,MAAM,GAAGC,KAAK,QAG3BC,kBAAmB,EACnBC,eAAe,GAiTFC,E,kDA7Sb,WAAYvI,GAAQ,IAAD,6BACjB,cAAMA,GAEFA,EAAMoG,MAAQpG,EAAMoG,KAAKoC,UAC3B,EAAKC,MAAQzI,EAAMoG,KAAKoC,UAExB,EAAKC,MAAQR,EANE,E,6DAYnB,SAA0BS,GACpBA,EAAUtC,MAAQsC,EAAUtC,KAAKoC,UACnCpO,KAAKuO,SAASD,EAAUtC,KAAKoC,WAE7BpO,KAAKuO,SAASV,K,+BAKlB,SAAkB5G,GAChB,OAAOjH,KAAK4F,MAAM4I,iBAAiBC,kBAAkB,CACnDP,eAAgBlO,KAAKqO,MAAMH,cAC3BxH,MAAOO,EAAQqE,KAAI,SAAAoD,GAEjB,OAAIA,GAA2B,MAAjBA,EAAOpI,MACZ,EACEoI,GAA2B,MAAjBA,EAAOpI,MACnB,EAEA,S,+BAMf,SAAkBN,EAAGiB,GAEhBjB,EAAI,IACLhG,KAAK4F,MAAM4I,iBAAiBN,cAAgBlO,KAAKqO,MAAMH,cACvDlO,KAAK4F,MAAM4I,iBAAiB9H,MAAQO,EAAQqE,KAAI,SAAAoD,GAE9C,OAAIA,GAA2B,MAAjBA,EAAOpI,MACZ,EACEoI,GAA2B,MAAjBA,EAAOpI,MACnB,EAEA,Q,yBAOf,SAAYM,EAAGK,GACb,IAAKjH,KAAK4F,MAAMoG,OAAShM,KAAK4F,MAAMoG,KAAK2C,SACvC,OAAO,EAGT,GAAIpB,EAAgBtG,GAAS0G,QAAU1G,EAAQL,GAC7C,OAAO,EAETK,EAAQL,GAAK,CAAEN,MAAOtG,KAAKqO,MAAMH,cAAgB,IAAM,KACvD,IAAIjG,EAASyD,EAAOc,mBAEpB,QAAe,UAAXvE,IAAsBjI,KAAKqO,MAAMH,iBAEf,QAAXjG,IAAqBjI,KAAKqO,MAAMH,gBAGzC9E,MAAM,UAAD,OAAWpJ,KAAKqO,MAAMH,cAAgB,QAAU,MAAhD,WACLtL,QAAQiG,MAAR,iBAAwB7I,KAAKqO,MAAMH,cAAgB,QAAU,MAA7D,2BAAqFjG,KAC9E,M,wEAMX,WAA0BrB,EAAGK,EAAS6G,GAAtC,+CAAAxM,EAAA,yDACMqM,EAASJ,EAAgBtG,GAAS0G,OAChCiB,EAAM,IACRjN,EAAU,GACVkN,EAAS7O,KAAK4F,MAAMoG,KAAK2C,SAAS3M,SAAW4M,GAC7CjB,EALN,wBAMU1F,EAASV,IANnB,SASwBa,EAAkBH,GAT1C,OASQvF,EATR,OAWIf,EAAQC,KAAK,CACXI,SAAU6M,EACVhN,OAAQO,MAAIC,OAAOC,sBAAsBI,GAASX,UAbxD,wBAgBa+L,EAAQvM,QAAU,GAErBuN,EAAe,IAAI1M,MAAII,UAAUxC,KAAK4F,MAAMoG,KAAK+C,YAAa,CAClEhP,QAASqC,MAAI4M,SAASC,UAElBC,EAAa,IAAI9M,MAAII,UAAUxC,KAAK4F,MAAMoG,KAAKmD,UAAW,CAC9DpP,QAASqC,MAAI4M,SAASC,UAIlBG,EAAqBhN,MAAIC,OAAOC,sBAAsBwM,EAAanM,UAAUP,MAAI4M,SAASC,UAAUlN,QACpGsN,EAAmBjN,MAAIC,OAAOC,sBAAsB4M,EAAWvM,UAAUP,MAAI4M,SAASC,UAAUlN,QACtG8M,GAAU7O,KAAK4F,MAAMoG,KAAK2C,SAAS3M,SAAW4M,GAAO,EAErDjN,EAAQC,KAAK,CACXI,SAAU6M,EACVhN,OAAQuN,IAGVzN,EAAQC,KAAK,CACXI,SAAU6M,EACVhN,OAAQwN,MAKJC,EAAmBtP,KAAKyO,kBAAkBxH,GAChDtF,EAAQC,KAAK,CACXI,SAAU6M,EACVhN,OAAQyN,EAAiBvN,WA7C/B,aAkDMJ,EAAQ,GAAGK,UAAY,GAlD7B,wBAmDIoH,MAAM,gCAnDV,uBAoDWmG,GApDX,eAwDM9N,EAAK,CACPC,OAAQ,CAAC,CACPO,KAAMjC,KAAK4F,MAAMoG,KAAK2C,SACtBzM,SAAU,EACVL,OAAQ,KAEVF,QAASA,GAGP6N,EAAWhK,YAAY/D,GAErBmJ,EAAOxC,IAnEf,UAqEkBnI,IAAKH,OAAOgD,aAAaC,YAAQtB,GAAK,EAAIA,EAAGC,OAAO,GAAGO,KAAKD,SACzEP,EAAGC,OAAO,GAAGO,KAAKJ,OAAQhC,IAASmD,IAAK4H,GAtE7C,WAqEMzG,EArEN,OAwEMsL,EAAezP,KAAK4F,MAAM4I,iBAAiBkB,KAAK9I,EAAG,IAAI+I,MAAI5N,gBAAMoC,IAAO0K,EAAQW,GAAUzN,QAE9FN,EAAGC,OAAO,GAAGG,OAAS4N,GAMhBG,EAAS5P,KAAK4F,MAAM4I,iBAAiBkB,KAAK9I,EAAG,IAAI+I,MAAI5N,gBAAMoC,IAAO0K,EAAQW,GAAUK,OAAO,CAAEC,cAAe9P,KAAK4F,MAAMoG,KAAK2C,SAAS3M,SAAUP,GAAIqD,YAAQrD,MAErJsO,QAlFd,uBAmFInN,QAAQiG,MAAM+G,EAAO/G,OACf,IAAIrH,MAAMoO,EAAO/G,OApF3B,iCAuFSpH,GAvFT,iD,2HA2FA,WAAkBmF,GAAlB,4BAAAtF,EAAA,yDAEQwM,EAAU9N,KAAKqO,MAAMP,QAAQkC,MAAM,EAAGhQ,KAAKqO,MAAMJ,kBAAoB,GACrEgC,EAAUnC,EAAQA,EAAQvM,OAAS,GACnC0F,EAAUgJ,EAAQhJ,QAAQ+I,QAEhChQ,KAAKkQ,kBAAkBlQ,KAAKqO,MAAMJ,kBAAmBhH,GAChDjH,KAAKmQ,YAAYvJ,EAAGK,GAP3B,uBAQIrE,QAAQiG,MAAM,qCARlB,0CAaiB7I,KAAKoQ,oBAAoBxJ,EAAGK,EAAS6G,GAbtD,UAaMrM,EAbN,+BAgBImB,QAAQiG,MAAM,+BAhBlB,2BAoBE5I,IAAKyD,OAAOjC,GAAInB,MAAK,SAAAqD,GAEnBsD,EAAQL,GAAGnF,GAAKkC,EAChBsD,EAAQL,GAAGZ,EAAI8H,EAAQvM,OACvB,IA7NemO,EA6NXtB,EAAY,CACdN,QAASA,EAAQuC,OAAO,CACtB,CACEpJ,UACAqJ,iBAjOSZ,EAiOoB9I,EAhOnB,CAClB2J,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,iBACHC,EAAG,kBAGcrB,IAqNTsB,WAAYlD,EAAQvM,UAGxB2M,eAAgB,EAAKG,MAAMH,cAC3BD,kBAAmBH,EAAQvM,QAG7BmK,EAAOU,SAAS6E,OAAOC,OAAO,GAAI,EAAKtL,MAAMoG,KAAM,CACjDoC,UAAWA,EACXO,SAAU,CACRrK,OAAQX,EACRY,YAAa,EACbvC,SAAUP,EAAGE,QAAQ,GAAGK,SACxBH,OAAQJ,EAAGE,QAAQ,GAAGE,UAEtB,QAEJ,EAAK0M,SAASH,MAEb+C,OAAM,SAAAlE,GACHA,EAAE3D,UACJF,MAAM,kBAAoB6D,EAAE3D,SAAS5I,MAEvCkC,QAAQiG,MAAM,gBAAiBoE,EAAE3D,aApDrC,iD,2EA0DA,WAAU,IAYJL,EACAmI,EAEAtL,EASAuL,EAxBG,OACCvD,EAAY9N,KAAKqO,MAAjBP,QACFmC,EAAUnC,EAAQ9N,KAAKqO,MAAMJ,mBAF5B,EAGuBV,EAAgB0C,EAAQhJ,SAA9C0G,EAHD,EAGCA,OAAQC,EAHT,EAGSA,UAIV5B,EAAON,EAAOW,UAYlBvG,EADgC,QAA9B4F,EAAOc,mBACF,sBAAKzG,UAAU,MAAf,gBAAwB,qBAAKuL,IAAI,4BAEjC,sBAAKvL,UAAU,QAAf,kBAA4B,qBAAKuL,IAAI,8BAI1CtF,GAAQA,EAAKuF,SACfF,EAAM,sBAAKtL,UAAU,MAAf,UAAqB,mBAAGI,KAAI,sCAAiC6F,EAAKuF,QAAUnL,OAAO,SAA9D,6BAArB,QAGKsF,EAAOc,mBACpB,GAAImB,EAAQ,CACV,IAAI6D,EAA8B,MAAjB7D,EAAOrH,MAAgB,QAAU,MAClD2C,EAAM,oBAAgBuI,GAClBxF,GAAQA,EAAK2C,WACfyC,EAAM,sBAAKrL,UAAU,MAAf,UAAqB,mBAAGI,KAAI,sCAAiC6F,EAAK2C,SAASrK,QAAU8B,OAAO,SAAvE,kCAArB,aAEH,GAAuB,KAAnB0H,EAAQvM,OACjB0H,EAAS,oBACL+C,GAAQA,EAAK2C,WACfyC,EAAM,sBAAKrL,UAAU,MAAf,UAAqB,mBAAGI,KAAI,sCAAiC6F,EAAK2C,SAASrK,QAAU8B,OAAO,SAAvE,kCAArB,YAEH,CAEL,IAAIqL,EAASzR,KAAKqO,MAAMH,cAAgB,QAAU,MAElDjF,EAAM,uBAAmBwI,GAG3B,OACE,qBAAK1L,UAAU,OAAf,SACE,sBAAKA,UAAU,aAAf,UAEE,sBAAKA,UAAU,aAAf,UACGD,EACD,sBAAKC,UAAU,cAAf,cAA+BkD,EAA/B,UAGF,cAAC,EAAD,CACEhC,QAASgJ,EAAQhJ,QACjBD,cAAe4G,EACf1H,QAAS,SAAAU,GAAC,OAAI,EAAK8K,YAAY9K,MAGjC,sBAAKb,UAAU,cAAf,UACGsL,EACAD,c,GAtSMjK,IAAMC,WCiCVuK,MA1Ef,SAAkB/L,GACMuB,IAAMyK,YAAW,SAAAC,GAAI,OAAKA,KAAM,GAApD,IAEMC,EAAYC,iBAAO,MAsBnBC,EAAW,SAAC/E,GACdrH,EAAMqM,aAKV,GAAIrM,EAAMsM,QAEN,OACI,8DAEI,wBAAQnM,UAAU,qBAAqBG,QAAS8L,EAAhD,wBAIP,GAAIpM,EAAMoG,MAAQpG,EAAMoG,KAAKmG,UAAYzG,EAAOc,mBAAoB,CAErE,IAAMvE,EAAuC,UAA9ByD,EAAOc,mBAAiC,MAAQ,QAE3DtM,EAAMuH,OAAOC,SAASvB,KAAKiM,MAAM,KAAK,GAE1C,OACI,oEAEI,mBAAGrM,UAAU,cAAcI,KAAMjG,EAAM,WAAa+H,EAAQ7B,OAAO,SAAnE,mBACA,wBAAQL,UAAU,qBAAqBG,QAAS8L,EAAhD,wBAIL,OAAIpM,EAAMoG,MAAQpG,EAAMoG,KAAKmG,UAAYzG,EAAOc,mBAG/C,sDAOA,gCACI,gDACI,uBAAO6F,IAAKP,EAAWQ,KAAK,SAAShI,KAAK,SAASiI,YAAY,mBAEnE,wBAAQxM,UAAU,QAAQG,QA/DtB,SAAC+G,GAEb,GAAKhN,IAAKH,OAAV,CAIA,IAAI+O,EAAS2D,SAASV,EAAU7B,QAAQpK,OAEpCgJ,EAAS,IACTzF,MAAM,qDAILqJ,MAAM5D,GAGPjM,QAAQiG,MAAR,UAAiBiJ,EAAU7B,QAAQpK,MAAnC,mBAFAD,EAAM8M,SAAS7D,QAXfzF,MAAM,gCA4DF,2BChFHuJ,EAAb,kDAKE,aAAiD,IAAD,EAApC5S,EAAoC,uDAAjBH,IAAQ4J,QAAS,4BAC9C,cAAMzJ,IAJR0J,gBAGgD,IAFhDmJ,cAEgD,EAE9C,EAAKnJ,WAAL,8CAAyD1J,GAAWH,IAAQiT,QAAU,OAAS,QACvD,qBAA5BpL,OAAemL,UACzBhQ,QAAQC,IAAI,0BACZ,EAAK+P,SAAYnL,OAAemL,UAEhChQ,QAAQkQ,KAAK,6BAP+B,EALlD,kDAgBE,SAAexI,EAAcC,GAE3B,IAAIvK,KAAK4S,SAAU,CACjB,GAAuC,qBAA5BnL,OAAemL,SAMxB,OAFAhQ,QAAQC,IAAI,0BACZ7C,KAAK4S,SAAYnL,OAAemL,SACzB5S,KAAK4S,SAASG,iBALrB3J,MAAM,6BACL3B,OAAOuL,KAAK,wBAAyB,UAQ1C,OAAOhT,KAAK4S,SAASG,mBA7BzB,8DAgCE,4BAAAzR,EAAA,kEAEIsB,QAAQC,IAAI,aACiB,qBAAlB7C,KAAK4S,SAHpB,gCAI8B5S,KAAK4S,SAASK,YAJ5C,cAIUC,EAJV,OAKMtQ,QAAQC,IAAI,gBAAiBqQ,GALnC,kBAMaA,GANb,0FAYSpK,QAAQO,SAAQ,IAZzB,0DAhCF,qHAgDE,4BAAA/H,EAAA,+EAEoBtB,KAAK4S,SAASO,gBAFlC,cAEQ5S,EAFR,OAGIqC,QAAQC,IAAI8P,EAASS,UAAW,aAAc7S,EAAI8S,SAHtD,kBAIWvK,QAAQO,QAAQ9I,EAAI8S,QAAQC,QAJvC,gCAMI1Q,QAAQiG,MAAM,mBAAd,MANJ,iCASSC,QAAQO,QAAQ,IATzB,yDAhDF,6HA4DE,WAAyBsB,EACvB7G,EACAC,EACA6G,GAHF,iBAAAtJ,EAAA,6DAKEsB,QAAQC,IAAI,qBAAsB8H,GAC5BlJ,EAAK,IAAIW,MAAI6B,YAAY0G,GANjC,SAOkB3K,KAAK4S,SAASW,OAAO,CACnCC,KAAK,CACH,CACEC,MAAO9I,EACPjI,QAASkI,EACT9G,WAAWA,EACX9B,SAASP,EAAGC,OAAOoC,GAAY9B,aAbvC,cAOMzB,EAPN,OAiBEqC,QAAQC,IAAItC,GAjBd,kBAmBSuI,QAAQO,QAAQ9I,EAAImT,QAAQ,GAAGvP,MAnBxC,gDA5DF,8HAoFE,WAAmBwG,EACjB7G,EACAkH,EACAC,EACAlH,EACA6G,GALF,eAAAtJ,EAAA,sEAQkBtB,KAAK4S,SAASW,OAAO,CACnCC,KAAK,CACH,CACEC,MAAO9I,EACPjI,QAASkI,EACT9G,WAAWA,EACX9B,SAASgJ,EACT2I,UAAW1I,EACXtG,QAASZ,MAhBjB,cAQMxD,EARN,yBAqBSA,EAAImT,QAAQ,GAAGvP,KArBxB,gDApFF,wIA4GE,WAAyBb,GAAzB,mBAAAhC,EAAA,6DAEQsS,EAAOC,KAAKC,IAAI,EAAGxQ,EAAM/B,OAAS,EAAI,MACtCwS,EAAOF,KAAKC,IAAI,IAAO,IAAOF,GAHtC,kBAMsBzT,IAAMqK,KAAN,UAAcxK,KAAKyJ,WAAnB,WAAwC,CACxDuK,MAAO1Q,GACN,CACDjD,QAAS0T,IATf,cAMUxT,EANV,yBAWWA,EAAIG,MAXf,sCAaU,IAAIc,MAAM,8BAbpB,yDA5GF,uHA8HE,WAAkBN,EAAmBiK,GAArC,eAAA7J,EAAA,sEAEsBtB,KAAK4S,SAASqB,aAFpC,cAEMvR,EAFN,OAGEE,QAAQC,IAAI8P,EAASS,UAAW,cAAe1Q,GAHjD,kBAISvC,IAAMC,IAAN,UAAaJ,KAAKyJ,WAAlB,oBAAwC/G,EAAxC,YAA2D,CAChErC,QAAS,MACRC,MAAK,SAAAC,GACN,OAAOA,EAAIG,KAAK2K,QAAO,SAACpJ,GAAD,OAAeA,EAAK4D,OAAS3E,KAAWoK,KAAI,SAACrJ,GAClE,MAAO,CACLqC,OAAQrC,EAAKsJ,QACbhH,YAAatC,EAAKiS,OAClBlS,SAAUC,EAAK4D,MACfhE,OAAQO,MAAIC,OAAOC,sBAAsBI,GAASX,gBAZ1D,gDA9HF,iIAiJE,WAA0BoJ,GAA1B,SAAA7J,EAAA,+EACStB,KAAK4S,SAASqB,cADvB,gDAjJF,wHAsJE,WAAmB9I,GAAnB,SAAA7J,EAAA,+EACStB,KAAK4S,SAASuB,gBADvB,gDAtJF,uHA0JE,sBAAA7S,EAAA,+EAEUtB,KAAK4S,SAASwB,cAFxB,iCAGW,GAHX,gCAKGxR,QAAQC,IAAR,MALH,iCAOQ,GAPR,yDA1JF,2DAA8B/C,KAAjB6S,EACJS,UAAY,WCDrB,IA8GeiB,GA9GA,SAACzO,GAAW,IAAD,EACM0O,mBAAS,GADf,mBACjBjB,EADiB,KACRkB,EADQ,OAEED,oBAAS,GAFX,mBAEjBE,EAFiB,KAETC,EAFS,KAIxBC,qBAAU,WACR,IAAM3K,ERsCU,IAAIvC,gBAAgBC,OAAOC,SAASC,QACrCvH,IAAI,gBQtCf2J,IACgB,IAAIR,GACZO,SAASC,KAEpB,IAEH2K,oBAAS,sBAAC,4BAAApT,EAAA,6DACFqT,EAAKC,WAAU,sBAAC,8BAAAtT,EAAA,yDACfrB,IAAKH,OADU,qBAEd4L,EAAOmB,iBAFO,gBAGVgI,EAAY,IAAItL,EACtBtJ,IAAK6U,UAAUD,GACfjP,EAAMmP,YACNN,GAAQ,GANQ,8BAQV7B,EAAW,IAAID,EARL,UASQC,EAASK,YATjB,iBAYdhT,IAAK6U,UAAUlC,GACfhQ,QAAQC,IAAI,iBACZ+C,EAAMmP,YACNN,GAAQ,IAfM,QAoBhBxU,IAAKH,QACPG,IAAKH,OAAOkV,aAAa1U,MAAK,SAAC+S,GAC7BkB,EAAWlB,MAtBK,4CAyBnB,KA1BK,mBA4BD,kBAAM4B,aAAaN,MA5BlB,2CA6BP,IAEH,IAKMO,EAAc,uCAAG,WAAOjI,GAAP,eAAA3L,EAAA,sEAEbsR,EAAW,IAAID,EAFF,SAGDC,EAASG,eAAexL,KAHvB,eAKjBE,OAAOC,SAASyN,SALC,gDAQnBvS,QAAQiG,MAAM,uBAAd,MARmB,yDAAH,sDAYduM,EAAU,uCAAG,WAAOnI,GAAP,eAAA3L,EAAA,6DACjBwG,aAAaqB,QACPyJ,EAAW,IAAID,EAFJ,SAIOC,EAASK,YAJhB,kDAOTL,EAASwB,cAPA,OAUjBnU,IAAK6U,eAAUvF,GACfkF,GAAQ,GACRhN,OAAOC,SAASyN,SAZC,4CAAH,sDAehB,OAAIX,EAEA,qBAAKzO,UAAU,SAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAf,SACE,8CAAiBsN,OAEnB,wBAAQtN,UAAU,2BAA2BG,QAASkP,EAAtD,yBAQJ,qBAAKrP,UAAU,SAAf,SACE,gCACE,wBACEA,UAAU,oCACVG,QAASgP,EAFX,sBAMA,wBACEnP,UAAU,qCACVG,QAzDc,SAAC+G,IACL,IAAI1D,GACZwJ,eAAexL,MAqDnB,6BCwIK8N,OAnOf,WAAgB,IAAD,EACkBf,oBAAS,GAD3B,mBACNpC,EADM,KACGoD,EADH,OAGsChB,mBAAS,MAH/C,mBAGN9F,EAHM,KAGY+G,EAHZ,KAKPC,EAAcrO,IAAMyK,YAAW,SAACC,GAAD,OAAWA,KAAM,GAEhDa,EAAQ,uCAAG,WAAO7D,GAAP,mBAAAvN,EAAA,yDAEfsB,QAAQC,IAAI,uBAAwBgM,IAEhC5O,IAAKH,OAJM,iCAKOG,IAAKH,OAAOkV,aALnB,UAKT3B,EALS,SAOTxE,EAASwE,GAPA,uBAQXjK,MAAM,yCARK,0BAYTnB,EAASyD,EAAOc,mBAEhBR,EAAO,CACT6C,OAAQA,EACRpN,GAAI,CACFC,OAAQ,GACRC,QAAS,IAEX2I,KAAM,cACNyE,YAAa,GACbI,UAAW,GACXgD,QAASlK,EACTA,OAAQ,GACRwN,KAAM,IAAIC,MAGG,UAAXzN,EACFgJ,OAAOC,OAAOlF,EAAM,CAClB+C,YAAa/G,EAAoB,WAGnCiJ,OAAOC,OAAOlF,EAAM,CAClBmD,UAAWnH,EAAoB,SAInC0D,EAAOK,WAAWC,GAElBwJ,IAxCa,4CAAH,sDAkDRG,EAAU,uCAAG,WAAO3J,GAAP,SAAA1K,EAAA,sDACb0K,GAAQA,EAAK+C,aAAe/C,EAAKmD,WACnCyG,EAAc5J,EAAK+C,YAAa/C,EAAKmD,WAGvCmG,GAAY,GALK,2CAAH,sDAQVO,EAAM,uCAAG,WAAO7J,GAAP,SAAA1K,EAAA,sDAEbkU,IAFa,2CAAH,sDAjEC,SAsEEI,EAtEF,gFAsEb,WAA6B7G,EAAaI,GAA1C,mBAAA7N,EAAA,yDAC2B,OAArBkN,IAA6BO,IAAeI,EADlD,gCAE0DlP,IAAK6V,aACzD,4CAHN,uBAEyBC,EAFzB,EAEUvV,cAIFkN,EAAI,IAAIqI,EACV,IAAIC,SAAOjU,gBAAMgN,IACjB,IAAIiH,SAAOjU,gBAAMoN,KACjB,EACA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAGnBoG,EAAuB7H,GAb3B,kBAcWA,GAdX,gCAgBSc,GAhBT,4CAtEa,sBAyFb,SAASyH,IACP,IAAInW,EAASG,IAAKH,OAElB,OAAIA,aAAkB6S,EACb7S,EAAOqU,eAAe7T,KAAtB,uCAA2B,WAAO4V,GAAP,eAAA5U,EAAA,sDAC5BP,EAAYqB,MAAII,UAAUC,QAAQyT,GAEtClO,EAAoBkO,EAAc,SAClC9N,EAAkBrH,EAAU4B,YAAa,SAEzCqF,EAAoBkO,EAAc,OAClC9N,EAAkBrH,EAAU4B,YAAa,OAPT,2CAA3B,uDASE7C,aAAkByJ,EACpBzJ,EAAOqB,YAAY,IAAO,CAC/BC,QAAS,UACRd,KAFI,uCAEC,WAAOe,GAAP,eAAAC,EAAA,yDAEe,IAAjBD,EAAME,OAFJ,sBAGE,IAAIC,MAAM,YAHZ,OAMFT,EAAYqB,MAAII,UAAUC,QAAQpB,EAAM,GAAGmC,QAE/CwE,EAAoB3G,EAAM,GAAGmC,OAAQ,SACrC4E,EAAkBrH,EAAU4B,YAAa,SAEzCqF,EAAoB3G,EAAM,GAAGmC,OAAQ,OACrC4E,EAAkBrH,EAAU4B,YAAa,OAZnC,2CAFD,4DADF,EAtGI,SA2HEwT,EA3HF,8EA2Hb,WAAwBnK,GAAxB,eAAA1K,EAAA,sEAEsBrB,IAAKH,OAAOkV,aAFlC,oBAIiBhJ,EAAK6C,QAJtB,uBAKIzF,MACE,yEANN,iCAYE6H,OAAOC,OAAOlF,EAAM,CAClB+C,YAAa/G,EAAoB,SACjCC,OAAQ,UAEVgJ,OAAOC,OAAOlF,EAAM,CAClBmD,UAAWnH,EAAoB,OAC/BC,OAAQ,QAlBZ,UAuBuB2N,EAAc5J,EAAK+C,YAAa/C,EAAKmD,WAvB5D,QAyBkB,OAFZtO,EAvBN,SA0BIZ,IACGsR,OAAO1Q,EAAUmL,EAAK6C,OAAQ7G,EAAoB,QAClD1H,MAAK,YAAiB,IAAD,mBAAdmB,EAAc,KAAVkC,EAAU,KAEpBqI,EAAK2C,SAAW,CACdrK,OAAQX,EACRY,YAAa,EACbvC,SAAUP,EAAGE,QAAQ,GAAGK,SACxBH,OAAQJ,EAAGE,QAAQ,GAAGE,QAGxBmK,EAAKvK,GAAKA,EACVuK,EAAKuF,OAAS5N,EACd+H,EAAOU,SAASJ,EAAM,YACtBsJ,GAAY,MAEbnE,OAAM,SAAClE,GACY,aAAdA,EAAEmJ,SACJhN,MAAM,+CAERxG,QAAQiG,MAAM,eAAgBoE,MA9CtC,6CA3Ha,kEA8Kb,4BAAA3L,EAAA,0DAGM4Q,EAHN,iEAMQ+D,IANR,QAQMjK,EAAON,EAAOW,YACNL,EAAK2C,UACf2G,GAAY,GAGVtJ,GAAQA,EAAK+C,aAAe/C,EAAKmD,WACnCyG,EAAc5J,EAAK+C,YAAa/C,EAAKmD,WAGnCnD,IAASA,EAAKuF,QAChB4E,EAASnK,GAlBb,4CA9Ka,sBAqMb0I,qBAAU,WAGR,OAFAhJ,EAAO2K,oBAAoBV,GAC3BjK,EAAO4K,gBAAgBT,GAChB,WACLnK,EAAO6K,uBAAuBZ,GAC9BjK,EAAO8K,mBAAmBX,MAE3B,CAACrH,IAEJ,IAAMxC,EAAON,EAAOW,UAEpB,OACE,qBAAKtG,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6DACA,cAAC,EAAD,CACE2M,SAAUA,EACVT,UAnKU,WAChBvG,EAAOG,aACPyJ,GAAY,GACZE,KAiKMtD,QAASA,EACTlG,KAAMA,IAGR,cAAC,EAAD,CAAMA,KAAMA,EAAMwC,iBAAkBA,IAEpC,cAAC,GAAD,CAAQuG,UA7ND,mDCAA0B,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrW,MAAK,YAAkD,IAA/CsW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3940362b.chunk.js","sourcesContent":["\nimport { toHex, bsv } from 'scryptlib';\n\nexport interface UTXO {\n  txHash: number,\n  outputIndex: string;\n  satoshis: number;\n  script: string;\n  addr?: string;\n  pubkey?: string\n}\n\nexport interface Output {\n  satoshis: number,\n  script: string;\n}\n\n\nexport interface Input {\n  utxo: UTXO,\n  sequence: number,\n  script: string;\n}\n\nexport interface Tx {\n  nLockTime?: number,\n  inputs: Input[],\n  outputs: Output[],\n}\n\nexport interface Account {\n  name: string,\n  paymail: string,\n  address: string,\n  permissions?: string[]\n}\n\n\nexport enum NetWork {\n  Testnet = 'testnet',\n  Regtest = 'regtest',\n  Mainnet = 'mainnet',\n  STN = 'STN'\n}\n\n\nexport enum SignType {\n  ALL = 0x00000001 | 0x00000040,\n  SINGLE = 0x00000003 | 0x00000040,\n  NONE = 0x00000002 | 0x00000040,\n  ANYONECANPAY_ALL = 0x00000001 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_SINGLE = 0x00000003 | 0x00000040 | 0x00000080,\n  ANYONECANPAY_NONE = 0x00000002 | 0x00000040 | 0x00000080\n}\n\n\nexport abstract class wallet {\n\n  network: NetWork;\n\n  constructor(network: NetWork) {\n    this.network = network;\n  }\n\n  //Dapp use this api to connect to the wallet.\n  abstract requestAccount(name: string, permissions: string[]): Promise<any>;\n\n  //get wallet balance\n  abstract getbalance(): Promise<number>;\n\n  //sign raw transaction, returns unlockscript of the p2pkh input if success\n  abstract signRawTransaction(rawtx: string, inputIndex: number, sigHashType: SignType, addr: string\n  ): Promise<string>;\n\n  //get signature for special input\n  abstract getSignature(rawtx: string, inputIndex: number, inputAmount: number, inputScript: string, sigHashType: SignType, addr: string\n  ): Promise<string>;\n\n  //send raw transaction, returns transaction hash if success\n  abstract sendRawTransaction(rawTx: string): Promise<string>;\n\n  //returns array of unspent transaction outputs, which total amount is more than the minAmount argument.\n  abstract listUnspent(minAmount: number, options?: {\n    purpose?: string\n  }): Promise<UTXO[]>;\n\n  //returns a new Bitcoin address, for receiving change.\n  abstract getRawChangeAddress(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n  //returns a public key\n  abstract getPublicKey(options?: {\n    purpose?: string\n  }): Promise<string>;\n\n}","import { buildContractClass, buildTypeClasses, ScryptType, bsv } from 'scryptlib';\nimport { UTXO, wallet, Tx,  SignType } from './wallet';\nimport axios from 'axios';\nimport { AbstractContract } from 'scryptlib/dist/contract';\nimport {toRawTx } from './wutils';\nconst WEB3_VERSION = '0.0.1';\n\nconst FEE = 2000;\n\nexport class web3 {\n\n\n  static wallet: wallet;\n\n\n  static setWallet(wallet: wallet) {\n    web3.wallet = wallet;\n  }\n\n\n  static version() {\n    return WEB3_VERSION;\n  }\n\n\n  static loadContract(url: string): Promise<{\n    contractClass: typeof AbstractContract,\n    types: Record<string, typeof ScryptType>\n  }> {\n\n    return axios.get(url, {\n      timeout: 10000\n    }).then(res => {\n\n      return {\n        contractClass: buildContractClass(res.data),\n        types: buildTypeClasses(res.data)\n      };\n    });\n  }\n\n\n\n  \n  static async buildDeployTx(contract: AbstractContract, amountInContract: number, publicKey: string): Promise<Tx> {\n\n    let wallet = web3.wallet\n\n    let changeAddress = await web3.wallet.getRawChangeAddress();\n\n    const minAmount = amountInContract + FEE;\n\n    return wallet.listUnspent(minAmount, {\n      purpose: 'alice'\n    }).then(async (utxos: UTXO[]) => {\n      if (utxos.length === 0) {\n        throw new Error('no utxos');\n      }\n\n      const tx: Tx = {\n        inputs: [],\n        outputs: []\n      };\n\n      tx.outputs.push({\n        script: contract.lockingScript.toHex(),\n        satoshis: amountInContract \n      });\n\n\n      //add input which using utxo from alice\n      tx.inputs.push(\n        {\n          utxo: utxos[0],\n          script: '',\n          sequence: 0\n        }\n      );\n\n      const changeAmount = utxos[0].satoshis - amountInContract - FEE;\n\n      if (changeAmount <= 0) {\n        throw new Error('fund is not enough');\n      }\n\n      //add alice change output\n      const script = bsv.Script.buildPublicKeyHashOut(changeAddress).toHex();\n      tx.outputs.push(\n        {\n          script: script,\n          satoshis: changeAmount\n        }\n      );\n\n      return tx;\n    }).then((tx) => {\n      const utxo = tx.inputs[0].utxo;\n\n      let pubKey = bsv.PublicKey.fromHex(publicKey)\n      let address = `${pubKey.toAddress()}`\n      console.log('signature address', address)\n      return wallet.getSignature(toRawTx(tx), 0, utxo.satoshis, utxo.script, SignType.ALL, address).then(signature => {\n        console.log('getSignature', signature, publicKey)\n        const script = new bsv.Script()\n        .add(Buffer.from(signature,'hex'))\n        .add(pubKey.toBuffer())\n        .toHex()\n        tx.inputs[0].script = script;\n        return tx;\n      })\n    })\n  }\n\n\n\n  static async sendRawTx(rawTx: string): Promise<string> {\n    return web3.wallet.sendRawTransaction(rawTx);\n  }\n\n  static async sendTx(tx: Tx): Promise<string> {\n    return web3.wallet.sendRawTransaction(toRawTx(tx));\n  }\n\n  static async deploy(contract: AbstractContract, amountInContract: number, pubkey: string): Promise<[Tx, string]> {\n    return web3.buildDeployTx(contract, amountInContract, pubkey).then(async tx => {\n      return web3.sendTx(tx).then(txid => {\n        return [tx, txid];\n      })\n    });\n  }\n}","\nimport { toHex, bsv, SigHashPreimage, getPreimage as getPreimage_ } from 'scryptlib';\nimport { SignType, Tx, UTXO } from './wallet';\n\n\nexport function signInput(privateKey: any, tx: any, inputIndex: number, sigHashType: number, utxo: UTXO): string {\n\n  tx.inputs[inputIndex].output = new bsv.Transaction.Output({\n    script: utxo.script,\n    satoshis: utxo.satoshis\n  });\n\n  const sig = new bsv.Transaction.Signature({\n    publicKey: privateKey.publicKey,\n    prevTxId: utxo.txHash,\n    outputIndex: utxo.outputIndex,\n    inputIndex,\n    signature: bsv.Transaction.Sighash.sign(tx, privateKey, sigHashType,\n      inputIndex,\n      tx.inputs[inputIndex].output.script,\n      tx.inputs[inputIndex].output.satoshisBN),\n    sigtype: sigHashType,\n  });\n\n  return bsv.Script.buildPublicKeyHashIn(\n    sig.publicKey,\n    sig.signature.toDER(),\n    sig.sigtype,\n  ).toHex();\n}\n\n\n\n\nexport function toBsvTx(tx: Tx) {\n  const tx_ = new bsv.Transaction();\n\n  tx.inputs.forEach(input => {\n    tx_.addInput(new bsv.Transaction.Input({\n      prevTxId: input.utxo.txHash,\n      outputIndex: input.utxo.outputIndex,\n      sequenceNumber: input.sequence,\n      script: input.script ? bsv.Script.fromHex(input.script) : new bsv.Script(),\n    }), bsv.Script.fromHex(input.utxo.script), input.utxo.satoshis);\n  });\n\n\n  tx.outputs.forEach(output => {\n    tx_.addOutput(new bsv.Transaction.Output({\n      script: bsv.Script.fromHex(output.script),\n      satoshis: output.satoshis,\n    }));\n  });\n\n  tx_.nLockTime = tx.nLockTime || 0;\n  return tx_;\n}\n\nexport function toRawTx(tx: Tx) {\n  return toBsvTx(tx).toString();\n}\n\n\n\nexport function getPreimage(tx: Tx, inputIndex = 0, sigHashType: SignType = SignType.ALL): SigHashPreimage {\n  const bsvTx = toBsvTx(tx);\n  return getPreimage_(bsvTx, bsv.Script.fromHex(tx.inputs[inputIndex].utxo.script), tx.inputs[inputIndex].utxo.satoshis, inputIndex, sigHashType);\n}\n","import React from 'react';\n\nconst Square = props => {\n\n\n\n  let tx = props.value ? `https://whatsonchain.com/tx/${props.value.tx}` : \"\";\n  let icon = props.value ? <div className='squareicon'>{props.value.n}</div> : \"\";\n  return (\n    <div className=\"squarewapper\">\n      <button className={`${props.winnerClass} square`} onClick={props.onClick}>\n        {props.value ? <a href={tx} target=\"_blank\" title=\"Click to see the transaction\">{props.value.label}</a> : props.value}\n      </button>\n      {icon}\n    </div>\n\n  )\n\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  createBoard(row, col) {\n    const board = [];\n    let cellCounter = 0;\n\n    for (let i = 0; i < row; i += 1) {\n      const columns = [];\n      for (let j = 0; j < col; j += 1) {\n        columns.push(this.renderSquare(cellCounter++));\n      }\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\n    }\n\n    return board;\n  }\n\n  renderSquare(i) {\n\n    const winnerClass =\n      this.props.winnerSquares &&\n        (this.props.winnerSquares[0] === i ||\n          this.props.winnerSquares[1] === i ||\n          this.props.winnerSquares[2] === i)\n        ? 'square--green'\n        : '';\n\n    return (\n      <Square\n        winnerClass={winnerClass}\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard(3, 3)}</div>;\n  }\n}\n\nexport default Board;\n","export const LocalStorageKey = {\n  accountToken: \"access_token\",\n  refreshToken: \"refresh_token\",\n\n  // bob\n  publicKeyBob: \"public_key_bob\",\n  addressBob: \"address_bob\",\n  userBob: \"user_bob\",\n  // alice\n  publicKeyAlice: \"public_key_alice\",\n  addressAlice: \"address_alice\",\n  userAlice: \"user_alice\",\n};\n\n// 测试环境开放平台\n// const host = \"http://192.168.1.13:6001\";\n\nexport const DAPP_API_PATHS = {\n  dapp_list_unspent: `/v1/grandet_dapp/dapp_list_unspent`,\n  dapp_list_unspent_by_address: `/v1/grandet_dapp/dapp_list_unspent_by_address`,\n  dapp_sign_raw_transaction: `/v1/grandet_dapp/dapp_sign_raw_transaction`,\n  dapp_get_signature: `/v1/grandet_dapp/dapp_get_signature`,\n  dapp_get_balance: `/v1/grandet_dapp/dapp_get_balance`,\n  dapp_send_raw_transaction: `/v1/grandet_dapp/dapp_send_raw_transaction`,\n  dapp_get_raw_change_address: `/v1/grandet_dapp/dapp_get_raw_change_address`,\n  dapp_get_public_key: `/v1/grandet_dapp/dapp_get_public_key`,\n  get_access_token: `/v1/oauth2/get_access_token`,\n};\n\nexport const CLIENT_ID = \"ce7ac9b5c4d54c7f9e71ed3e9a732c12\";\n\n// 通过URL判断是哪个玩家\nexport const getPlayer = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"player\") || \"alice\";\n};\n\n// 通过URL判断是哪个玩家\nexport const getPlayerByState = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"state\") || \"alice\";\n};\n\n// export const getCode = () => {\n//   const urlParams = new URLSearchParams(window.location.search);\n//   return urlParams.get(\"code\");\n// };\nexport const getToken = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"access_token\");\n};\n\nexport const DotWalletToken = {\n  get: () => {\n    return localStorage.getItem(LocalStorageKey.accountToken);\n  },\n  set: (accessToken) => {\n    localStorage.setItem(LocalStorageKey.accountToken, accessToken);\n  },\n};\n\nexport const PlayerPublicKey = {\n  get: (player) => {\n    if (player) {\n      return localStorage[`public_key_${player}`];\n    }\n    const _player = getPlayer();\n    const key =\n      _player === \"alice\"\n        ? LocalStorageKey.publicKeyAlice\n        : LocalStorageKey.publicKeyBob;\n    return localStorage.getItem(key);\n  },\n  set: (publicKey, player) => {\n    if (player) {\n      localStorage[`public_key_${player}`] = publicKey;\n      return;\n    }\n    const key =\n      player === \"alice\"\n        ? LocalStorageKey.publicKeyAlice\n        : LocalStorageKey.publicKeyBob;\n    localStorage.setItem(key, publicKey);\n  },\n};\n\nexport const PlayerAddress = {\n  get: (player) => {\n    if (player) {\n      return localStorage[`address_${player}`];\n    }\n    const _player = getPlayer();\n    const key =\n      _player === \"alice\"\n        ? LocalStorageKey.addressAlice\n        : LocalStorageKey.addressBob;\n    return localStorage.getItem(key);\n  },\n  set: (address, player) => {\n    if (player) {\n      localStorage[`address_${player}`] = address;\n      return;\n    }\n    const key =\n      player === \"alice\"\n        ? LocalStorageKey.addressAlice\n        : LocalStorageKey.addressBob;\n    localStorage.setItem(key, address);\n  },\n};\n\n// export const DotWalletUser = {\n//   get: () => {\n//     const player = getPlayer();\n//     const key =\n//       player === \"alice\" ? LocalStorageKey.userAlice : LocalStorageKey.userBob;\n\n//     const userStr = localStorage.getItem(key);\n\n//     try {\n//       return userStr ? (JSON.parse(userStr) as IUser) : null;\n//     } catch (error) {\n//       return null;\n//     }\n//   },\n//   set: (user: IUser) => {\n//     const player = getPlayer();\n//     const key =\n//       player === \"alice\" ? LocalStorageKey.userAlice : LocalStorageKey.userBob;\n\n//     localStorage.setItem(key, JSON.stringify(user));\n//   },\n// };\n","import { Account, NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport { toHex, bsv, signTx } from 'scryptlib';\nimport { signInput, toBsvTx } from './wutils';\nimport axios from 'axios';\n\n\nexport class LocalWallet extends wallet {\n  API_PREFIX: string;\n  privKey: any;\n  constructor(network: NetWork, key: string) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == NetWork.Testnet ? 'test' : 'main'}`;\n    this.privKey = key ? new bsv.PrivateKey.fromWIF(key) : new bsv.PrivateKey.fromRandom(network);\n  }\n\n\n  requestAccount(name: string, permissions: string[]): Promise<Account> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getbalance(): Promise<number> {\n\n    const {\n      data: balance\n    } = await axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/balance`, {\n      timeout: 5000\n    });\n\n    return balance.confirmed + balance.unconfirmed;\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n\n    let tx_ = new bsv.Transaction(rawtx);\n\n    const utxo = tx_.inputs[inputIndex].utxo;\n\n    return signInput(this.privKey, tx_, inputIndex, sigHashType, utxo);\n  }\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    inputAmount: number,\n    inputScript: string, \n    sigHashType: SignType,\n    addr: string): Promise<string> {\n\n    let tx_ = new bsv.Transaction(rawtx);\n\n    let script = new bsv.Script.fromHex(inputScript);\n\n    return toHex(signTx(tx_, this.privKey, script, inputAmount, inputIndex, sigHashType));\n\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n\n    // 1 second per KB\n\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n    const {\n      data: txid\n    } = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n      txhex: rawTx\n    }, {\n      timeout: time\n    });\n    return txid;\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n    return axios.get(`${this.API_PREFIX}/address/${this.privKey.toAddress()}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(this.privKey.toAddress()).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(this.privKey.toAddress() + ''));\n  }\n\n\n  getPublicKey(options?: { purpose?: string; }): Promise<string> {\n\n    return new Promise(resolve => resolve(toHex(this.privKey.publicKey)));\n  }\n\n}","import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { DotWalletToken } from \"./utils\";\n\nconst Request = axios.create({\n  timeout: 20000,\n});\n\nexport const requestInterceptor = (config: AxiosRequestConfig) => {\n  const access_token = DotWalletToken.get();\n\n  if (access_token) {\n    config.headers[\"Authorization\"] = \"Bearer \" + access_token;\n  }\n\n\n\n  return config;\n};\n\nRequest.interceptors.request.use(requestInterceptor, (error) =>\n  Promise.reject(error)\n);\n\nexport const responseIntercepter = async (res: AxiosResponse) => {\n  if (res && +res.status === 200) {\n    if(+res.data.code === 75000){\n      console.error(res)\n      localStorage.clear()\n      alert(\"Re-login\")\n      window.location.href = '';\n    }\n    if (+res.data.code === 0) {\n      return Promise.resolve(res);\n    } else {\n      return Promise.reject(res);\n    }\n  }\n\n  if (res && res.status >= 400) {\n    return Promise.reject(res);\n  }\n\n  return Promise.resolve(res);\n};\n\nRequest.interceptors.response.use(responseIntercepter, (error) =>\n  Promise.reject(error)\n);\n\nexport default Request;\n","import { NetWork, UTXO, wallet, Tx, SignType } from \"./wallet\";\nimport { DAPP_API_PATHS, getPlayerByState, LocalStorageKey } from \"../utils\";\nimport Request from \"../Request\";\n\nexport class DotWallet extends wallet {\n  API_PREFIX: string;\n  API_DOTWALLET: string;\n  CLIENT_ID = \"b02425bfc60c86e8dc1fc0243a005882\";\n  loginUrl: string;\n  sender: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    console.log(\"new DotWallet\");\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${\n      network === NetWork.Regtest ? \"test\" : \"main\"\n    }`;\n    // this.API_DOTWALLET = network == NetWork.Regtest ?  `http://192.168.1.13:6001` : `https://api.ddpurse.com`;\n    this.API_DOTWALLET =\n      network === NetWork.Regtest\n        ? `http://192.168.1.13:6001`\n        : `https://api.ddpurse.com`;\n    console.log(\"redirect_uri\", `${window.location.origin}/tic-tac-toe`);\n    const loginUrl = `${this.API_DOTWALLET}/authorize?client_id=${\n      this.CLIENT_ID\n    }&redirect_uri=${encodeURIComponent(\n      `${window.location.origin}/tic-tac-toe`\n    )}&response_type=token&scope=${encodeURIComponent(\"user.info\")}`;\n    this.loginUrl = loginUrl;\n    this.sender =\n      network === NetWork.Regtest\n        ? {\n            appid: \"test_bsv_coin_regular\",\n            user_index: 0,\n          }\n        : {\n            appid: \"bsv_coin_regular\",\n            user_index: 0,\n          };\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n    window.location.href = `${this.loginUrl}&state=${name}`;\n    return Promise.resolve(true);\n  }\n\n  setToken = (token: string) => {\n    if (token) {\n      localStorage[LocalStorageKey.accountToken] = token;\n      const query =\n        getPlayerByState() == \"alice\" ? \"?player=alice\" : \"?player=bob\";\n      window.location.href = `${window.location.origin}/tic-tac-toe${query}`;\n    }\n  };\n\n  // code2token = async (code: string) => {\n  //   if (!code) return;\n  //   try {\n  //     const { data } = await axios.post(\n  //       `https://common.mempool.com/api/dotwallet/get_access_token`,\n  //       {\n  //         code,\n  //         redirect_uri: `${window.location.origin}/tic-tac-toe`,\n  //       }\n  //     );\n\n  //     const { access_token } = data.data;\n  //     if (access_token) {\n  //       localStorage[LocalStorageKey.accountToken] = access_token;\n  //       const query =\n  //         getPlayerByState() == \"alice\" ? \"?player=alice\" : \"?player=bob\";\n  //       window.location.href = `${window.location.origin}/tic-tac-toe${query}`;\n  //     }\n  //   } catch (error) {\n  //     console.error(\"code2token error\", error);\n  //   }\n  // };\n\n  async getbalance(): Promise<number> {\n    try {\n      const { data } = await Request.post(\n        `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_balance}`,\n        {\n          sender: this.sender,\n        }\n      );\n      return data.data.confirm + data.data.unconfirm;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  async signRawTransaction(\n    rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n    const { data } = await Request.post(\n      `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_sign_raw_transaction}`,\n      {\n        sender: this.sender,\n        input_index: inputIndex,\n        sig_type: sigHashType,\n        rawtx,\n        addr,\n      },\n      {\n        headers: {},\n      }\n    );\n    return data.data.signed_rawtx;\n  }\n\n  async getSignature(\n    rawtx: string,\n    inputIndex: number,\n    inputAmount: number,\n    inputScript: string,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n    const { data } = await Request.post(\n      `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_signature}`,\n      {\n        sender: this.sender,\n        input_index: inputIndex,\n        sig_type: sigHashType,\n        rawtx,\n        addr,\n      },\n      {\n        headers: {\n          player: \"alice\",\n        },\n      }\n    );\n\n    return data.data.hex_signature;\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    const { data } = await Request.post(\n      `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_send_raw_transaction}`,\n      {\n        sender: this.sender,\n        rawTx,\n      }\n    );\n\n    return data.data.txid;\n  }\n\n  async listUnspent(\n    minAmount: number,\n    options?: { purpose?: string }\n  ): Promise<UTXO[]> {\n    const { data } = await Request.post(\n      `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_list_unspent}`,\n      {\n        sender: this.sender,\n        min_amount: minAmount,\n      },\n      {\n        headers: {\n          player: options?.purpose,\n        },\n      }\n    );\n\n    return data.data.utxos\n      .filter((utxo: any) => utxo.satoshis >= minAmount)\n      .map((utxo: any) => {\n        const _utxo = {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.output_index,\n          satoshis: utxo.satoshis,\n          script: utxo.script,\n          addr: utxo.addr,\n          pubkey: utxo.pubkey,\n        } as UTXO;\n        return _utxo;\n      });\n  }\n\n  async getRawChangeAddress(options?: { purpose?: string }): Promise<string> {\n    const { data } = await Request.post(\n      `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_raw_change_address}`,\n      {\n        sender: this.sender,\n      },\n      {\n        headers: {\n          player: options?.purpose,\n        },\n      }\n    );\n\n    return data.data.address;\n  }\n\n  async getPublicKey(options?: { purpose?: string }): Promise<string> {\n    const { data } = await Request.post(\n      `${this.API_DOTWALLET}${DAPP_API_PATHS.dapp_get_public_key}`,\n      {\n        sender: this.sender,\n      },\n      {\n        headers: {\n          player: options?.purpose,\n        },\n      }\n    );\n\n    return data.data.public_key;\n  }\n}\n","\nimport { EventEmitter } from 'events';\nimport { DotWalletToken } from './utils';\n\nclass Server extends EventEmitter {\n    player = ''\n    privKey = ''\n    accessToken = ''\n    constructor() {\n        super();\n        var urlParams = new URLSearchParams(window.location.search);\n        this.player = urlParams.get('player') || \"alice\";\n        const self = this;\n        this.accessToken = DotWalletToken.get()\n\n        window.addEventListener('storage', (e) => {\n            // When local storage changes, dump the list to\n            // the console.\n\n            if (e.key === \"game\") {\n                try {\n                    let gameJson = window.localStorage.getItem('game');\n                    if (gameJson && gameJson !== null) {\n                        let game = JSON.parse(gameJson);\n\n                        if (game.event) {\n\n                            self.emit(game.event, game)\n                        }\n\n                    }\n                } catch (e) {\n                    console.error(' storage change error', e)\n                }\n            }\n\n        }, false);\n\n    }\n\n\n\n    deleteGame = () => {\n        window.localStorage.removeItem('game');\n    }\n\n\n    createGame = (game) => {\n        game.event = 'createGame';\n        return window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n    saveGame = (game, event) => {\n        game.event = event;\n        window.localStorage.setItem('game', JSON.stringify(game));\n    }\n\n\n\n    getGame = () => {\n        let gameJson = window.localStorage.getItem('game');\n        if (gameJson && gameJson !== null) {\n            return JSON.parse(gameJson);\n        }\n        return undefined\n    }\n    \n\n\n    getCurrentPlayer = () => (this.player);\n\n\n    savePrivateKey = (key) => {\n        this.privKey = key;\n        window.localStorage.setItem(this.player, key);\n    }\n\n\n    getPrivateKey = () => {\n        if (this.player) {\n            this.privKey = window.localStorage.getItem(this.player);\n        }\n\n        return this.privKey;\n    }\n\n    getBobPrivateKey = () => {\n\n        return window.localStorage.getItem('bob');\n    }\n\n    getAlicePrivateKey = () => {\n\n        return window.localStorage.getItem('alice');\n    }\n\n    getAccessToken = () => {\n        if (this.player) {\n            this.accessToken = DotWalletToken.get();\n        }\n\n        return this.accessToken;\n    }\n\n    addDeployedListener(cb) {\n        this.on('deployed', cb);\n    }\n\n\n    removeDeployedListener(cb) {\n        this.off('deployed', cb)\n    }\n\n\n    addNextListener(cb) {\n        this.on('next', cb);\n    }\n\n    removeNextListener(cb) {\n        this.off('next', cb)\n    }\n}\n\nconst server = new Server();\n\nexport default server;","import React from 'react';\nimport Board from './Board';\nimport { bsv, Sig, toHex } from 'scryptlib';\nimport { web3, Input, SignType } from './web3';\n\nimport server from './Server';\nimport { getPreimage, toRawTx, toBsvTx } from './web3/wutils';\nimport { PlayerAddress, PlayerPublicKey, getPlayer } from './utils';\n\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[b] && squares[c] && squares[a].label === squares[b].label && squares[a].label === squares[c].label) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\nconst getLocation = (move) => {\n  const locationMap = {\n    0: 'row: 1, col: 1',\n    1: 'row: 1, col: 2',\n    2: 'row: 1, col: 3',\n    3: 'row: 2, col: 1',\n    4: 'row: 2, col: 2',\n    5: 'row: 2, col: 3',\n    6: 'row: 3, col: 1',\n    7: 'row: 3, col: 2',\n    8: 'row: 3, col: 3',\n  };\n\n  return locationMap[move];\n};\n\nconst initialState = {\n  history: [\n    {\n      squares: Array(9).fill(null),\n    },\n  ],\n  currentStepNumber: 0,\n  is_alice_turn: true,\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.game && props.game.gameState) {\n      this.state = props.game.gameState;\n    } else {\n      this.state = initialState;\n    }\n  }\n\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.game && nextProps.game.gameState) {\n      this.setState(nextProps.game.gameState);\n    } else {\n      this.setState(initialState);\n    }\n  }\n\n\n  getNewStateScript(squares) {\n    return this.props.contractInstance.getNewStateScript({\n      is_alice_turn: !this.state.is_alice_turn,\n      board: squares.map(square => {\n\n        if (square && square.label === 'X') {\n          return 1;\n        } else if (square && square.label === 'O') {\n          return 2;\n        } else {\n          return 0;\n        }\n      })\n    })\n  }\n\n  calculateOldState(n, squares) {\n    // n = 0 is first call\n    if(n > 0) {\n      this.props.contractInstance.is_alice_turn = this.state.is_alice_turn;\n      this.props.contractInstance.board = squares.map(square => {\n  \n        if (square && square.label === 'X') {\n          return 1;\n        } else if (square && square.label === 'O') {\n          return 2\n        } else {\n          return 0;\n        }\n      })\n    }\n  }\n\n\n  updateState(i, squares) {\n    if (!this.props.game || !this.props.game.lastUtxo) {\n      return false;\n    }\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return false;\n    }\n    squares[i] = { label: this.state.is_alice_turn ? 'X' : 'O' };\n    let player = server.getCurrentPlayer();\n\n    if (player === \"alice\" && this.state.is_alice_turn) {\n      return true;\n    } else if (player === \"bob\" && !this.state.is_alice_turn) {\n      return true;\n    } else {\n      alert(`now is ${this.state.is_alice_turn ? 'Alice' : 'Bob'} turn `)\n      console.error(`now is ${this.state.is_alice_turn ? 'Alice' : 'Bob'} turn , but got ${player}`)\n      return false;\n    }\n\n  }\n\n\n  async buildCallContractTx(i, squares, history) {\n    let winner = calculateWinner(squares).winner;\n    const FEE = 3000;\n    let outputs = [];\n    let amount = this.props.game.lastUtxo.satoshis - FEE;\n    if (winner) {\n      const player = getPlayer();\n      // winner is current player\n\n      let address = await PlayerAddress.get(player);\n\n      outputs.push({\n        satoshis: amount,\n        script: bsv.Script.buildPublicKeyHashOut(address).toHex()\n      })\n\n    } else if (history.length >= 9) {\n\n      const aliceAddress = new bsv.PublicKey(this.props.game.alicePubKey, {\n        network: bsv.Networks.testnet\n      });\n      const bobAddress = new bsv.PublicKey(this.props.game.bobPubKey, {\n        network: bsv.Networks.testnet\n      });\n\n      //no body win\n      const aliceLockingScript = bsv.Script.buildPublicKeyHashOut(aliceAddress.toAddress(bsv.Networks.testnet)).toHex();\n      const bobLockingScript = bsv.Script.buildPublicKeyHashOut(bobAddress.toAddress(bsv.Networks.testnet)).toHex();\n      amount = (this.props.game.lastUtxo.satoshis - FEE) / 2;\n\n      outputs.push({\n        satoshis: amount,\n        script: aliceLockingScript\n      })\n\n      outputs.push({\n        satoshis: amount,\n        script: bobLockingScript\n      })\n\n    } else {\n      //next\n      const newLockingScript = this.getNewStateScript(squares);\n      outputs.push({\n        satoshis: amount,\n        script: newLockingScript.toHex()\n      })\n    }\n\n\n    if (outputs[0].satoshis <= 0) {\n      alert(`fund in contract is too low `)\n      return undefined;\n    }\n\n\n    let tx = {\n      inputs: [{\n        utxo: this.props.game.lastUtxo,\n        sequence: 0,\n        script: \"\"\n      }],\n      outputs: outputs\n    }\n\n    let preimage = getPreimage(tx);\n\n    const addr = PlayerAddress.get();\n\n    let sig = await web3.wallet.getSignature(toRawTx(tx), 0,  tx.inputs[0].utxo.satoshis,\n       tx.inputs[0].utxo.script, SignType.ALL, addr);\n\n    let unlockScript = this.props.contractInstance.move(i, new Sig(toHex(sig)), amount, preimage).toHex();\n\n    tx.inputs[0].script = unlockScript;\n\n    // we can verify locally before we broadcast the tx, if fail, \n    // it will print the launch.json in the brower webview developer tool, just copy/paste,\n    // and try launch the sCrypt debugger\n\n    const result = this.props.contractInstance.move(i, new Sig(toHex(sig)), amount, preimage).verify({ inputSatoshis: this.props.game.lastUtxo.satoshis, tx: toBsvTx(tx) })\n\n    if (!result.success) {\n      console.error(result.error)\n      throw new Error(result.error)\n    }\n\n    return tx;\n  }\n\n\n  async handleClick(i) {\n\n    const history = this.state.history.slice(0, this.state.currentStepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    this.calculateOldState(this.state.currentStepNumber, squares);\n    if (!this.updateState(i, squares)) {\n      console.error('handleClick checkIfValid false...')\n      return;\n    }\n\n    // let tx = await this.buildCallContractTx(i, newState, squares, history);\n    let tx = await this.buildCallContractTx(i, squares, history);\n\n    if (!tx) {\n      console.error('buildCallContractTx fail...')\n      return;\n    }\n\n    web3.sendTx(tx).then(txid => {\n\n      squares[i].tx = txid;\n      squares[i].n = history.length;\n      let gameState = {\n        history: history.concat([\n          {\n            squares,\n            currentLocation: getLocation(i),\n            stepNumber: history.length,\n          },\n        ]),\n        is_alice_turn: !this.state.is_alice_turn,\n        currentStepNumber: history.length,\n      };\n\n      server.saveGame(Object.assign({}, this.props.game, {\n        gameState: gameState,\n        lastUtxo: {\n          txHash: txid,\n          outputIndex: 0,\n          satoshis: tx.outputs[0].satoshis,\n          script: tx.outputs[0].script\n        }\n      }), 'next')\n\n      this.setState(gameState);\n\n    }).catch(e => {\n      if (e.response) {\n        alert('sendTx errror: ' + e.response.data)\n      }\n      console.error('sendTx errror', e.response)\n    })\n\n  }\n\n\n  render() {\n    const { history } = this.state;\n    const current = history[this.state.currentStepNumber];\n    const { winner, winnerRow } = calculateWinner(current.squares);\n\n\n\n    const game = server.getGame();\n\n\n\n\n    let status;\n    let end;\n\n    let icon;\n\n\n    if (server.getCurrentPlayer() === 'bob') {\n      icon = <div className=\"bob\">Bob<img src=\"/tic-tac-toe/bob.png\"></img></div>\n    } else {\n      icon = <div className=\"alice\">Alice<img src=\"/tic-tac-toe/alice.jpg\"></img></div>\n    }\n\n    let bet;\n    if (game && game.deploy) {\n      bet = <div className=\"bet\"><a href={`https://whatsonchain.com/tx/${game.deploy}`} target=\"_blank\">Bet transaction</a> </div>\n    }\n\n    let player = server.getCurrentPlayer();\n    if (winner) {\n      let winnerName = winner.label === 'X' ? 'Alice' : 'Bob';\n      status = `Winner is ${winnerName}`;\n      if (game && game.lastUtxo) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${game.lastUtxo.txHash}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else if (history.length === 10) {\n      status = 'Draw. No one won.';\n      if (game && game.lastUtxo) {\n        end = <div className=\"end\"><a href={`https://whatsonchain.com/tx/${game.lastUtxo.txHash}`} target=\"_blank\">Withdraw transaction</a> </div>\n      }\n    } else {\n\n      let nexter = this.state.is_alice_turn ? 'Alice' : 'Bob';\n\n      status = `Next player: ${nexter}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n\n          <div className=\"game-title\">\n            {icon}\n            <div className=\"game-status\"> {status} </div>\n          </div>\n\n          <Board\n            squares={current.squares}\n            winnerSquares={winnerRow}\n            onClick={i => this.handleClick(i)}\n          />\n\n          <div className=\"game-bottom\">\n            {bet}\n            {end}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","\nimport React, { useState, useRef, useEffect } from 'react';\n\nimport { web3 } from './web3';\nimport server from './Server';\n\nfunction makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\n\nfunction TitleBar(props) {\n    const forceUpdate = React.useReducer(bool => !bool)[1];\n\n    const amountRef = useRef(null);\n\n    const onStart = (e) => {\n\n        if (!web3.wallet) {\n            alert(\"Pelease create wallet first\")\n            return;\n        }\n        let amount = parseInt(amountRef.current.value);\n\n        if (amount < 20000) {\n            alert(\"The bet fund is too small to play, at least 20000\")\n            return;\n        }\n\n        if (!isNaN(amount)) {\n            props.startBet(amount);\n        } else {\n            console.error(`${amountRef.current.value} is not number`)\n        }\n    }\n\n    const onCancel = (e) => {\n        props.cancelBet();\n    }\n\n\n\n    if (props.started) {\n\n        return (\n            <div>\n                The game is in progress ...\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n    }\n    else if (props.game && props.game.creator === server.getCurrentPlayer()) {\n\n        const player = server.getCurrentPlayer() === 'alice' ? 'bob' : 'alice';\n\n        var url = window.location.href.split('?')[0];\n\n        return (\n            <div>\n                Waiting someone join the game ...\n                <a className=\"pure-button\" href={url + '?player=' + player} target=\"_blank\"> Join</a>\n                <button className=\"pure-button cancel\" onClick={onCancel}>Restart</button>\n            </div>\n        );\n\n    } else if (props.game && props.game.creator !== server.getCurrentPlayer()) {\n\n        return (\n            <div>\n                Joining the game...\n            </div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <label>Bet amount:\n                    <input ref={amountRef} type=\"number\" name=\"amount\" placeholder=\"in satoshis\" />\n                </label>\n                <button className=\"start\" onClick={onStart}>Start Bet</button>\n            </div>\n        );\n    }\n}\n\nexport default TitleBar;\n","import { NetWork, UTXO, wallet, Tx, SignType } from './wallet';\nimport axios from 'axios';\nimport { bsv } from 'scryptlib/dist';\n\n\nexport class Sensilet extends wallet {\n  static DEBUG_TAG = 'Sensilet';\n  API_PREFIX: string;\n  sensilet: any;\n\n  constructor(network: NetWork = NetWork.Mainnet) {\n    super(network);\n    this.API_PREFIX = `https://api.whatsonchain.com/v1/bsv/${network == NetWork.Testnet ? 'test' : 'main'}`;\n    if (typeof (window as any).sensilet !== 'undefined') {\n      console.log('Sensilet is installed!');\n      this.sensilet = (window as any).sensilet \n    } else {\n      console.warn(\"sensilet is not installed\");\n    }\n  }\n\n  requestAccount(name: string, permissions: string[]): Promise<any> {\n\n    if(!this.sensilet) {\n      if(typeof (window as any).sensilet === 'undefined') {\n        alert(\"sensilet is not installed\");\n         window.open(\"https://sensilet.com/\", '_blank');\n      } else  {\n        console.log('Sensilet is installed!');\n        this.sensilet = (window as any).sensilet \n        return this.sensilet.requestAccount()\n      }\n    }\n\n    return this.sensilet.requestAccount()\n  }\n\n  async isConnect(): Promise<boolean> {\n    try {\n      console.log('isConnect')\n      if (typeof this.sensilet !== 'undefined') {\n        let isConnected = await this.sensilet.isConnect();\n        console.log('connect state', isConnected);\n        return isConnected;\n      } \n\n    } catch (error) {\n    \n    }\n    return Promise.resolve(false);\n  }\n\n\n  async getbalance(): Promise<number> {\n    try {\n      let res = await this.sensilet.getBsvBalance();\n      console.log(Sensilet.DEBUG_TAG, 'getbalance', res.balance)\n      return Promise.resolve(res.balance.total);\n    } catch (error) {\n      console.error('getbalance error', error);\n    }\n\n    return Promise.resolve(0)\n  }\n\n  async signRawTransaction(rawtx: string,\n    inputIndex: number,\n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n    console.log('signRawTransaction', rawtx)\n    const tx = new bsv.Transaction(rawtx);\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: addr,\n          inputIndex:inputIndex,\n          satoshis:tx.inputs[inputIndex].satoshis\n        }\n      ]\n    });\n    console.log(res)\n\n    return Promise.resolve(res.sigList[0].sig);\n  }\n\n\n\n  async getSignature(rawtx: string,\n    inputIndex: number,\n    inputAmount: number,\n    inputScript: string, \n    sigHashType: SignType,\n    addr: string\n  ): Promise<string> {\n\n    let res = await this.sensilet.signTx({\n      list:[\n        {\n          txHex: rawtx,\n          address: addr,\n          inputIndex:inputIndex,\n          satoshis:inputAmount,\n          scriptHex: inputScript,\n          sigtype: sigHashType\n        }\n      ]\n    });\n\n    return res.sigList[0].sig;\n  }\n\n  async sendRawTransaction(rawTx: string): Promise<string> {\n    // 1 second per KB\n    const size = Math.max(1, rawTx.length / 2 / 1024); //KB\n    const time = Math.max(10000, 1000 * size);\n\n    try {\n      const res = await axios.post(`${this.API_PREFIX}/tx/raw`, {\n        txhex: rawTx\n      }, {\n        timeout: time\n      });\n      return res.data;\n    } catch (error) {\n      throw new Error('sendRawTransaction error: ')\n    }\n\n  }\n\n  async listUnspent(minAmount: number, options?: { purpose?: string; }): Promise<UTXO[]> {\n\n    let address = await this.sensilet.getAddress();\n    console.log(Sensilet.DEBUG_TAG, 'listUnspent', address)\n    return axios.get(`${this.API_PREFIX}/address/${address}/unspent`, {\n      timeout: 10000\n    }).then(res => {\n      return res.data.filter((utxo: any) => utxo.value >= minAmount).map((utxo: any) => {\n        return {\n          txHash: utxo.tx_hash,\n          outputIndex: utxo.tx_pos,\n          satoshis: utxo.value,\n          script: bsv.Script.buildPublicKeyHashOut(address).toHex(),\n        } as UTXO;\n      });\n    });\n  }\n\n\n  async getRawChangeAddress(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getAddress();\n  }\n\n\n  async getPublicKey(options?: { purpose?: string; }): Promise<string> {\n    return this.sensilet.getPublicKey();\n  }\n\n  async exitAccount(): Promise<boolean> {\n    try {\n      await this.sensilet.exitAccount();\n      return true\n   } catch (e) {\n     console.log(e);\n   }\n   return false;\n  }\n}","import React, { useState, useEffect } from \"react\";\nimport { web3, DotWallet } from \"./web3\";\nimport server from \"./Server\";\nimport { getToken, getPlayer, PlayerPublicKey, PlayerAddress } from \"./utils\";\nimport { Sensilet } from \"./web3/sensilet\";\nconst Wallet = (props) => {\n  const [balance, setBalance] = useState(0);\n  const [authed, setAuth] = useState(false);\n\n  useEffect(() => {\n    const token = getToken();\n    if (token) {\n      const dotwallet = new DotWallet();\n      dotwallet.setToken(token);\n    }\n  }, []);\n\n  useEffect(async () => {\n    const id = setTimeout(async () => {\n      if (!web3.wallet) {\n        if (server.getAccessToken()) {\n          const dotwallet = new DotWallet();\n          web3.setWallet(dotwallet);\n          props.startGame();\n          setAuth(true);\n        } else {\n          const sensilet = new Sensilet();\n          const isConnect = await sensilet.isConnect();\n\n          if (isConnect) {\n            web3.setWallet(sensilet);\n            console.log(\"..... setAuth\");\n            props.startGame();\n            setAuth(true);\n          }\n        }\n      }\n\n      if (web3.wallet) {\n        web3.wallet.getbalance().then((balance) => {\n          setBalance(balance);\n        });\n      }\n    }, 1000);\n\n    return () => clearTimeout(id);\n  }, []);\n\n  const handleDotwallet = (e) => {\n    const dotwallet = new DotWallet();\n    dotwallet.requestAccount(getPlayer());\n  };\n\n  const handleSensilet = async (e) => {\n    try {\n      const sensilet = new Sensilet();\n      const res = await sensilet.requestAccount(getPlayer());\n      if (res) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"requestAccount error\", error);\n    }\n  };\n\n  const handleExit = async (e) => {\n    localStorage.clear();\n    const sensilet = new Sensilet();\n\n    const isConnect = await sensilet.isConnect();\n\n    if (isConnect) {\n      await sensilet.exitAccount();\n    }\n\n    web3.setWallet(undefined);\n    setAuth(false);\n    window.location.reload();\n  };\n\n  if (authed) {\n    return (\n      <div className=\"wallet\">\n        <div className=\"walletInfo\">\n          <div className=\"balance\">\n            <label>Balance: {balance}</label>\n          </div>\n          <button className=\"pure-button button-large\" onClick={handleExit}>\n            Logout\n          </button>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"wallet\">\n        <div>\n          <button\n            className=\"pure-button button-large sensilet\"\n            onClick={handleSensilet}\n          >\n            Sensilet\n          </button>\n          <button\n            className=\"pure-button button-large dotwallet\"\n            onClick={handleDotwallet}\n          >\n            Dotwallet\n          </button>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Wallet;\n","import \"./App.css\";\nimport Game from \"./Game\";\nimport React, { useState, useEffect } from \"react\";\nimport TitleBar from \"./TitleBar\";\nimport { PubKey, toHex, bsv } from \"scryptlib\";\n\nimport { DotWallet, web3, UTXO } from \"./web3\";\nimport Wallet from \"./wallet\";\nimport server from \"./Server\";\nimport { PlayerPublicKey, PlayerAddress } from \"./utils\";\nimport { Sensilet } from \"./web3/sensilet\";\n\nfunction App() {\n  const [started, updateStart] = useState(false);\n\n  const [contractInstance, updateContractInstance] = useState(null);\n\n  const forceUpdate = React.useReducer((bool) => !bool)[1];\n\n  const startBet = async (amount) => {\n    //let tx = await web3.deploy(contractInstance, 10000);\n    console.log(\"startBet with amount\", amount);\n\n    if (web3.wallet) {\n      let balance = await web3.wallet.getbalance();\n\n      if (amount > balance) {\n        alert(\"Please fund your wallet address first\");\n        return;\n      }\n\n      let player = server.getCurrentPlayer();\n\n      let game = {\n        amount: amount,\n        tx: {\n          inputs: [],\n          outputs: [],\n        },\n        name: \"tic-tac-toe\",\n        alicePubKey: \"\",\n        bobPubKey: \"\",\n        creator: player,\n        player: \"\",\n        date: new Date(),\n      };\n\n      if (player === \"alice\") {\n        Object.assign(game, {\n          alicePubKey: PlayerPublicKey.get(\"alice\"),\n        });\n      } else {\n        Object.assign(game, {\n          bobPubKey: PlayerPublicKey.get(\"bob\"),\n        });\n      }\n\n      server.createGame(game);\n\n      forceUpdate();\n    }\n  };\n\n  const cancelBet = () => {\n    server.deleteGame();\n    updateStart(false);\n    forceUpdate();\n  };\n\n  const onDeployed = async (game) => {\n    if (game && game.alicePubKey && game.bobPubKey) {\n      fetchContract(game.alicePubKey, game.bobPubKey);\n    }\n\n    updateStart(true);\n  };\n\n  const onNext = async (game) => {\n    //BOB SIGN\n    forceUpdate();\n  };\n\n  async function fetchContract(alicePubKey, bobPubKey) {\n    if (contractInstance === null && alicePubKey && bobPubKey) {\n      let { contractClass: TictactoeContractClass } = await web3.loadContract(\n        \"/tic-tac-toe/tictactoe_release_desc.json\"\n      );\n\n      let c = new TictactoeContractClass(\n        new PubKey(toHex(alicePubKey)),\n        new PubKey(toHex(bobPubKey)),\n        true,\n        [0,0,0,0,0,0,0,0,0]\n      );\n\n      updateContractInstance(c);\n      return c;\n    }\n    return contractInstance;\n  }\n\n  function setPlayersPublicKey() {\n    let wallet = web3.wallet\n\n    if (wallet instanceof Sensilet) {\n      return wallet.getPublicKey().then(async (publicKeyStr) => {\n        let publicKey = bsv.PublicKey.fromHex(publicKeyStr)\n\n        PlayerPublicKey.set(publicKeyStr, 'alice');\n        PlayerAddress.set(publicKey.toAddress(), 'alice');\n\n        PlayerPublicKey.set(publicKeyStr, 'bob');\n        PlayerAddress.set(publicKey.toAddress(), 'bob');\n      })\n    } else if (wallet instanceof DotWallet) {\n      return wallet.listUnspent(20000, {\n        purpose: 'alice'\n      }).then(async (utxos) => {\n\n        if (utxos.length === 0) {\n          throw new Error('no utxos');\n        }\n\n        let publicKey = bsv.PublicKey.fromHex(utxos[0].pubkey)\n\n        PlayerPublicKey.set(utxos[0].pubkey, 'alice');\n        PlayerAddress.set(publicKey.toAddress(), 'alice');\n\n        PlayerPublicKey.set(utxos[0].pubkey, 'bob');\n        PlayerAddress.set(publicKey.toAddress(), 'bob');\n      })\n    }\n  }\n\n\n  async function joinGame(game) {\n\n    let balance = await web3.wallet.getbalance();\n\n    if (balance <= game.amount) {\n      alert(\n        \"no available utxos or  balance is not enough, please fund your wallet\"\n      );\n      return;\n    }\n\n\n    Object.assign(game, {\n      alicePubKey: PlayerPublicKey.get(\"alice\"),\n      player: \"alice\",\n    });\n    Object.assign(game, {\n      bobPubKey: PlayerPublicKey.get(\"bob\"),\n      player: \"bob\",\n    });\n\n\n\n    let contract = await fetchContract(game.alicePubKey, game.bobPubKey);\n\n    if (contract != null) {\n      web3\n        .deploy(contract, game.amount, PlayerPublicKey.get(\"bob\"))\n        .then(([tx, txid]) => {\n\n          game.lastUtxo = {\n            txHash: txid,\n            outputIndex: 0,\n            satoshis: tx.outputs[0].satoshis,\n            script: tx.outputs[0].script,\n          };\n\n          game.tx = tx;\n          game.deploy = txid;\n          server.saveGame(game, \"deployed\");\n          updateStart(true);\n        })\n        .catch((e) => {\n          if (e.message === \"no utxos\") {\n            alert(\"no available utxos, please fund your wallet\");\n          }\n          console.error(\"deploy error\", e);\n        });\n    }\n  }\n\n  async function startGame() {\n\n\n    if (started) {\n      return;\n    }\n    await setPlayersPublicKey();\n\n    let game = server.getGame();\n    if (game && game.lastUtxo) {\n      updateStart(true);\n    }\n\n    if (game && game.alicePubKey && game.bobPubKey) {\n      fetchContract(game.alicePubKey, game.bobPubKey);\n    }\n\n    if (game && !game.deploy) {\n      joinGame(game);\n    }\n\n  }\n\n  useEffect(() => {\n    server.addDeployedListener(onDeployed);\n    server.addNextListener(onNext);\n    return () => {\n      server.removeDeployedListener(onDeployed);\n      server.removeNextListener(onNext);\n    };\n  }, [contractInstance]);\n\n  const game = server.getGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Play Tic-Tac-Toe on Bitcoin</h2>\n        <TitleBar\n          startBet={startBet}\n          cancelBet={cancelBet}\n          started={started}\n          game={game}\n        />\n\n        <Game game={game} contractInstance={contractInstance} />\n\n        <Wallet startGame={startGame}></Wallet>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}